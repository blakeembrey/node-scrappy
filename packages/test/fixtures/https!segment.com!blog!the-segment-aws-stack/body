<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8" class="next-head"/><title class="next-head">The Segment AWS Stack · Segment Blog</title><meta property="og:title" content="The Segment AWS Stack" class="next-head"/><meta property="og:url" content="https://segment.com/blog" class="next-head"/><meta property="og:description" content="" class="next-head"/><meta property="og:image" content="https://images.ctfassets.net/9u2t3ap6pctb/4UJD4ywUl3ebCFYiByJSqU/9775fbd912f6ecab427990caaad69ae4/og-blog.png?h=250" class="next-head"/><meta property="twitter:image" content="https://images.ctfassets.net/9u2t3ap6pctb/4UJD4ywUl3ebCFYiByJSqU/9775fbd912f6ecab427990caaad69ae4/og-blog.png?h=250" class="next-head"/><link rel="preload" href="/blog/_next/static/b0Sj8HXC8ORlpVvY2J0Ps/pages/blogPost.js" as="script"/><link rel="preload" href="/blog/_next/static/b0Sj8HXC8ORlpVvY2J0Ps/pages/_app.js" as="script"/><link rel="preload" href="/blog/_next/static/b0Sj8HXC8ORlpVvY2J0Ps/pages/_error.js" as="script"/><link rel="preload" href="/blog/_next/static/runtime/webpack-2ef50c24cc8d478adafc.js" as="script"/><link rel="preload" href="/blog/_next/static/chunks/commons.77b0e0944d31749d5e2e.js" as="script"/><link rel="preload" href="/blog/_next/static/runtime/main-21d35a579d6d91929353.js" as="script"/><meta charSet="utf-8"/><meta http-equiv="X-UA-Compatible" content="IE=edge"/><meta name="viewport" content="width=device-width, initial-scale=1.0"/><link rel="stylesheet" href="https://static.segment.com/fonts/index.css"/><link rel="stylesheet" href="/blog/static/exported-styles.css"/><link rel="stylesheet" href="/blog/static/prism.css"/><link rel="alternate" type="application/atom+xml" href="/blog/atom.xml" title="Segment Blog"/><meta property="og:type" content="website"/><meta property="og:site_name" content="Segment"/><meta name="twitter:site" content="@segment"/><meta name="twitter:card" content="summary_large_image"/><link rel="icon" href="https://segment.com/favicon.ico" type="image/ico"/><link rel="canonical" href="https://segment.com/blog/the-segment-aws-stack/"/><meta name="application-name" content="Segment"/><meta name="theme-color" content="#00386C"/><meta class="swiftype" name="section" data-type="enum" content="Blog"/><meta class="swiftype" name="priority" data-type="integer" content="2"/><script>!function(){var analytics=window.analytics=window.analytics||[];if(!analytics.initialize)if(analytics.invoked)window.console&&console.error&&console.error("Segment snippet included twice.");else{analytics.invoked=!0;analytics.methods=["trackSubmit","trackClick","trackLink","trackForm","pageview","identify","reset","group","track","ready","alias","debug","page","once","off","on"];analytics.factory=function(t){return function(){var e=Array.prototype.slice.call(arguments);e.unshift(t);analytics.push(e);return analytics}};for(var t=0;t<analytics.methods.length;t++){var e=analytics.methods[t];analytics[e]=analytics.factory(e)}analytics.load=function(t,e){var n=document.createElement("script");n.type="text/javascript";n.async=!0;n.src="https://cdn.segment.com/analytics.js/v1/"+t+"/analytics.min.js";var a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(n,a);analytics._loadOptions=e};analytics.SNIPPET_VERSION="4.1.0";

analytics.page();
}}();</script></head><body><div id="__next"><div></div><div class="Navigation Navigation--light"><div class="Navigation-body"><nav class="Navigation-left"><h1 class="Navigation-item"><a rel="external" href="https://segment.com" class="Navigation-logo"></a><a to="/" class="Navigation-logoSubTitle"> · Blog</a></h1></nav><div class="Navigation-center"><div class="Navigation-links NavigationLinks"><a activeClassName="" href="/blog" class="NavigationLinks-link" to="/blog">All</a><a activeClassName="active" href="/blog/categories/company/" class="NavigationLinks-link" to="/blog/categories/company/">Company</a><a activeClassName="active" href="/blog/categories/integrations/" class="NavigationLinks-link" to="/blog/categories/integrations/">Integrations</a><a activeClassName="active" href="/blog/categories/product/" class="NavigationLinks-link" to="/blog/categories/product/">Product</a><a activeClassName="active" href="/blog/categories/growth/" class="NavigationLinks-link" to="/blog/categories/growth/">Growth</a><a activeClassName="active" href="/blog/categories/events/" class="NavigationLinks-link" to="/blog/categories/events/">Events</a><a activeClassName="active" href="/blog/categories/engineering/" class="NavigationLinks-link" to="/blog/categories/engineering/">Engineering</a></div></div><nav class="Navigation-right"><a href="https://segment.com/contact/demo/" rel="external" class="Link--primary Link--animatedHover" style="display:inline-block">Get a Segment Demo</a></nav></div></div><main data-page-type="Post" data-collection="engineering" data-author="[object Object]" data-published="2016-06-15T00:00:00.000Z"><div class="Page-alignment"><article class="Article fade-in Article--featured" data-collection="engineering" data-author="Calvin French-Owen" data-published="2016-06-15T00:00:00.000Z"><header class="Article-header"><div class="Article-categoryContainer"><a class="Category Category--engineering Article-category" href="/blog/categories/engineering/">engineering</a></div><h1 class="Article-title">The Segment AWS Stack</h1></header><div class="Authors Article-author"><figure class="Author-avatar  "><img class="Author-avatarPic" src="https://c19f7be2e84987e7904e-bf41efcb49679c193a4ec0f3210da86f.ssl.cf1.rackcdn.com/photos/40528-2-1.jpg" alt=""/></figure><div class="Authors-group"><div class="Author-details"><cite><a class="Author-name" href="/blog/authors/calvin-french-owen">Calvin French-Owen</a></cite></div><time class="ArticleInListInList-date"> <!-- -->on <!-- -->Jun 15th 2016</time></div></div><div class="Article-body Content" data-swiftype-name="body" data-swiftype-type="text"><p>AWS is the default for running production infrastructure. It’s cheap, scalable, and flexible to whatever configuration you’d like to run on top of it. But that flexibility comes with a cost: it makes AWS <em>endlessly</em> configurable.</p><p>You can build whatever you want on top of AWS, but that means <a href="https://segment.com/blog/rebuilding-our-infrastructure/">it’s difficult to know whether you’re taking the right approach</a>. Pretty much every startup we talk with has the same question: <em>“</em><a href="https://twitter.com/hueypetersen/status/730177176708911104"><em>What’s the right</em></a><em> </em><a href="https://twitter.com/n1alloc/status/723479989761507329"><em>way to setup our infrastructure</em></a><a href="https://twitter.com/astrostl/status/714162717825761280"><em>?</em></a><em>”</em></p><p>To help solve that problem, we’re excited to open source the <a href="https://github.com/segmentio/stack">Segment AWS Stack</a>. It’s our first pass at building a collection of <a href="https://www.terraform.io/">Terraform</a> modules for creating production-ready architecture on AWS. It’s largely based on the service architecture we use internally to <a href="https://segment.com/blog/scaling-nsq/">process billions of messages every month</a>, but built solely on AWS.</p><p>The steps are incredibly simple. Add 5 lines of Terraform, run <strong>terraform apply</strong>, and you’ll have your base infrastructure up and running in just <em>three minutes</em>.</p><p></p><p>It’s like a mini-Heroku that you host yourself. No magic, just AWS.</p><figure><img src="https://assets.contents.io/asset_OHyeIutv.png"/></figure><h2 id="batteries-included">Batteries Included</h2><p>Our major goals with Stack are:</p><ul><li><p>to provide a good set of defaults for production infrastructure</p></li><li><p>make the AWS setup process incredibly simple</p></li><li><p>allow users to easily customize the core abstractions and run their own infrastructure</p></li></ul><p>To achieve those goals, Stack is built with Hashicorp’s Terraform.</p><p>Terraform provides a means of configuring infrastructure as code. You write code that represents things like EC2 instances, S3 buckets, and more–and then use Terraform to create them.</p><p>Terraform manages the state of your infrastructure internally by building a dependency graph of which resources depend on one another:</p><figure><img src="https://assets.contents.io/asset_3CE28AQv.png"/></figure><p>and then applies only the “diff” of changes to your production environment. Terraform makes changing your infrastructure incredibly seamless because it already knows which resources have to be re-created and which can remain untouched.</p><p>Terraform provides easy-to-use, high level abstractions for provisioning cloud infrastructure, but also exposes the low-level AWS resources for custom configuration. This low-level access provides a marvelous “escape hatch” for truly custom needs.</p><p>To give you a flavor of what the setup process looks like, run <code>terraform apply</code>against this basic configuration:</p><pre data-language="text"><code>module &quot;stack&quot; {
  source      = &quot;github.com/segmentio/stack&quot;
  environment = &quot;prod&quot;
  key_name    = &quot;my-key-name&quot;
  name        = &quot;my-app&quot;
}</code></pre><p>It will automatically create all of the following:</p><p><strong>Networking: </strong>Stack includes a new VPC, with public and private subnets. All routing tables, Internet Gateways, NAT Gateways, and basic security groups are automatically provisioned.</p><p><strong>Auto-scaling default cluster: </strong>Stack ships with an auto-scaling group and basic lifecycle rules to automatically add new instances to the default cluster as they are needed.</p><p><strong>ECS configuration: </strong>in Stack, all services run atop ECS. Simply create a new service, and the auto-scaling default cluster will automatically pick it up. Each instance ships with Docker and the latest ecs-agent.</p><p><strong>CloudWatch logging &amp; metrics: </strong>Stack sends all container logs to CloudWatch. Because all requests between services go through ELBs, metrics around latency and status codes are automatically collected as well.</p><p><strong>Bastion: </strong>Stack also includes a bastion host for manual SSH access to your cluster. Besides the public services, it’s the only instance exposed to the outside world and acts as the “jump point” for manual access.</p><hr/><p>This basic setup uses the <code>stack</code> module as a unit, but Terraform can also reference the components of Stack individually.</p><pre data-language="text"><code># This terraform creates only a bastion node, passing in
# custom values from our pre-existing infrastructure.

module &quot;bastion&quot; {
  source          = &quot;github.com/segmentio/stack/bastion&quot;
  region          = &quot;us-west-2&quot;
  security_groups = &quot;sg-24feafedde&quot;
  vpc_id          = &quot;vpc-egf231094&quot;
  subnet_id       = &quot;subnet-34800af&quot;
  key_name        = &quot;bastion&quot;
  environment     = &quot;prod&quot;
}</code></pre><p>That means that you can reference <em>any</em> of the internal modules that the stack uses, while continuing to use your own custom networking and instance configuration.</p><p>Want to only create Stack services, but bring your own VPC? Just source the <strong>service</strong> module and pass in your existing VPC ID. Don’t need a bastion and want custom security groups? Source only the <strong>vpc</strong> and <strong>cluster </strong>modules to set up only the default networking.</p><p>You’re free to take the pieces you want and leave the rest.</p><p>If you’d like to dig into more about how this works in-depth, and each of the modules individually, check out the <a href="https://github.com/segmentio/stack#architecture">Architecture section</a> of the Readme.</p><p>Now, let’s walkthrough how to provision a new app and add our internal services.</p><h2 id="walkthrough">Walkthrough</h2><p><em>Note: this walkthrough assumes you have an AWS account and Terraform installed. If not, first get the pre-requisites from the </em><a href="https://github.com/segmentio/stack#requirements"><em>requirements section</em></a><em>.</em></p><p>For this tutorial, we’ll reference the pieces of the demo app we’ve built: <a href="https://github.com/segmentio/pingdummy">Pingdummy</a>, a web-based uptime monitoring system.</p><figure><img src="https://assets.contents.io/asset_xQFnIV1F.png"/></figure><p><em>All of the Docker images we use in this example are public, so you can try them yourself!</em></p><p>The Pingdummy infrastructure runs a few different services to demonstrate how services can be deployed and integrated using Stack.</p><ul><li><p>the <strong>pingdummy-frontend</strong> is the main webpage users hit to register and create healthchecks. It uses the <strong>web-service </strong>module to run as a service that is publicly accessible to the internet.</p></li><li><p>the <strong>pingdummy-beacon</strong> is an internal service which makes requests to other third-party services, and responds with their status. It uses the <strong>service</strong>module, and is not internet facing. (<em>though here it’s used for example purposes, this service could eventually be run in many regions for HA requests)</em></p></li><li><p>the <strong>pingdummy-worker </strong>is a worker which periodically sends requests to the pingdummy-beacon service. It uses the <strong>worker</strong> module as it only needs a service definition, not a load balancer.</p></li><li><p>an <strong>RDS </strong>instance used for persistence</p></li></ul><p>First, you’ll want to add a Terraform file to define all of the pieces of your infrastructure on AWS. Start by creating a <code>terraform.tf</code> file in your project directory.</p><p>Then, copy the basic stack setup to it:</p><pre data-language="text"><code>module &quot;stack&quot; {
  source      = &quot;github.com/segmentio/stack&quot; # the module source
  name        = &quot;pingdummy&quot; # the name for our project
  environment = &quot;prod&quot; # the environment we&#39;re running in
  key_name    = &quot;&lt;my-ssh-key&gt;&quot; # reference a key you&#39;ve previously created
}</code></pre><p>And then use the Terraform CLI to actually apply the infrastructure:</p><pre data-language="text"><code>$ terraform get    # fetch dependencies
$ terraform plan   # plan the changelog and see if it all looks good
$ terraform apply  # apply our changes to production</code></pre><p>This will create all the basic pieces of infrastructure we described in the first section.</p><p><em>Note: for managing Terraform’s remote state with more than a single user, we recommend </em><a href="https://www.terraform.io/docs/commands/remote-config.html"><em>configuring the remote state</em></a><em> to use </em><a href="https://www.hashicorp.com/terraform.html"><em>Terraform Enterprise</em></a><em> or S3. You can use our </em><a href="https://github.com/segmentio/pingdummy/blob/master/Makefile#L7-L16"><em>pingdummy repo’s Makefile</em></a><em> as an example.</em></p><p>Now we’ll add RDS as our persistence layer. We can pull the <strong>rds </strong>module from Stack, and then reference the outputs of the base networking and security groups we’ve already created. Terraform will automatically interpolate these and set up a dependency graph to re-create the resources if they change.</p><pre data-language="text"><code>module &quot;rds&quot; {
  source             = &quot;github.com/segmentio/stack/rds-cluster&quot; # rds module source
  name               = &quot;pingdummy&quot;
  database_name      = &quot;pingdummy&quot;
  master_username    = &quot;root&quot;
  master_password    = &quot;password&quot;

  # these options are automatically generated by the stack :)
  environment        = &quot;${module.stack.environment}&quot;
  vpc_id             = &quot;${module.stack.vpc_id}&quot;
  security_groups    = &quot;${module.stack.cluster_security_group_id}&quot;
  subnet_ids         = &quot;${module.stack.private_subnets}&quot;
  availability_zones = &quot;${module.stack.availability_zones}&quot;
}</code></pre><p>Again, we’ll need to run plan and apply again to create the new resources:</p><pre data-language="text"><code>$ terraform plan
$ terraform apply</code></pre><p>And presto! Our VPC now has an RDS cluster to use for persistence, managed by Terraform.</p><p>Now that we have our persistence and base layers setup, it’s time to add the services that run the Pingdummy app.</p><p>We can start with the internal <strong>beacon</strong> service for our health-checks. This service will listens on port <strong>3001</strong> and makes outbound HTTP requests to third-parties to check if a given URL is responding properly.</p><p>We’ll need to use the <strong>service</strong> module which creates an internal service that sits behind an ELB. That ELB will be automatically addressable at <strong>beacon.stack.local,</strong>and<strong> </strong>ECS will automatically add the service containers to the ELB once they pass the health check.</p><pre data-language="text"><code>module &quot;beacon&quot; {
  source         = &quot;github.com/segmentio/stack/service&quot;
  name           = &quot;beacon&quot;
  image          = &quot;segment/pingdummy-beacon&quot;
  port           = 3001
  container_port = 3001
  dns_name       = &quot;beacon&quot;

  # these variables are automatically provisioned by stack
  environment     = &quot;${module.stack.environment}&quot;
  cluster         = &quot;${module.stack.cluster}&quot;
  zone_id         = &quot;${module.stack.zone_id}&quot;
  iam_role        = &quot;${module.stack.iam_role}&quot;
  security_groups = &quot;${module.stack.internal_elb}&quot;
  subnet_ids      = &quot;${module.stack.internal_subnets}&quot;
  log_bucket      = &quot;${module.stack.log_bucket_id}&quot;
}</code></pre><p>Next, we’ll add the <strong>pingdummy-worker</strong> service. It is responsible for making requests to our internal beacon service.</p><pre data-language="text"><code>module &quot;worker&quot; {
  source      = &quot;github.com/segmentio/stack/worker&quot;
  environment = &quot;${module.stack.environment}&quot;
  name        = &quot;worker&quot;
  image       = &quot;segment/pingdummy-worker&quot;
  cluster     = &quot;${module.stack.cluster}&quot;
  # we can pass in custom configuration via ENV variables
  # or arguments to the cmd block
  env         = &lt;&lt;EOF
  [
    { &quot;name&quot;: &quot;BEACON_URL&quot;, &quot;value&quot;: &quot;${module.beacon.dns}&quot; }
  ]
  EOF
}</code></pre><p>As you can see, we’ve used the <strong>worker </strong>module since this program doesn’t need a load balancer or DNS name. We can also pass custom configuration to it via environment variables or command line flags. In this case, it’s passed the address of the beacon service.</p><p>Finally, we can add our <strong>pingdummy-frontend</strong> web app which will be Internet-accessible. This will use the <strong>web-service </strong>module so that the ELB can serve requests from the public subnet.</p><p>In order to make the frontend work, we need a few extra pieces of configuration beyond just what the base <strong>web-service </strong>module provides.</p><p>We’ll first need to add an SSL certificate that’s been uploaded to AWS. Sadly, there’s no terraform configuration for doing this (it requires a manual step), but you can <a href="http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/ssl-server-cert.html#upload-cert">find instructions in the AWS docs</a>.</p><p>From there, we can tell our module that we’d like it to be accessible on the <em>public </em>subnets and security groups and be externally facing. The <strong>stack</strong> module creates these all individually, so we can merely pass them in and we’ll be off to the races.</p><pre data-language="text"><code>module &quot;pingdummy&quot; {
  source             = &quot;github.com/segmentio/stack/web-service&quot;
  image              = &quot;segment/pingdummy&quot;  # a public image on docker hub
  version            = &quot;0.4&quot;
  port               = 3000
  ssl_certificate_id = &quot;&lt;your-ssl-cert&gt;&quot;  # you&#39;ll need to generate this

  # these options are automatically created by Stack, no work required :)
  environment     = &quot;${module.stack.environment}&quot;
  cluster         = &quot;${module.stack.cluster}&quot;
  domain          = &quot;${module.stack.domain_name}&quot;
  zone_id         = &quot;${module.stack.zone_id}&quot;
  iam_role        = &quot;${module.stack.iam_role}&quot;
  security_groups = &quot;${module.stack.external_elb}&quot;
  subnet_ids      = &quot;${module.stack.external_subnets}&quot;
  log_bucket      = &quot;${module.stack.log_bucket_id}&quot;
}</code></pre><p>Finally, run the plan and apply commands one more time:</p><pre data-language="text"><code>$ terraform plan
$ terraform apply</code></pre><p>And we’re done! Just like that, we have a multi-AZ microservice architecture running on vanilla AWS.</p><p>Looking in the AWS console, you should see logs streaming into CloudWatch from our brand new services. And whenever a request is made to the service, you should see HTTP metrics on each of the service ELBs.</p><p>To deploy new versions of these services, simply change the versions in the Terraform configuration, then re-apply. New task definitions will be created and the appropriate containers will be cycled with zero downtime.</p><p>There’s a few other pieces you’ll need to add, which you can see examples for in the main Pingdummy terraform file. Keep in mind that the example is a dummy app, and is <em>not</em> how we’d recommend doing things like security groups or configuration in production. We’ll have more on that in terraform to come :).</p><h2 id="one-more-thing">One More Thing…</h2><p>Additionally, we’re excited to open source a few other pieces that were involved in releasing the Stack:</p><p><a href="http://github.com/yields">Amir Abu Shareb</a> created <a href="https://github.com/segmentio/terraform-docs"><strong>terraform-docs</strong></a>, a command-line tool to automatically generate documentation for Terraform modules. You can think of it as the godoc of the Terraform world, automatically extracting inputs, outputs, and module usage in an easily consumable format.</p><figure><img src="https://assets.contents.io/asset_WRYbwmxA.png"/></figure><p>We use terraform-docs to build all of the <a href="https://github.com/segmentio/stack/blob/master/docs.md">module reference documentation</a> for Stack.</p><p><a href="https://github.com/achille-roussel">Achille Roussel</a> created <a href="https://github.com/segmentio/ecs-logs"><strong>ecs-logs</strong></a>, an agent for sending logs from journald to CloudWatch. It provides all the built-in logging for Stack, and makes sure to create a log group for each service and a single log stream per container.</p><figure><img src="https://assets.contents.io/asset_0GC3oX8d.png"/></figure><h2 id="go-forth-and-stack">Go Forth, and Stack</h2><p>It’s our hope that this post gave you a brief look at the raw power of what can be achieved with the AWS APIs these days. The ease of Terraform paired with the flexibility and scale of AWS is an extremely powerful combination.</p><p>Stack is a “first pass” of what combining these technologies can achieve. It’s by no means finished, and only provides the foundation for many of the ideas that we’ve put into production. Additionally, we’re trying some new experiments around log drivers and instances (<em>reflected by the 0.1 tag</em>) which we think will pay off in the future.</p><p>Nonetheless, we’ve open sourced Stack today as the first step to gather as much community wisdom around running infrastructure atop AWS.</p><p>In that vein, we’ll happily accept pull requests for new modules that fall within the spirit of the project. It’s our goal to provide the community with a good set of Terraform modules that provide sane defaults and simpler abstractions on top of the raw AWS infrastructure.</p><p>So go ahead and try out the Stack today, and please let us know what you think!</p><hr/><figure><img src="https://assets.contents.io/asset_Vb76balt.jpg"/></figure><p><em>Part of the Segment infrastructure team hacking on The Segment Stack: </em><a href="https://github.com/yields"><em>Amir Abu Shareb</em></a><em>, </em><a href="https://github.com/rbranson"><em>Rick Branson</em></a><em>, </em><a href="https://github.com/calvinfo"><em>Calvin French-Owen</em></a><em>, </em><a href="https://github.com/liquidy"><em>Kevin Lo</em></a><em>, and </em><a href="https://github.com/achille"><em>Achille Roussel</em></a><em>. Open sourced at a team-offsite in Amsterdam.</em></p></div><footer class="Article-footer"><a class="Link--muted" href="/blog"><svg class="icon-back-arrow" width="15px" height="12px" viewBox="0 0 15 12" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(0.000000, -10.000000)" fill="currentColor"><g id="Button-Normal"><polygon points="6 21.95 7.25373134 20.6962687 3.40298507 16.8455224 14.3283582 16.8455224 14.3283582 15.0544776 3.40298507 15.0544776 7.25373134 11.2037313 6 9.95 0 15.95"></polygon></g></g></g></svg>Back<!-- --> <span class="hide-on-mobile">to<!-- --> <!-- -->Segment Blog</span></a></footer></article></div></main><footer class="Footer"><div class="Footer-container"><div class="Footer-background-image-container"><div class="Footer-background-image"></div></div><div class="Footer-header"><div class="Footer-header-logo"><svg xmlns="http://www.w3.org/2000/svg" height="100%" viewBox="0 0 304.59 62.33"><defs><style>        .cls-1{          fill: #52be96;        }      </style></defs><title>2019_SegmentLogo_Horizontal</title><g id="Layer_2" data-name="Layer 2"><g id="Logos"><path class="cls-1" d="M.25,24.34a1.16,1.16,0,0,1-.13-.91A31.39,31.39,0,0,1,10.57,6.91,30.31,30.31,0,0,1,39.9,1.72a1.17,1.17,0,0,1,.67.62,1.2,1.2,0,0,1,0,.91l-1.5,4a1.14,1.14,0,0,1-1.45.7,23.82,23.82,0,0,0-23,4.11A24.77,24.77,0,0,0,6.5,25a1.16,1.16,0,0,1-1.12.87l-.26,0L1,24.88a1.15,1.15,0,0,1-.73-.54"></path><path class="cls-1" d="M60,34.28a1.16,1.16,0,0,0-.79-.44L55,33.4a1.16,1.16,0,0,0-1.26,1A24.58,24.58,0,0,1,46,49.3a23.83,23.83,0,0,1-24.79,4.76,1.14,1.14,0,0,0-1.48.65l-1.64,4a1.15,1.15,0,0,0,0,.91,1.11,1.11,0,0,0,.65.64,30,30,0,0,0,11.05,2.09,30.32,30.32,0,0,0,20.62-8.09,31.36,31.36,0,0,0,9.79-19.08,1.16,1.16,0,0,0-.24-.88"></path><path class="cls-1" d="M36.75,40.1V35.79a1.17,1.17,0,0,0-1.16-1.18H1.16A1.17,1.17,0,0,0,0,35.79V40.1a1.17,1.17,0,0,0,1.16,1.18H35.59a1.17,1.17,0,0,0,1.16-1.18"></path><path class="cls-1" d="M23.5,20.14v4.31a1.17,1.17,0,0,0,1.15,1.18H59.08a1.17,1.17,0,0,0,1.16-1.18V20.14A1.17,1.17,0,0,0,59.08,19H24.65a1.17,1.17,0,0,0-1.15,1.18"></path><path class="cls-1" d="M48.67,5.85a3.53,3.53,0,1,0,3.47,3.53,3.51,3.51,0,0,0-3.47-3.53"></path><path class="cls-1" d="M10.35,48.53a3.53,3.53,0,1,0,3.47,3.53,3.51,3.51,0,0,0-3.47-3.53"></path><path class="cls-1" d="M129.43,28.12H115.2a7,7,0,0,1,7.07-6.22c4.08,0,6.81,2.38,7.16,6.22m-7.22-12.3c-6.91,0-14.06,5.88-14.06,15.73a16.18,16.18,0,0,0,4.43,11.71,14.45,14.45,0,0,0,10.34,4.19A13.39,13.39,0,0,0,136,38.35a.92.92,0,0,0,0-.71.87.87,0,0,0-.53-.48l-4.06-1.43a.93.93,0,0,0-1.17.56,7.12,7.12,0,0,1-7.28,5.08A7.82,7.82,0,0,1,115,33.78h20.34a.92.92,0,0,0,.92-.84,14.65,14.65,0,0,0,.08-1.51c0-9.63-5.41-15.61-14.12-15.61"></path><path class="cls-1" d="M162.82,30.93c0,5.23-3.06,8.75-7.6,8.75-4.76,0-7.72-3.35-7.72-8.75s3-8.76,7.72-8.76c4.54,0,7.6,3.52,7.6,8.76m5.55-14.2h-4.79a1,1,0,0,0-.94.95v1.78c-1.79-2.15-4.62-3.27-8.25-3.27a13.19,13.19,0,0,0-9.95,4.31,15.47,15.47,0,0,0-3.78,10.43c0,8.5,5.77,14.68,13.73,14.68a10.51,10.51,0,0,0,8.19-3.51v2.33c0,6-2.6,8.87-8.19,8.87a7.08,7.08,0,0,1-7.2-6.25.94.94,0,0,0-1.14-.78l-4.68,1.1a1,1,0,0,0-.72,1.06c.93,6.47,6.58,11,13.74,11,5.15,0,9.07-1.59,11.65-4.73a16.19,16.19,0,0,0,3.26-10.43V17.68a1,1,0,0,0-.93-.95"></path><path class="cls-1" d="M208.27,15.82a10.83,10.83,0,0,0-9.54,4.89,9.57,9.57,0,0,0-8.63-4.89A10.77,10.77,0,0,0,182,19.33V17.62a1,1,0,0,0-.94-.95h-4.61a1,1,0,0,0-.93.95V46a1,1,0,0,0,.93.95h4.79a1,1,0,0,0,.94-.95V28.81c0-4.08,2.46-6.82,6.11-6.82,4.8,0,5.51,3.82,5.51,6.09V46a1,1,0,0,0,.94.95h4.85a1,1,0,0,0,.94-.95V28.75c0-4,2.49-6.76,6-6.76,4.8,0,5.51,3.82,5.51,6.09V46a1,1,0,0,0,.94.95h4.79a1,1,0,0,0,.94-.95V27.48c0-8-5.25-11.66-10.45-11.66"></path><path class="cls-1" d="M230.31,28.12a7,7,0,0,1,7.07-6.22c4.08,0,6.81,2.38,7.16,6.22Zm7-12.3c-6.91,0-14.06,5.88-14.06,15.73a16.14,16.14,0,0,0,4.43,11.71A14.45,14.45,0,0,0,238,47.45a13.39,13.39,0,0,0,13.09-9.1.92.92,0,0,0-.05-.71.87.87,0,0,0-.53-.48l-4.06-1.43a.94.94,0,0,0-1.17.56A7.13,7.13,0,0,1,238,41.37a7.82,7.82,0,0,1-7.93-7.59h20.34a.93.93,0,0,0,.92-.84,14.65,14.65,0,0,0,.08-1.51c0-9.63-5.41-15.61-14.12-15.61"></path><path class="cls-1" d="M271.76,15.82a10.41,10.41,0,0,0-8.26,3.78v-2a1,1,0,0,0-.93-.95h-4.73a1,1,0,0,0-.94.95V46a1,1,0,0,0,.94.95h4.84a1,1,0,0,0,.94-.95V29.54a8.78,8.78,0,0,1,1.56-5.31,5.56,5.56,0,0,1,4.55-2.12c4,0,6.11,2.28,6.11,6.76V46a1,1,0,0,0,.94.95h4.85a1,1,0,0,0,.93-.95V27.9a13.23,13.23,0,0,0-2.68-8.55,10.12,10.12,0,0,0-8.12-3.53"></path><path class="cls-1" d="M303.66,23a.94.94,0,0,0,.93-.95V17.69a1,1,0,0,0-.93-1H298.4V8.48a1,1,0,0,0-.94-1h-4.37a1,1,0,0,0-.94,1v4.34c0,3.41-2.41,3.91-3.84,3.91h-1.18a1,1,0,0,0-.94,1v4.38a1,1,0,0,0,.94.95h4.55V38.44c0,5.47,3.27,8.86,8.54,8.86a13,13,0,0,0,3.7-.48.94.94,0,0,0,.67-.91V41.8a1,1,0,0,0-.32-.72.93.93,0,0,0-.76-.21,12.82,12.82,0,0,1-1.68.14c-2.47,0-3.43-1-3.43-3.42V23Z"></path><path class="cls-1" d="M104.5,38.12c0-4.54-3.41-7.8-9.37-9l-5.34-1c-2.89-.55-3.5-2.07-3.5-3.25,0-1.78,1.92-3.62,5.12-3.62,4.59,0,6,2.64,6.41,4.21a.71.71,0,0,0,.38.44.91.91,0,0,0,.67,0l4.85-1.6a.64.64,0,0,0,.47-.78,10.23,10.23,0,0,0-3.37-4.89c-2.34-1.87-5.5-2.82-9.41-2.82-6.53,0-12.06,4.36-12.06,9.51,0,4.23,3.26,7.48,8.49,8.47l5.61,1.09c2.53.51,4,1.78,4,3.5S95.8,42,92.17,42c-3.9,0-6.61-1.79-7.24-4.79a.69.69,0,0,0-.37-.45.83.83,0,0,0-.41-.1.84.84,0,0,0-.27,0l-5,1.56a.67.67,0,0,0-.5.74c.68,3.12,4.35,8.41,13.7,8.41,8.06,0,12.4-4.81,12.4-9.33"></path></g></g></svg></div><div class="Footer-search-container"><a class="Footer-free-button" href="https://app.segment.com/signup?redirect=%2Fworkspaces">Try Segment free</a><a href="/contact/demo" class="Footer-specialist" title="Talk to a product specialist">Talk to a product specialist</a></div></div><div class="Footer-body"><div class="Footer-body-col"><h3 class="Footer-body-title">Product</h3><a class="Footer-body-links" href="/docs/sources/" title="Segment API">Segment API</a><a class="Footer-body-links" href="/catalog" title="Integrations Catalog">Integrations Catalog</a><a class="Footer-body-links" href="/warehouses" title="Warehouses">Warehouses</a><a class="Footer-body-links" href="/sources" title="Cloud App Sources">Cloud App Sources</a><a class="Footer-body-links" href="/personas" title="Personas">Personas</a><a class="Footer-body-links" href="/pricing" title="Pricing">Pricing</a></div><div class="Footer-body-col"><h3 class="Footer-body-title">For Developers</h3><a class="Footer-body-links" href="/docs" title="Docs">Docs</a><a class="Footer-body-links" href="/docs/sources/server/http/" title="API Reference">API Reference</a><a class="Footer-body-links" href="/blog/categories/engineering" title="Blog">Blog</a><a class="Footer-body-links" href="http://open.segment.com/" title="Open Source">Open Source</a><a class="Footer-body-links" href="/partners" title="Build an Integration">Build an Integration</a><a class="Footer-body-links" href="/engineering" title="Engineering Team">Engineering Team</a></div><div class="Footer-body-col"><h3 class="Footer-body-title">For Businesses</h3><a class="Footer-body-links" href="/customers" title="Customer stories">Customer stories</a><a class="Footer-body-links" href="/industry/retail" title="Retail">Retail</a><a class="Footer-body-links" href="/industry/marketplaces" title="Marketplace">Marketplace</a><a class="Footer-body-links" href="/industry/b2b-software" title="B2B Software">B2B Software</a><a class="Footer-body-links" href="/mobile" title="Mobile">Mobile</a></div><div class="Footer-body-col"><h3 class="Footer-body-title">Company</h3><a class="Footer-body-links" href="/jobs" title="Careers">Careers</a><a class="Footer-body-links" href="/blog" title="Blog">Blog</a><a class="Footer-body-links" href="/press" title="Press">Press</a></div><div class="Footer-body-col"><h3 class="Footer-body-title">Support</h3><a class="Footer-body-links" href="/help" title="Help Center">Help Center</a><a class="Footer-body-links" href="/contact" title="Contact">Contact</a><a class="Footer-body-links" href="/docs" title="Documentation">Documentation</a><a class="Footer-body-links" href="/partners" title="Partner Portal">Partner Portal</a></div></div><div class="Footer-footer"><div class="Footer-copy">©2019 Segment.io, Inc</div><div class="Footer-social-container"><a class="Footer-social" href="https://github.com/segmentio" title="Follow Segment on Github"><svg width="21" height="21" viewBox="0 0 21 21" xmlns="http://www.w3.org/2000/svg"><path d="M10.48.26C4.692.26 0 4.96 0 10.76c0 4.64 3.003 8.574 7.167 9.963.524.096.716-.228.716-.506 0-.25-.01-.91-.014-1.786-2.917.635-3.532-1.407-3.532-1.407-.476-1.213-1.163-1.536-1.163-1.536-.952-.65.072-.638.072-.638 1.05.073 1.605 1.08 1.605 1.08.935 1.606 2.453 1.142 3.05.874.095-.68.366-1.142.665-1.404-2.327-.265-4.773-1.166-4.773-5.19 0-1.146.408-2.083 1.078-2.817-.107-.266-.467-1.333.103-2.78 0 0 .88-.28 2.882 1.077.836-.232 1.732-.35 2.624-.353.89.004 1.787.12 2.624.353 2-1.358 2.88-1.076 2.88-1.076.57 1.446.21 2.513.104 2.78.67.733 1.077 1.67 1.077 2.816 0 4.034-2.45 4.922-4.785 5.182.376.324.71.965.71 1.944 0 1.404-.01 2.536-.01 2.88 0 .28.187.608.72.505 4.16-1.39 7.16-5.323 7.16-9.96 0-5.8-4.693-10.5-10.48-10.5z" fill-rule="nonzero" fill="#92A3B3"></path></svg></a><a class="Footer-social" href="http://twitter.com/segment" title="Follow Segment on Twitter"><svg width="22" height="21" viewBox="0 0 22 21" xmlns="http://www.w3.org/2000/svg"><path d="M11.16 0C5.372 0 .68 4.7.68 10.5S5.372 21 11.16 21s10.48-4.7 10.48-10.5S16.948 0 11.16 0zm4.167 8.36c.004.09.006.184.006.277 0 2.847-2.162 6.13-6.117 6.13-1.214 0-2.344-.357-3.296-.968.168.02.34.03.513.03 1.007 0 1.934-.346 2.67-.923-.94-.018-1.735-.64-2.008-1.496.13.026.266.04.404.04.195 0 .385-.027.566-.076-.984-.198-1.725-1.07-1.725-2.113v-.026c.29.162.623.26.975.27-.577-.387-.957-1.046-.957-1.793 0-.394.106-.764.292-1.082 1.06 1.303 2.644 2.16 4.43 2.25-.035-.157-.054-.322-.054-.49 0-1.19.962-2.155 2.15-2.155.618 0 1.177.262 1.57.68.49-.096.95-.275 1.364-.522-.16.504-.5.926-.945 1.193.435-.052.85-.168 1.235-.34-.288.433-.653.812-1.073 1.116z" fill-rule="nonzero" fill="#92A3B3"></path></svg></a><a class="Footer-social" href="https://www.linkedin.com/company/segment-io/" title="Find Segment on Linked In"><svg width="22" height="21" viewBox="0 0 22 21" xmlns="http://www.w3.org/2000/svg"><path d="M10.84 0C5.052 0 .36 4.7.36 10.5S5.052 21 10.84 21s10.48-4.7 10.48-10.5S16.628 0 10.84 0zM7.946 15.74H5.772v-7h2.174v7zM6.86 7.783c-.698 0-1.26-.565-1.26-1.262 0-.695.562-1.26 1.26-1.26.695 0 1.26.565 1.26 1.26 0 .698-.565 1.263-1.26 1.263zm9.22 7.957h-2.172v-3.404c0-.812-.013-1.856-1.128-1.856-1.13 0-1.302.885-1.302 1.798v3.462h-2.17v-7h2.082v.957h.03c.29-.55.998-1.13 2.055-1.13 2.2 0 2.605 1.45 2.605 3.334v3.84z" fill-rule="nonzero" fill="#92A3B3"></path></svg></a><a class="Footer-social" href="https://www.facebook.com/segmentio/" title="Like Segment on Facebook"><svg width="21" height="21" viewBox="0 0 21 21" xmlns="http://www.w3.org/2000/svg"><path d="M10.52 0C4.732 0 .04 4.7.04 10.5S4.732 21 10.52 21 21 16.3 21 10.5 16.308 0 10.52 0zm2.72 6.993h-.985c-.774 0-.924.37-.924.91v1.19h1.846l-.24 1.867H11.33v4.79H9.408v-4.79H7.8V9.094h1.607V7.717c0-1.597.974-2.467 2.397-2.467.68 0 1.267.05 1.437.074v1.67z" fill-rule="nonzero" fill="#92A3B3"></path></svg></a></div><div class="Footer-privacy-terms"><a href="/docs/legal/privacy/" class="privacy" title="Privacy">Privacy</a><a href="/docs/legal/terms/" class="terms" title="Terms">Terms</a><a href="#" class="terms">Website Data Collection Preferences</a></div></div></div></footer></div><script>__NEXT_DATA__ = {"props":{"pageProps":{"id":"the-segment-aws-stack","post":{"id":"item_vtLwNkwh","object":"entry","slug":"the-segment-aws-stack","slugs":["the-segment-aws-stack"],"index":null,"created_at":"2017-03-21T00:02:52.689Z","previewed_at":null,"published_at":"2016-06-15T00:00:00.000Z","last_published_at":"2016-06-15T00:00:00.000Z","archived_at":null,"properties":{"category":"engineering","social_title":null,"social_description":null,"title":"The Segment AWS Stack","social_image":null,"body":"\u003cp\u003eAWS is the default for running production infrastructure. It’s cheap, scalable, and flexible to whatever configuration you’d like to run on top of it. But that flexibility comes with a cost: it makes AWS \u003cem\u003eendlessly\u003c/em\u003e configurable.\u003c/p\u003e\u003cp\u003eYou can build whatever you want on top of AWS, but that means \u003ca href=\"https://segment.com/blog/rebuilding-our-infrastructure/\"\u003eit’s difficult to know whether you’re taking the right approach\u003c/a\u003e. Pretty much every startup we talk with has the same question: \u003cem\u003e“\u003c/em\u003e\u003ca href=\"https://twitter.com/hueypetersen/status/730177176708911104\"\u003e\u003cem\u003eWhat’s the right\u003c/em\u003e\u003c/a\u003e\u003cem\u003e \u003c/em\u003e\u003ca href=\"https://twitter.com/n1alloc/status/723479989761507329\"\u003e\u003cem\u003eway to setup our infrastructure\u003c/em\u003e\u003c/a\u003e\u003ca href=\"https://twitter.com/astrostl/status/714162717825761280\"\u003e\u003cem\u003e?\u003c/em\u003e\u003c/a\u003e\u003cem\u003e”\u003c/em\u003e\u003c/p\u003e\u003cp\u003eTo help solve that problem, we’re excited to open source the \u003ca href=\"https://github.com/segmentio/stack\"\u003eSegment AWS Stack\u003c/a\u003e. It’s our first pass at building a collection of \u003ca href=\"https://www.terraform.io/\"\u003eTerraform\u003c/a\u003e modules for creating production-ready architecture on AWS. It’s largely based on the service architecture we use internally to \u003ca href=\"https://segment.com/blog/scaling-nsq/\"\u003eprocess billions of messages every month\u003c/a\u003e, but built solely on AWS.\u003c/p\u003e\u003cp\u003eThe steps are incredibly simple. Add 5 lines of Terraform, run \u003cstrong\u003eterraform apply\u003c/strong\u003e, and you’ll have your base infrastructure up and running in just \u003cem\u003ethree minutes\u003c/em\u003e.\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eIt’s like a mini-Heroku that you host yourself. No magic, just AWS.\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://assets.contents.io/asset_OHyeIutv.png\"/\u003e\u003c/figure\u003e\u003ch2 id=\"batteries-included\"\u003eBatteries Included\u003c/h2\u003e\u003cp\u003eOur major goals with Stack are:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cp\u003eto provide a good set of defaults for production infrastructure\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003emake the AWS setup process incredibly simple\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003eallow users to easily customize the core abstractions and run their own infrastructure\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eTo achieve those goals, Stack is built with Hashicorp’s Terraform.\u003c/p\u003e\u003cp\u003eTerraform provides a means of configuring infrastructure as code. You write code that represents things like EC2 instances, S3 buckets, and more–and then use Terraform to create them.\u003c/p\u003e\u003cp\u003eTerraform manages the state of your infrastructure internally by building a dependency graph of which resources depend on one another:\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://assets.contents.io/asset_3CE28AQv.png\"/\u003e\u003c/figure\u003e\u003cp\u003eand then applies only the “diff” of changes to your production environment. Terraform makes changing your infrastructure incredibly seamless because it already knows which resources have to be re-created and which can remain untouched.\u003c/p\u003e\u003cp\u003eTerraform provides easy-to-use, high level abstractions for provisioning cloud infrastructure, but also exposes the low-level AWS resources for custom configuration. This low-level access provides a marvelous “escape hatch” for truly custom needs.\u003c/p\u003e\u003cp\u003eTo give you a flavor of what the setup process looks like, run \u003ccode\u003eterraform apply\u003c/code\u003eagainst this basic configuration:\u003c/p\u003e\u003cpre data-language=\"text\"\u003e\u003ccode\u003emodule \u0026quot;stack\u0026quot; {\n  source      = \u0026quot;github.com/segmentio/stack\u0026quot;\n  environment = \u0026quot;prod\u0026quot;\n  key_name    = \u0026quot;my-key-name\u0026quot;\n  name        = \u0026quot;my-app\u0026quot;\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIt will automatically create all of the following:\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eNetworking: \u003c/strong\u003eStack includes a new VPC, with public and private subnets. All routing tables, Internet Gateways, NAT Gateways, and basic security groups are automatically provisioned.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eAuto-scaling default cluster: \u003c/strong\u003eStack ships with an auto-scaling group and basic lifecycle rules to automatically add new instances to the default cluster as they are needed.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eECS configuration: \u003c/strong\u003ein Stack, all services run atop ECS. Simply create a new service, and the auto-scaling default cluster will automatically pick it up. Each instance ships with Docker and the latest ecs-agent.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eCloudWatch logging \u0026amp; metrics: \u003c/strong\u003eStack sends all container logs to CloudWatch. Because all requests between services go through ELBs, metrics around latency and status codes are automatically collected as well.\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eBastion: \u003c/strong\u003eStack also includes a bastion host for manual SSH access to your cluster. Besides the public services, it’s the only instance exposed to the outside world and acts as the “jump point” for manual access.\u003c/p\u003e\u003chr/\u003e\u003cp\u003eThis basic setup uses the \u003ccode\u003estack\u003c/code\u003e module as a unit, but Terraform can also reference the components of Stack individually.\u003c/p\u003e\u003cpre data-language=\"text\"\u003e\u003ccode\u003e# This terraform creates only a bastion node, passing in\n# custom values from our pre-existing infrastructure.\n\nmodule \u0026quot;bastion\u0026quot; {\n  source          = \u0026quot;github.com/segmentio/stack/bastion\u0026quot;\n  region          = \u0026quot;us-west-2\u0026quot;\n  security_groups = \u0026quot;sg-24feafedde\u0026quot;\n  vpc_id          = \u0026quot;vpc-egf231094\u0026quot;\n  subnet_id       = \u0026quot;subnet-34800af\u0026quot;\n  key_name        = \u0026quot;bastion\u0026quot;\n  environment     = \u0026quot;prod\u0026quot;\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThat means that you can reference \u003cem\u003eany\u003c/em\u003e of the internal modules that the stack uses, while continuing to use your own custom networking and instance configuration.\u003c/p\u003e\u003cp\u003eWant to only create Stack services, but bring your own VPC? Just source the \u003cstrong\u003eservice\u003c/strong\u003e module and pass in your existing VPC ID. Don’t need a bastion and want custom security groups? Source only the \u003cstrong\u003evpc\u003c/strong\u003e and \u003cstrong\u003ecluster \u003c/strong\u003emodules to set up only the default networking.\u003c/p\u003e\u003cp\u003eYou’re free to take the pieces you want and leave the rest.\u003c/p\u003e\u003cp\u003eIf you’d like to dig into more about how this works in-depth, and each of the modules individually, check out the \u003ca href=\"https://github.com/segmentio/stack#architecture\"\u003eArchitecture section\u003c/a\u003e of the Readme.\u003c/p\u003e\u003cp\u003eNow, let’s walkthrough how to provision a new app and add our internal services.\u003c/p\u003e\u003ch2 id=\"walkthrough\"\u003eWalkthrough\u003c/h2\u003e\u003cp\u003e\u003cem\u003eNote: this walkthrough assumes you have an AWS account and Terraform installed. If not, first get the pre-requisites from the \u003c/em\u003e\u003ca href=\"https://github.com/segmentio/stack#requirements\"\u003e\u003cem\u003erequirements section\u003c/em\u003e\u003c/a\u003e\u003cem\u003e.\u003c/em\u003e\u003c/p\u003e\u003cp\u003eFor this tutorial, we’ll reference the pieces of the demo app we’ve built: \u003ca href=\"https://github.com/segmentio/pingdummy\"\u003ePingdummy\u003c/a\u003e, a web-based uptime monitoring system.\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://assets.contents.io/asset_xQFnIV1F.png\"/\u003e\u003c/figure\u003e\u003cp\u003e\u003cem\u003eAll of the Docker images we use in this example are public, so you can try them yourself!\u003c/em\u003e\u003c/p\u003e\u003cp\u003eThe Pingdummy infrastructure runs a few different services to demonstrate how services can be deployed and integrated using Stack.\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cp\u003ethe \u003cstrong\u003epingdummy-frontend\u003c/strong\u003e is the main webpage users hit to register and create healthchecks. It uses the \u003cstrong\u003eweb-service \u003c/strong\u003emodule to run as a service that is publicly accessible to the internet.\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003ethe \u003cstrong\u003epingdummy-beacon\u003c/strong\u003e is an internal service which makes requests to other third-party services, and responds with their status. It uses the \u003cstrong\u003eservice\u003c/strong\u003emodule, and is not internet facing. (\u003cem\u003ethough here it’s used for example purposes, this service could eventually be run in many regions for HA requests)\u003c/em\u003e\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003ethe \u003cstrong\u003epingdummy-worker \u003c/strong\u003eis a worker which periodically sends requests to the pingdummy-beacon service. It uses the \u003cstrong\u003eworker\u003c/strong\u003e module as it only needs a service definition, not a load balancer.\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003ean \u003cstrong\u003eRDS \u003c/strong\u003einstance used for persistence\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eFirst, you’ll want to add a Terraform file to define all of the pieces of your infrastructure on AWS. Start by creating a \u003ccode\u003eterraform.tf\u003c/code\u003e file in your project directory.\u003c/p\u003e\u003cp\u003eThen, copy the basic stack setup to it:\u003c/p\u003e\u003cpre data-language=\"text\"\u003e\u003ccode\u003emodule \u0026quot;stack\u0026quot; {\n  source      = \u0026quot;github.com/segmentio/stack\u0026quot; # the module source\n  name        = \u0026quot;pingdummy\u0026quot; # the name for our project\n  environment = \u0026quot;prod\u0026quot; # the environment we\u0026#39;re running in\n  key_name    = \u0026quot;\u0026lt;my-ssh-key\u0026gt;\u0026quot; # reference a key you\u0026#39;ve previously created\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd then use the Terraform CLI to actually apply the infrastructure:\u003c/p\u003e\u003cpre data-language=\"text\"\u003e\u003ccode\u003e$ terraform get    # fetch dependencies\n$ terraform plan   # plan the changelog and see if it all looks good\n$ terraform apply  # apply our changes to production\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis will create all the basic pieces of infrastructure we described in the first section.\u003c/p\u003e\u003cp\u003e\u003cem\u003eNote: for managing Terraform’s remote state with more than a single user, we recommend \u003c/em\u003e\u003ca href=\"https://www.terraform.io/docs/commands/remote-config.html\"\u003e\u003cem\u003econfiguring the remote state\u003c/em\u003e\u003c/a\u003e\u003cem\u003e to use \u003c/em\u003e\u003ca href=\"https://www.hashicorp.com/terraform.html\"\u003e\u003cem\u003eTerraform Enterprise\u003c/em\u003e\u003c/a\u003e\u003cem\u003e or S3. You can use our \u003c/em\u003e\u003ca href=\"https://github.com/segmentio/pingdummy/blob/master/Makefile#L7-L16\"\u003e\u003cem\u003epingdummy repo’s Makefile\u003c/em\u003e\u003c/a\u003e\u003cem\u003e as an example.\u003c/em\u003e\u003c/p\u003e\u003cp\u003eNow we’ll add RDS as our persistence layer. We can pull the \u003cstrong\u003erds \u003c/strong\u003emodule from Stack, and then reference the outputs of the base networking and security groups we’ve already created. Terraform will automatically interpolate these and set up a dependency graph to re-create the resources if they change.\u003c/p\u003e\u003cpre data-language=\"text\"\u003e\u003ccode\u003emodule \u0026quot;rds\u0026quot; {\n  source             = \u0026quot;github.com/segmentio/stack/rds-cluster\u0026quot; # rds module source\n  name               = \u0026quot;pingdummy\u0026quot;\n  database_name      = \u0026quot;pingdummy\u0026quot;\n  master_username    = \u0026quot;root\u0026quot;\n  master_password    = \u0026quot;password\u0026quot;\n\n  # these options are automatically generated by the stack :)\n  environment        = \u0026quot;${module.stack.environment}\u0026quot;\n  vpc_id             = \u0026quot;${module.stack.vpc_id}\u0026quot;\n  security_groups    = \u0026quot;${module.stack.cluster_security_group_id}\u0026quot;\n  subnet_ids         = \u0026quot;${module.stack.private_subnets}\u0026quot;\n  availability_zones = \u0026quot;${module.stack.availability_zones}\u0026quot;\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAgain, we’ll need to run plan and apply again to create the new resources:\u003c/p\u003e\u003cpre data-language=\"text\"\u003e\u003ccode\u003e$ terraform plan\n$ terraform apply\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd presto! Our VPC now has an RDS cluster to use for persistence, managed by Terraform.\u003c/p\u003e\u003cp\u003eNow that we have our persistence and base layers setup, it’s time to add the services that run the Pingdummy app.\u003c/p\u003e\u003cp\u003eWe can start with the internal \u003cstrong\u003ebeacon\u003c/strong\u003e service for our health-checks. This service will listens on port \u003cstrong\u003e3001\u003c/strong\u003e and makes outbound HTTP requests to third-parties to check if a given URL is responding properly.\u003c/p\u003e\u003cp\u003eWe’ll need to use the \u003cstrong\u003eservice\u003c/strong\u003e module which creates an internal service that sits behind an ELB. That ELB will be automatically addressable at \u003cstrong\u003ebeacon.stack.local,\u003c/strong\u003eand\u003cstrong\u003e \u003c/strong\u003eECS will automatically add the service containers to the ELB once they pass the health check.\u003c/p\u003e\u003cpre data-language=\"text\"\u003e\u003ccode\u003emodule \u0026quot;beacon\u0026quot; {\n  source         = \u0026quot;github.com/segmentio/stack/service\u0026quot;\n  name           = \u0026quot;beacon\u0026quot;\n  image          = \u0026quot;segment/pingdummy-beacon\u0026quot;\n  port           = 3001\n  container_port = 3001\n  dns_name       = \u0026quot;beacon\u0026quot;\n\n  # these variables are automatically provisioned by stack\n  environment     = \u0026quot;${module.stack.environment}\u0026quot;\n  cluster         = \u0026quot;${module.stack.cluster}\u0026quot;\n  zone_id         = \u0026quot;${module.stack.zone_id}\u0026quot;\n  iam_role        = \u0026quot;${module.stack.iam_role}\u0026quot;\n  security_groups = \u0026quot;${module.stack.internal_elb}\u0026quot;\n  subnet_ids      = \u0026quot;${module.stack.internal_subnets}\u0026quot;\n  log_bucket      = \u0026quot;${module.stack.log_bucket_id}\u0026quot;\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNext, we’ll add the \u003cstrong\u003epingdummy-worker\u003c/strong\u003e service. It is responsible for making requests to our internal beacon service.\u003c/p\u003e\u003cpre data-language=\"text\"\u003e\u003ccode\u003emodule \u0026quot;worker\u0026quot; {\n  source      = \u0026quot;github.com/segmentio/stack/worker\u0026quot;\n  environment = \u0026quot;${module.stack.environment}\u0026quot;\n  name        = \u0026quot;worker\u0026quot;\n  image       = \u0026quot;segment/pingdummy-worker\u0026quot;\n  cluster     = \u0026quot;${module.stack.cluster}\u0026quot;\n  # we can pass in custom configuration via ENV variables\n  # or arguments to the cmd block\n  env         = \u0026lt;\u0026lt;EOF\n  [\n    { \u0026quot;name\u0026quot;: \u0026quot;BEACON_URL\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;${module.beacon.dns}\u0026quot; }\n  ]\n  EOF\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAs you can see, we’ve used the \u003cstrong\u003eworker \u003c/strong\u003emodule since this program doesn’t need a load balancer or DNS name. We can also pass custom configuration to it via environment variables or command line flags. In this case, it’s passed the address of the beacon service.\u003c/p\u003e\u003cp\u003eFinally, we can add our \u003cstrong\u003epingdummy-frontend\u003c/strong\u003e web app which will be Internet-accessible. This will use the \u003cstrong\u003eweb-service \u003c/strong\u003emodule so that the ELB can serve requests from the public subnet.\u003c/p\u003e\u003cp\u003eIn order to make the frontend work, we need a few extra pieces of configuration beyond just what the base \u003cstrong\u003eweb-service \u003c/strong\u003emodule provides.\u003c/p\u003e\u003cp\u003eWe’ll first need to add an SSL certificate that’s been uploaded to AWS. Sadly, there’s no terraform configuration for doing this (it requires a manual step), but you can \u003ca href=\"http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/ssl-server-cert.html#upload-cert\"\u003efind instructions in the AWS docs\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eFrom there, we can tell our module that we’d like it to be accessible on the \u003cem\u003epublic \u003c/em\u003esubnets and security groups and be externally facing. The \u003cstrong\u003estack\u003c/strong\u003e module creates these all individually, so we can merely pass them in and we’ll be off to the races.\u003c/p\u003e\u003cpre data-language=\"text\"\u003e\u003ccode\u003emodule \u0026quot;pingdummy\u0026quot; {\n  source             = \u0026quot;github.com/segmentio/stack/web-service\u0026quot;\n  image              = \u0026quot;segment/pingdummy\u0026quot;  # a public image on docker hub\n  version            = \u0026quot;0.4\u0026quot;\n  port               = 3000\n  ssl_certificate_id = \u0026quot;\u0026lt;your-ssl-cert\u0026gt;\u0026quot;  # you\u0026#39;ll need to generate this\n\n  # these options are automatically created by Stack, no work required :)\n  environment     = \u0026quot;${module.stack.environment}\u0026quot;\n  cluster         = \u0026quot;${module.stack.cluster}\u0026quot;\n  domain          = \u0026quot;${module.stack.domain_name}\u0026quot;\n  zone_id         = \u0026quot;${module.stack.zone_id}\u0026quot;\n  iam_role        = \u0026quot;${module.stack.iam_role}\u0026quot;\n  security_groups = \u0026quot;${module.stack.external_elb}\u0026quot;\n  subnet_ids      = \u0026quot;${module.stack.external_subnets}\u0026quot;\n  log_bucket      = \u0026quot;${module.stack.log_bucket_id}\u0026quot;\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFinally, run the plan and apply commands one more time:\u003c/p\u003e\u003cpre data-language=\"text\"\u003e\u003ccode\u003e$ terraform plan\n$ terraform apply\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd we’re done! Just like that, we have a multi-AZ microservice architecture running on vanilla AWS.\u003c/p\u003e\u003cp\u003eLooking in the AWS console, you should see logs streaming into CloudWatch from our brand new services. And whenever a request is made to the service, you should see HTTP metrics on each of the service ELBs.\u003c/p\u003e\u003cp\u003eTo deploy new versions of these services, simply change the versions in the Terraform configuration, then re-apply. New task definitions will be created and the appropriate containers will be cycled with zero downtime.\u003c/p\u003e\u003cp\u003eThere’s a few other pieces you’ll need to add, which you can see examples for in the main Pingdummy terraform file. Keep in mind that the example is a dummy app, and is \u003cem\u003enot\u003c/em\u003e how we’d recommend doing things like security groups or configuration in production. We’ll have more on that in terraform to come :).\u003c/p\u003e\u003ch2 id=\"one-more-thing\"\u003eOne More Thing…\u003c/h2\u003e\u003cp\u003eAdditionally, we’re excited to open source a few other pieces that were involved in releasing the Stack:\u003c/p\u003e\u003cp\u003e\u003ca href=\"http://github.com/yields\"\u003eAmir Abu Shareb\u003c/a\u003e created \u003ca href=\"https://github.com/segmentio/terraform-docs\"\u003e\u003cstrong\u003eterraform-docs\u003c/strong\u003e\u003c/a\u003e, a command-line tool to automatically generate documentation for Terraform modules. You can think of it as the godoc of the Terraform world, automatically extracting inputs, outputs, and module usage in an easily consumable format.\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://assets.contents.io/asset_WRYbwmxA.png\"/\u003e\u003c/figure\u003e\u003cp\u003eWe use terraform-docs to build all of the \u003ca href=\"https://github.com/segmentio/stack/blob/master/docs.md\"\u003emodule reference documentation\u003c/a\u003e for Stack.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://github.com/achille-roussel\"\u003eAchille Roussel\u003c/a\u003e created \u003ca href=\"https://github.com/segmentio/ecs-logs\"\u003e\u003cstrong\u003eecs-logs\u003c/strong\u003e\u003c/a\u003e, an agent for sending logs from journald to CloudWatch. It provides all the built-in logging for Stack, and makes sure to create a log group for each service and a single log stream per container.\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://assets.contents.io/asset_0GC3oX8d.png\"/\u003e\u003c/figure\u003e\u003ch2 id=\"go-forth-and-stack\"\u003eGo Forth, and Stack\u003c/h2\u003e\u003cp\u003eIt’s our hope that this post gave you a brief look at the raw power of what can be achieved with the AWS APIs these days. The ease of Terraform paired with the flexibility and scale of AWS is an extremely powerful combination.\u003c/p\u003e\u003cp\u003eStack is a “first pass” of what combining these technologies can achieve. It’s by no means finished, and only provides the foundation for many of the ideas that we’ve put into production. Additionally, we’re trying some new experiments around log drivers and instances (\u003cem\u003ereflected by the 0.1 tag\u003c/em\u003e) which we think will pay off in the future.\u003c/p\u003e\u003cp\u003eNonetheless, we’ve open sourced Stack today as the first step to gather as much community wisdom around running infrastructure atop AWS.\u003c/p\u003e\u003cp\u003eIn that vein, we’ll happily accept pull requests for new modules that fall within the spirit of the project. It’s our goal to provide the community with a good set of Terraform modules that provide sane defaults and simpler abstractions on top of the raw AWS infrastructure.\u003c/p\u003e\u003cp\u003eSo go ahead and try out the Stack today, and please let us know what you think!\u003c/p\u003e\u003chr/\u003e\u003cfigure\u003e\u003cimg src=\"https://assets.contents.io/asset_Vb76balt.jpg\"/\u003e\u003c/figure\u003e\u003cp\u003e\u003cem\u003ePart of the Segment infrastructure team hacking on The Segment Stack: \u003c/em\u003e\u003ca href=\"https://github.com/yields\"\u003e\u003cem\u003eAmir Abu Shareb\u003c/em\u003e\u003c/a\u003e\u003cem\u003e, \u003c/em\u003e\u003ca href=\"https://github.com/rbranson\"\u003e\u003cem\u003eRick Branson\u003c/em\u003e\u003c/a\u003e\u003cem\u003e, \u003c/em\u003e\u003ca href=\"https://github.com/calvinfo\"\u003e\u003cem\u003eCalvin French-Owen\u003c/em\u003e\u003c/a\u003e\u003cem\u003e, \u003c/em\u003e\u003ca href=\"https://github.com/liquidy\"\u003e\u003cem\u003eKevin Lo\u003c/em\u003e\u003c/a\u003e\u003cem\u003e, and \u003c/em\u003e\u003ca href=\"https://github.com/achille\"\u003e\u003cem\u003eAchille Roussel\u003c/em\u003e\u003c/a\u003e\u003cem\u003e. Open sourced at a team-offsite in Amsterdam.\u003c/em\u003e\u003c/p\u003e","authors":[{"name":"Calvin French-Owen","hireDate":"2011-05-02","department":"Eng Product","linkedInUrl":null,"twitter":"calvinfo","twitterUrl":"https://twitter.com/calvinfo","facebook":null,"facebookUrl":null,"photoUrl":"https://c19f7be2e84987e7904e-bf41efcb49679c193a4ec0f3210da86f.ssl.cf1.rackcdn.com/photos/40528-2-1.jpg","slug":"calvin-french-owen","id":"Calvin French-Owen"}]},"collection":{"id":"collection_gZXcc6Fm"},"parent":null}}},"page":"/blogPost","query":{"id":"the-segment-aws-stack"},"buildId":"b0Sj8HXC8ORlpVvY2J0Ps","assetPrefix":"/blog","runtimeConfig":{"APP_ENV":"production","LIMIT":10}};__NEXT_LOADED_PAGES__=[];__NEXT_REGISTER_PAGE=function(r,f){__NEXT_LOADED_PAGES__.push([r, f])}</script><script async="" id="__NEXT_PAGE__/blogPost" src="/blog/_next/static/b0Sj8HXC8ORlpVvY2J0Ps/pages/blogPost.js"></script><script async="" id="__NEXT_PAGE__/_app" src="/blog/_next/static/b0Sj8HXC8ORlpVvY2J0Ps/pages/_app.js"></script><script async="" id="__NEXT_PAGE__/_error" src="/blog/_next/static/b0Sj8HXC8ORlpVvY2J0Ps/pages/_error.js"></script><script src="/blog/_next/static/runtime/webpack-2ef50c24cc8d478adafc.js" async=""></script><script src="/blog/_next/static/chunks/commons.77b0e0944d31749d5e2e.js" async=""></script><script src="/blog/_next/static/runtime/main-21d35a579d6d91929353.js" async=""></script></body></html>