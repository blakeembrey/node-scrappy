{"item":{"body":"<!DOCTYPE HTML>

<!--[if lt IE 7 ]> <html xmlns:fb="http://www.facebook.com/2008/fbml" class="ie6 ie ltie9 ltie8 no-js" lang="en"> <![endif]-->
<!--[if IE 7 ]>    <html xmlns:fb="http://www.facebook.com/2008/fbml" class="ie7 ie ltie9 ltie8 no-js" lang="en"> <![endif]-->
<!--[if IE 8 ]>    <html xmlns:fb="http://www.facebook.com/2008/fbml" class="ie8 ie ltie9 no-js" lang="en"> <![endif]-->
<!--[if IE 9 ]>    <html xmlns:fb="http://www.facebook.com/2008/fbml" class="ie9 ie no-js" lang="en"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--> <html xmlns:fb="http://www.facebook.com/2008/fbml" class="no-js" lang="en"> <!--<![endif]-->
    <head>


    <script>            window.yPageStart = new Date().getTime();
</script>

    <script>            var initialVisibilityState = document.webkitVisibilityState;

                yPerfTimings = [];

                ySitRepParams = {"site": "main", "uniqueRequestID": "f013a60e1f47b5ba", "isLoggedIn": false, "clientIP": "66.75.244.18", "servlet": "biz_details", "zipkinTraceID": "90c6e5f92bbc1940", "datacenter": "us-west-1", "cfRayID": "30c56ba70c4c53ae-LAX", "serverStartTime": 1480919123052, "cfEdgeStartTime": "1480919123040000000", "action": "default", "yuv_record": "Ary0QhM8J19BLm6lrfXQiBnhvcmbs7rEFj-n3AxuNTM9ev7aFAuQgYrd_5nf548EL0pnVZXIuzN9O8p6E9DCSsBxJfysXZBa"};
                window.ySitRepParams['initialVisibilityState'] = initialVisibilityState;
                window.ySitRepParams['seoCohorts'] = [["i18n_search_title_experiment_all_markets", "02_best"], ["i18n.no_visible_reviews.photos", "new_design_0"], ["i18n.no_visible_reviews.reviews", "status_quo_1"], ["traffic_biz_details_title_v6_container", "in_container"], ["meta_page_linking_seo_experiment", "meta_linking_new_link_schema_second_batch"], ["traffic_alt_cat_header", "02_h1_fixed"], ["biz_details_biz_keywords_density_seo_experiment", "03_enabled"], ["traffic_search_menu_experiment", null], ["i18n_search_title_experiment_de", "08_top_10"], ["category_titles_v1", "04_specific"], ["traffic_biz_details_title_hold_out", null], ["biz_site_self_serve_cpc_re_v2", "00_status_quo"], ["traffic_search_rich_card_experiment", "status_quo_01"], ["category_page_canonical_url_removal", "enabled"], ["traffic_category_renaming_experiment", "00_status_quo"], ["traffic_biz_details_title_v6_transactions_v3", "conditions_1"], ["traffic_unreviewed_bizs_experiment", "02_new_design"], ["biz_site_yes_it_works_rollout", "yiw_impression_and_clicks_enabled"], ["traffic_hierarchy_breadcrumbs", "01_enabled"], ["biz_details_title_seo_experiment_v5", "08_verboser"], ["traffic_price_range", "06_string"], ["traffic_review_wall_experiment", "00_status_quo"]];

                    var start = new Date().getTime();
                    yPerfTimings.push(["head:start", start]);

            (function(H){H.className=H.className.replace(/\bno-js\b/,'js');})(document.documentElement);
</script>

                <script>
            (function() {
                var main = null;

                var main=function(){(function(d,e,j,h,f,c,b){d.GoogleAnalyticsObject=f;d[f]=d[f]||function(){(d[f].q=d[f].q||[]).push(arguments)},d[f].l=1*new Date();c=e.createElement(j),b=e.getElementsByTagName(j)[0];c.async=1;c.src=h;b.parentNode.insertBefore(c,b)})(window,document,"script","//www.google-analytics.com/analytics.js","ga")};

                if (main === null) {
                    throw 'invalid inline script, missing main declaration.';
                }
                main();
            })();
    </script>
    


            <script>        (function (d, w) {
            if (('ontouchstart' in w) || w.DocumentTouch && d instanceof w.DocumentTouch){
                var html = d.getElementsByTagName("html")[0];
                html.classList.add("touch");
            }
        }(document, window));
</script>


                <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta http-equiv="Content-Language" content="en" />


                <meta name="description" content="924 reviews of Boba Guys &#34;This is one of the most popular boba spots in the Bay Area. I was pleased with the quality of my drink, but I don&#39;t think it&#39;s something I&#39;d go out of my way for. For the price point and wait time, it was a great…"/>


                <meta name="keywords" content="Yelp,recommendation,San Francisco, bay area, local,business,review,friend,restaurant,dentist,doctor,salon,spa,shopping,store,share,community,massage,sushi,pizza,nails,New York,Los Angeles">


                    <meta name="viewport" content="width=1020">

            
    <meta name="application-name" content="Yelp">

    <meta name="msapplication-TileImage" content="https://s3-media3.fl.yelpcdn.com/assets/2/www/img/7f906850f02b/ico/win8-tile.png">
    <meta name="msapplication-TileColor" content="#c41200">

    <meta name="msapplication-starturl" content="https://www.yelp.com/">
    <meta name="msapplication-navbutton-color" content="#c41200">
    <meta name="msapplication-window" content="width=1024;height=768">
    <meta name="msapplication-tooltip" content="Go to Yelp.com">

    <meta name="msapplication-task" content="name=Find Reviews; action-uri=/; icon-uri=https://s3-media1.fl.yelpcdn.com/assets/2/www/img/a6bbc59c7458/ico/favicon-16x16.ico">

    <meta name="msapplication-task" content="name=Hot New Businesses; action-uri=/openings; icon-uri=https://s3-media1.fl.yelpcdn.com/assets/2/www/img/a6bbc59c7458/ico/favicon-16x16.ico">

    <meta name="msapplication-task" content="name=Yelp Deals; action-uri=/search?find_desc=deals; icon-uri=https://s3-media1.fl.yelpcdn.com/assets/2/www/img/a6bbc59c7458/ico/favicon-16x16.ico">


                            <meta name="apple-itunes-app" content="app-id=284910350, app-argument=yelp:///biz/18TtLS_JtiS2OH30FLqNrw?utm_campaign=default&amp;utm_source=www">


                        <link href="android-app://com.yelp.android/yelp-app-indexing/biz/18TtLS_JtiS2OH30FLqNrw?utm_campaign=biz_details&amp;utm_medium=organic&amp;utm_source=google" rel="alternate" />
        <link href="ios-app://284910350/yelp//biz/18TtLS_JtiS2OH30FLqNrw?utm_campaign=biz_details&amp;utm_medium=organic&amp;utm_source=google" rel="alternate" />


                        <meta property="al:ios:app_name" content="Yelp">
        <meta property="al:ios:app_store_id" content="284910350">
        <meta property="al:ios:url" content="https://www.yelp.com/biz/boba-guys-san-francisco-4?utm_campaign=biz_details&amp;utm_medium=organic&amp;utm_source=apple">


                <link rel="mask-icon" sizes="any" href="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_styleguide/4374c8fd03d1/assets/img/logos/yelp_burst.svg" content="#c41200">
    <link rel="shortcut icon" href="https://s3-media2.fl.yelpcdn.com/assets/srv0/yelp_styleguide/118ff475a341/assets/img/logos/favicon.ico">


                <link rel="search" type="application/opensearchdescription+xml" href="/opensearch" title="Yelp" />



            
            <link href="https://en.yelp.be/biz/boba-guys-san-francisco-4" hreflang="en-be" rel="alternate">
            <link href="https://www.yelp.fr/biz/boba-guys-san-francisco-4" hreflang="fr-fr" rel="alternate">
            <link href="https://www.yelp.ca/biz/boba-guys-san-francisco-4" hreflang="en-ca" rel="alternate">
            <link href="https://fi.yelp.fi/biz/boba-guys-san-francisco-4" hreflang="fi-fi" rel="alternate">
            <link href="https://www.yelp.pt/biz/boba-guys-san-francisco-4" hreflang="pt-pt" rel="alternate">
            <link href="https://fr.yelp.ch/biz/boba-guys-san-francisco-4" hreflang="fr-ch" rel="alternate">
            <link href="https://www.yelp.it/biz/boba-guys-san-francisco-4" hreflang="it-it" rel="alternate">
            <link href="https://nl.yelp.be/biz/boba-guys-san-francisco-4" hreflang="nl-be" rel="alternate">
            <link href="https://nz.yelp.com/biz/boba-guys-san-francisco-4" hreflang="en-nz" rel="alternate">
            <link href="https://www.yelp.nl/biz/boba-guys-san-francisco-4" hreflang="nl-nl" rel="alternate">
            <link href="https://www.yelp.com/biz/boba-guys-san-francisco-4" hreflang="en-us" rel="alternate">
            <link href="https://www.yelp.com.sg/biz/boba-guys-san-francisco-4" hreflang="en-sg" rel="alternate">
            <link href="https://en.yelp.com.hk/biz/boba-guys-san-francisco-4" hreflang="en-hk" rel="alternate">
            <link href="https://www.yelp.com.au/biz/boba-guys-san-francisco-4" hreflang="en-au" rel="alternate">
            <link href="https://fr.yelp.be/biz/boba-guys-san-francisco-4" hreflang="fr-be" rel="alternate">
            <link href="https://de.yelp.ch/biz/boba-guys-san-francisco-4" hreflang="de-ch" rel="alternate">
            <link href="https://www.yelp.cl/biz/boba-guys-san-francisco-4" hreflang="es-cl" rel="alternate">
            <link href="https://www.yelp.co.jp/biz/boba-guys-san-francisco-4" hreflang="ja-jp" rel="alternate">
            <link href="https://www.yelp.at/biz/boba-guys-san-francisco-4" hreflang="de-at" rel="alternate">
            <link href="https://www.yelp.com.ar/biz/boba-guys-san-francisco-4" hreflang="es-ar" rel="alternate">
            <link href="https://www.yelp.es/biz/boba-guys-san-francisco-4" hreflang="es-es" rel="alternate">
            <link href="https://www.yelp.co.uk/biz/boba-guys-san-francisco-4" hreflang="en-gb" rel="alternate">
            <link href="https://en.yelp.com.ph/biz/boba-guys-san-francisco-4" hreflang="en-ph" rel="alternate">
            <link href="https://zh.yelp.com.hk/biz/boba-guys-san-francisco-4" hreflang="zh-hk" rel="alternate">
            <link href="https://fil.yelp.com.ph/biz/boba-guys-san-francisco-4" hreflang="fil-ph" rel="alternate">
            <link href="https://www.yelp.com.br/biz/boba-guys-san-francisco-4" hreflang="pt-br" rel="alternate">
            <link href="https://en.yelp.ch/biz/boba-guys-san-francisco-4" hreflang="en-ch" rel="alternate">
            <link href="https://www.yelp.dk/biz/boba-guys-san-francisco-4" hreflang="da-dk" rel="alternate">
            <link href="https://www.yelp.com.tw/biz/boba-guys-san-francisco-4" hreflang="zh-tw" rel="alternate">
            <link href="https://www.yelp.cz/biz/boba-guys-san-francisco-4" hreflang="cs-cz" rel="alternate">
            <link href="https://ms.yelp.my/biz/boba-guys-san-francisco-4" hreflang="ms-my" rel="alternate">
            <link href="https://en.yelp.my/biz/boba-guys-san-francisco-4" hreflang="en-my" rel="alternate">
            <link href="https://www.yelp.com.tr/biz/boba-guys-san-francisco-4" hreflang="tr-tr" rel="alternate">
            <link href="https://www.yelp.ie/biz/boba-guys-san-francisco-4" hreflang="en-ie" rel="alternate">
            <link href="https://www.yelp.de/biz/boba-guys-san-francisco-4" hreflang="de-de" rel="alternate">
            <link href="https://www.yelp.com.mx/biz/boba-guys-san-francisco-4" hreflang="es-mx" rel="alternate">
            <link href="https://sv.yelp.fi/biz/boba-guys-san-francisco-4" hreflang="sv-fi" rel="alternate">
            <link href="https://fr.yelp.ca/biz/boba-guys-san-francisco-4" hreflang="fr-ca" rel="alternate">
            <link href="https://www.yelp.se/biz/boba-guys-san-francisco-4" hreflang="sv-se" rel="alternate">
            <link href="https://it.yelp.ch/biz/boba-guys-san-francisco-4" hreflang="it-ch" rel="alternate">
            <link href="https://www.yelp.pl/biz/boba-guys-san-francisco-4" hreflang="pl-pl" rel="alternate">
            <link href="https://www.yelp.no/biz/boba-guys-san-francisco-4" hreflang="nb-no" rel="alternate">




    
            <link rel="next" href="https://www.yelp.com/biz/boba-guys-san-francisco-4?start=20" />


    <script type="application/ld+json">        {"aggregateRating": {"reviewCount": 924, "@type": "AggregateRating", "ratingValue": 3.79978354978355}, "review": [{"reviewRating": {"ratingValue": 4}, "datePublished": "2016-11-28", "description": "This is one of the most popular boba spots in the Bay Area. I was pleased with the quality of my drink, but I don't think it's something I'd go out of my way for. For the price point and wait time, it was a great experience, but not a must-have.\n\nI went to this location on Black Friday (2016). To our surprise, the line was already out of the door. It's a very small shop and the wait took some time. I got to the front of the line and ordered my drink. The workers were very nice and went through orders very quickly. I personally don't like spending more than $5 for boba, but for the one time, I was definitely willing, especially with all of the hype surrounding the shop.\n\nThe wait time for the actual drink wasn't too long. I ordered the Muscat Oolong milk tea with boba. The taste was definitely interesting and worth the wait. It felt very authentic and flavorful. The only thing that disappointed me was the small size of the drink for the price. However, I left feeling pleased.\n\nThere's a ton of hype surrounding boba guys and it is well deserved. However, if you're like me and love boba all over the Bay Area, this isn't anything to go out of your way for. The price point brings it down a little bit, in my opinion, but in many ways, you get what you pay for. I would highly suggest Boba Guys to any first timer or SF tourist.", "author": "Calvin T."}, {"reviewRating": {"ratingValue": 5}, "datePublished": "2016-11-27", "description": "This boba place is absolutely my favorite spot in the city. Every single location of Boba Guys has quality drinks, so it doesn't matter where I'm at in the city. If i crave boba, I can rely on Boba Guys just about anywhere and everywhere with that A1 drink. \n\nThere's something so unique about the boba, either the chewiness or the taste. You can't really find the same balls anywhere else. It's definitely Grade A balls just like they say. \n\nThere is also a variety of tea and choices. Every single one of them is so natural that even when I intake 16 oz. of sugary liquid, I can still feel healthy. So, seriously, choose anything that you want on that menu, and I can promise you that it'll taste delicious and natural. The tea taste is definitely there, and that's how I know that their drinks are definitely all natural. \n\nOh, I also forgot to mention somewhere above that they give different options of milk! I always get soy because my stomach can't really tolerate dairy. So, if you're lactose and tolerant, don't be afraid to drink milk tea because Boba Guys can accommodate your needs.", "author": "Wendy T."}, {"reviewRating": {"ratingValue": 2}, "datePublished": "2016-11-27", "description": "I made a trip out in the rain before running to a movie yesterday and was very disappointed with the level of service. They completely forgot to make 1 drink in a friend's order then blamed it on another customer taking the missing drink. After we asked for the missing drink (an iced milk tea) they then made the incorrect drink (hot tea) which accepted due to our time constraints. \n\nWaiting 30 minutes for the wrong order which technically cost less than the missing item isn't exactly what I'd consider a good job. I won't be coming back here for sometime.", "author": "Kellyn W."}, {"reviewRating": {"ratingValue": 4}, "datePublished": "2016-11-22", "description": "Sometimes it makes me sad that there aren't many boba options in SF. Then when I really think about it, who needs more options when they have one of the best places anyway? \n\nI love boba guys because they don't have a crazy overwhelming menu and they have an awesome matcha which is all I really need anyway. The boba is always soft and sweet! That's a plus. The lines seem long, but it moves by fairly quickly. The only huge downside really is their lack of parking!", "author": "Maleah M."}, {"reviewRating": {"ratingValue": 5}, "datePublished": "2016-11-21", "description": "I am such a sucker for Boba Guys. Frankly, this place has ruined most other boba places for me because of its great quality. I can actually taste the tea in my drinks and the high quality of the milk is seriously refreshing. I also really appreciate that they have non-dairy options (woohoo almond/soy milk!). I've definitely gotten a couple of friends completely hooked on this place.\n\nMy two favorite drinks here are the thai tea and the coffee milk tea. I have yet to find another coffee milk tea that can hold a candle to the one here. It is a bit on the sweet side so I'd suggest getting less sugar if you don't like particularly sweet drinks. However, it's such a good blend of flavors with some strong, tasty coffee. I have a bad habit of comparing all other thai teas to the one here as well. \n\nThe classic milk tea and hong kong milk tea are also great choices! If you want something that's outside of the box, I would recommend the strawberry matcha~", "author": "Lakshmi M."}, {"reviewRating": {"ratingValue": 4}, "datePublished": "2016-11-06", "description": "Been wanting to try this place for a while. I was super excited to finally try it, although I'm a bit disappointed. This place is definitely over hyped. Luckily my boyfriend and I didn't have to wait too long before we ordered our drink but by that time, the line behind us got insanely long. I ordered the iced matcha green tea latte with boba and my boyfriend ordered the strawberry green tea latte. \n\nI asked for 50% sweetness and still thought my drink was too sweet. In all honestly, the drink was just mediocre. I expected something great, considering the long line of people but it was just like any regular green tea latte. My boyfriends strawberry green tea latte was interesting though. Also, the boba was really hard and kind of gross. This place is more of a three and a half stars but oh wells.", "author": "Annie H."}, {"reviewRating": {"ratingValue": 5}, "datePublished": "2016-11-21", "description": "I am obsessed... like... utterly, completely, head-over-heels, obsessed! HK style milk tea is the way to go! It contains condensed milk, so the drink is pretty darn sweet. I prefer going with 50% sweetness. And their boba... *heart eyes* omg. Perfect consistency and texture. I try really hard not to get boba most of the time because they're empty calories, but I cannot resist the boba here. \n\nAlso... they sell the best pineapple cakes in the world (every time I discover someone going to Taiwan, I ask for them to bring Sunny Hills pineapple cakes back to me, and yes, this includes a friend of a friend of a friend). It's pricy though... $5 for one, which is more expensive than a large drink, but oh so worth it.", "author": "Anna Z."}, {"reviewRating": {"ratingValue": 4}, "datePublished": "2016-10-27", "description": "So I finally found the source of the inconsistencies with their tea drinks - the horchata. Been back a few times and it was always good then got tempted by a special matchata (horchata topped with matcha). It looked beautiful but again it was really watery with hardly any horchata flavor. Boo! \n\nStay away from the horchata and you'll be all set. Still the best balls around!", "author": "Jean K."}, {"reviewRating": {"ratingValue": 2}, "datePublished": "2016-09-15", "description": "Overpriced and simply not very good. \n\nSaw an article this week in SF Gate about these guys so had to come try them out for myself. Tiny little place with line out the door looked promising but didn't deliver.\n\nI ordered the Thai Iced Tea with boba. The tea was pretty good and made with organic Strauss milk. They definitely take pride in using good, quality ingredients. However, maybe I was there on a bad day because whoever cooked up the batch of boba clearly never checked that it was cooked through. Nothing worse than biting into a boba to find it hard in the center like partially cooked pasta. No matter how good the tea was, it didn't make up for the awful texture of the boba. Definitely not worth the trip out to the Mission. \n\nSorry guys but you can't call yourself the Boba Guys and post up signs about your \"Grade-A Balls\" if the boba you serve is not even cooked all the way through.", "author": "Betty R."}, {"reviewRating": {"ratingValue": 4}, "datePublished": "2016-09-13", "description": "Boba Guys is the only boba shop in the Mission, so the line is often pretty long. Weekend afternoons/nights are the worst. \n\nI'd say the sweetness is similar to the average boba tea, but I always get 25% sweetness because I don't like it that sweet. Boba is softer rather than firmer (which I like). \n\nThey don't have a huge variety of drinks, but in a way it makes it seem more \"high-class\" and easy to choose. Before you order, make sure to check out the seasonal flavors on the side of the ordering counter. I usually end up picking some fruity flavor from there (strawberry jasmine tea fresca, strawberry matcha, and peach green tea were all great). \n\nOverall, it's a bit expensive for the price ($4-5), but if you're here, you probably don't have an easy alternative. At least you can Instagram a hipster pic of your tea on the pretty patterned wall outside. \n\nNote: Watch your step at the entrance. You can tell there were originally yellow markings to show that there's a step there, but it's worn off over time. They should probably repaint it!", "author": "Christine L."}, {"reviewRating": {"ratingValue": 5}, "datePublished": "2016-11-20", "description": "My first time trying Boba Guys and it was great! I went on a Sunday afternoon around 4pm. The line was out the door but it was worth the wait. Their ingredients are hand crafted, and the quality is impeccable. \n\nMy drink: \nI got the Coffee Milk tea with almond milk, 25% sweetness and boba. And it was perfection. \n\nAmbiance: \nFresh white paint and earthy tones give this environment an openness (which is needed because it's small). It was a bit warm inside but with the door open and the large windows, it helped minimized the stuffiness. \n\nMy experience: \nI met the manager while ubering (she was my rider) and she was sweet as pie!! Her staff were very customer-oriented, conscientious, and professional. All in all, I'd go back again.", "author": "Stephanie A."}, {"reviewRating": {"ratingValue": 4}, "datePublished": "2016-08-23", "description": "I love me some boba. Always. And after seeing soOooOO many photos on social media, I knew I had to try it when I visited SF. \n\nI went here twice. I was THAT obsessed. The store itself is quite small and only offers a bar-countertop with just 4 stools available for seating. So if you plan to sit around to do do any work, this is not the place to do that. The line can get long and extend outside, but it does move pretty quick. \n\n[[Iced Matcha Latte with Boba]] Lately, I have been obsessed with anything matcha, so this drink was definitely calling my name. The matcha was smooth, bold, and not chalky. I absolutely hate it when matcha drinks are chalky. Yuck! The boba was soft and chewy; a little sweet, but not too bland either. Add-ons are an extra 50 cents, but so worth it! \n\nThe first time I went, I didn't have them change the sweetness level and kept it at 100%. Now I am one to usually take my drinks pretty sweet. But this was just way too sweet. So the 2nd time I went, I had them knock it down to 75% and it was a little better. The next time I go, I think I'll do 50% sweetness.\n\nYou can choose from regular milk, almond, or soy milk you won't get charged extra! Sweet! \n\nIt is a bit pricey here. If I remember correctly it was around $5 for the 24 oz. However, the pricing is reflected in the quality ingredients, so it's definitely worth it.\n\nMy first time here, I drove, so I was lucky enough to find a spot (metered, of course) within a 5 minute walking distance. The second time, I Uber-ed it so no need to pay for parking, yay!\n\nI am hoping that Boba Guys will one day open in Orange County because I will be all over that shiz.", "author": "Michelle T."}, {"reviewRating": {"ratingValue": 4}, "datePublished": "2016-08-19", "description": "Good stuff.\n\nA few of my friends and I were itching for boba, so we stopped by Boba Guys on a Sunday afternoon. There was a short line, probably about 10 minutes or so. I ordered the Iced Matcha Latte with almond milk (at no additional charge, pretty neat) and quite enjoyed it. The matcha flavor is bold and full-bodied, but not too overpowering over the almond milk. The honey came through very nicely and was a tasty, untraditional touch. A bit pricey, but that's definitely reflected in the quality ingredients. Would come back.", "author": "Patricia Z."}, {"reviewRating": {"ratingValue": 2}, "datePublished": "2016-08-08", "description": "ERRR. Not worth the hype, TBH. \n\nWaited in line for around 20 minutes and was super excited since everyone seemed to be enjoying their drinks. \n\nWe ordered:\n-1 16 oz. iced Jasmine Milk Tea without toppings, organic milk, 25% sugar // Asked for no ice, still got ice. Jasmine tea flavor is super faint- overpowered by milk (at least 2/3 of the cup was milk instead). Also, organic milk tasted more like soymilk since it wasn't rich or creamy at all....a 1/5 drink.\n\n-1 16 oz. iced HK Style Milk Tea with pearls, organic milk, 50% sugar // Condensed milk overkill- can't imagine what it would be if it was 100% sweetness! There was barely any boba and the boba was too stiff- not soft at all. It says \"blended with condensed milk\"...felt like I was eating straight out of the jar myself.\n\nPros:\n+Fast service. Waited in line for 20 minutes, ordered in 1 minute, got the drink in 2 minutes. \n+Cute concept. Cute ant-eater, crisp interior. Good selection of basics on the menu!\n\nCons:\n-Meh service. Lady looked piss the whole time...good thing I didn't tip. \n-Pricey. $8 for two drinks? I would rather spend my $8 on a cream tart at Tartine's. \n\nTips/Observations:\n-Why don't they have a stamp card system? Not that I would want one..but I'm sure there are die-hard fans here. \n-Small space. Definitely grab and go unless you manage to steal a spot by the window. \n-What is their signature drink here? \n\nOverall, not impressed. They can't even get the basic teas right....not even sure what more to expect.\n\nNice try, Boba Guys. May attempt to get it again at a different location...and try their swirly pink drink.", "author": "Hurjane V."}, {"reviewRating": {"ratingValue": 2}, "datePublished": "2016-08-14", "description": "This is my second time at Boba Guys. The first time, I got the matcha latte with pearls. I didn't enjoy it too much, but that's probably because I don't like matcha very much. \n\nThis time around, I got the HK-style tea with pearls at 50% sweetness. I was pretty unimpressed. I didn't taste any of the condensed milk, which was also why I lowered the sweetness. I spent $4.25 for a regular-sized drink that, in my opinion, did not taste unique at all. Lines were also insane and parking impossible. However, drinks came out very quickly once we placed our orders.\n\nI had a taste of the horchata tea and it didn't seem too special either. I prefer real horchata that costs a fraction of the price! I don't think I'll be back - I've effectively tasted three of their most popular drinks and have been dissatisfied with all of them.", "author": "Anna H."}, {"reviewRating": {"ratingValue": 5}, "datePublished": "2016-11-09", "description": "Every time I come here it's so so good. This time I got a jasmine milk tea, 50% sweetness, with boba. \n\nStaff was super nice, and my tea was ready super quick. Coming on the weekday is the way to go -- no line at all. On the weekends it takes around 30 min in line.", "author": "Hayley D."}, {"reviewRating": {"ratingValue": 5}, "datePublished": "2016-10-28", "description": "The line for this one is definitely not as long as the one in Union Square. Also, I have an appreciation for the bigger store so that you have room to stand when you're waiting for your drink. \n\nBoba Guys drinks average between $4-5, which is a little more than I hope to pay, but it's for delicious good quality boba tea. They have a lot of options such as Hong Kong style milk tea, Hojicha and Matcha lattes.I've heard great things about their Dirty Horchata, which I believe is Horchata with espresso on top. \n\nThe ambience here is great, the staff are friendly and the decor is very clean and modern. Would highly recommend this one over the one in Union Square!", "author": "Nancy L."}, {"reviewRating": {"ratingValue": 4}, "datePublished": "2016-11-27", "description": "Boba guys are warming up to me. They always have a location where I am craving boba like in the Mission area. The line is kind of ridiculous and there are like no tables in many of the locations esp this one. I like how there is a good size menu but not overwhelming with 50 different boba drinks. You can basically customize your drink however you like (type of milk - almond, soy, regular, sugar level, ice level, size, and hot/cold.) I got a warm boba which satisfied my boba craving and also kept me warm on a cold day. A bit pricy but overall I would come back.", "author": "Sarah C."}, {"reviewRating": {"ratingValue": 5}, "datePublished": "2016-10-09", "description": "Boba guys like a lot of the stores on Valencia, has great ingredients like Strauss milk and grade A tea. You really get what you pay for! \n\nMy favorites are the lychee milk tea, lavender-rose milk tea, and currently my most favorite Hojichaa (roasted milk tea). Yummm :). \n\nTheir Belgium waffles are so good too, when you bite into them they have pieces of sugar crystals and it tastes supa buttery+sweet. \n\nIt is a bit on the pricey side, but as I mentioned before, they have the best ingredients and you really can't complain if you want the best, right? \n\nShout out to the tall Asian guy and the boba guys team, keep doing your thaang!!", "author": "Melanie T."}, {"reviewRating": {"ratingValue": 5}, "datePublished": "2016-09-27", "description": "I'm sorry for not returning sooner, Boba Guys!! Make sure you check the specials listed next to the register, there are some really yummy options...I wanted them all! I decided on the Matchata - matcha plus horchata. It's really good, tastes a little more horchata than matcha but you can still taste all the flavors. I also tried a regular milk tea but the flavor is really strong, I like it! Not watery at all. I'd definitely get either drink again but next time I'll have to go for that strawberry matcha!", "author": "Ashley C."}], "priceRange": "$", "name": "Boba Guys", "address": {"addressLocality": "San Francisco", "addressRegion": "CA", "streetAddress": "3491 19th St", "postalCode": "94110", "addressCountry": "US"}, "@context": "http://schema.org/", "image": "https://s3-media4.fl.yelpcdn.com/bphoto/HPrO3kgwbdc6iGYhnX1Tyw/ls.jpg", "@type": "LocalBusiness", "telephone": "+14159672622"}
</script>


            <meta property="fb:app_id" content="97534753161">
        <meta property="og:description" content="Specialties: High-quality bubble milk teas made with next-level quality ingredients like organic milk, homemade syrup, and homemade almond jelly. Home of the original Horchata Boba and Tea Frescas. Established in 2011.  We started Boba Guys…">
        <meta property="og:image" content="https://s3-media2.fl.yelpcdn.com/bphoto/FE1lCskaigmVupQGk86T4g/o.jpg">
        <meta property="og:image:height" content="1300">
        <meta property="og:image:width" content="2000">
        <meta property="og:site_name" content="Yelp">
        <meta property="og:title" content="Boba Guys - Mission - San Francisco, CA">
        <meta property="og:type" content="yelpyelp:business">
        <meta property="og:url" content="https://www.yelp.com/biz/boba-guys-san-francisco-4">
        <meta property="og:image" content="https://s3-media3.fl.yelpcdn.com/assets/srv0/seo_metadata/f9149736ad8d/assets/img/logos/yelp_og_image.png">
        <meta property="og:image:height" content="1080">
        <meta property="og:image:width" content="1920">



            <meta property="twitter:card" content="summary">
        <meta property="twitter:site" content="@yelp">
        <meta property="twitter:domain" content="yelp.com">
        <meta property="twitter:app:name:iphone" content="Yelp">
        <meta property="twitter:app:name:ipad" content="Yelp">
        <meta property="twitter:app:name:googleplay" content="Yelp">
        <meta property="twitter:app:id:iphone" content="id284910350">
        <meta property="twitter:app:id:ipad" content="id284910350">
        <meta property="twitter:app:id:googleplay" content="com.yelp.android">
        <meta property="twitter:image" content="https://s3-media1.fl.yelpcdn.com/bphoto/FE1lCskaigmVupQGk86T4g/258s.jpg">
        <meta property="twitter:app:url:iphone" content="yelp:///biz/18TtLS_JtiS2OH30FLqNrw?utm_campaign=default&amp;utm_source=twitter-card">
        <meta property="twitter:app:url:ipad" content="yelp:///biz/18TtLS_JtiS2OH30FLqNrw?utm_campaign=default&amp;utm_source=twitter-card">
        <meta property="twitter:app:url:googleplay" content="intent://yelp.com/biz/18TtLS_JtiS2OH30FLqNrw?utm_source=twitter-card#Intent;scheme=http;package=com.yelp.android;end;">


    <meta name="yelp-biz-id" content="18TtLS_JtiS2OH30FLqNrw">

        
            <title>Boba Guys - 1056 Photos & 924 Reviews - Coffee & Tea - 3491 19th St, Mission, San Francisco, CA - Phone Number - Menu - Yelp</title>

    <script>                window.yPerfTimings.push(["head:css:start", (new Date()).getTime()]);
</script>

            <!--[if (IE 9)|(lt IE 9) ]> <link rel="stylesheet" type="text/css" media="all" href="https://s3-media2.fl.yelpcdn.com/assets/2/www/css/978e093fbe77/www-pkg-main.css">
            <link rel="stylesheet" type="text/css" media="all" href="https://s3-media4.fl.yelpcdn.com/assets/2/www/css/e6f850679cb5/www-pkg-more.css"> <![endif]-->
            <!--[if (gt IE 9)|!(IE)]><!--> <link rel="stylesheet" type="text/css" media="all" href="https://s3-media4.fl.yelpcdn.com/assets/2/www/css/b09ae980a065/www-pkg.css"> <!--<![endif]-->
    <link rel="stylesheet" type="text/css" media="all" href="https://s3-media1.fl.yelpcdn.com/assets/2/www/css/0a7fff3aa7c1/biz_details-pkg.css">


    <script>                window.yPerfTimings.push(["head:css:end", (new Date()).getTime()]);
</script>

    <script>                    window.yPerfTimings.push(["head:end", (new Date()).getTime()]);
</script>


                <link href="https://www.facebook.com/yelp" itemprop="sameAs" id="sitelink-profile-facebook">
        <link href="https://twitter.com/yelp" itemprop="sameAs" id="sitelink-profile-twitter">
        <link href="https://www.linkedin.com/company/31517" itemprop="sameAs" id="sitelink-profile-linkedin">
        <link href="https://plus.google.com/102333850216082449390/" itemprop="sameAs" id="sitelink-profile-gplus">
        <link href="https://instagram.com/yelp" itemprop="sameAs" id="sitelink-profile-instagram">

    <meta itemscope itemtype="http://schema.org/WebSite" itemref="sitename sitelink  sitelink-profile-facebook sitelink-profile-twitter sitelink-profile-linkedin sitelink-profile-gplus sitelink-profile-instagram">
    <meta itemprop="name" content="Yelp" id="sitename">
    <link href="https://www.yelp.com/" itemprop="url" id="sitelink">



        <script>
            (function() {
                var main = null;

                var main=function(){!function(h,a,i,c,j,d,g){if(h.fbq){return}j=h.fbq=function(){j.callMethod?j.callMethod.apply(j,arguments):j.queue.push(arguments)};if(!h._fbq){h._fbq=j}j.push=j;j.loaded=!0;j.version="2.0";j.queue=[];d=a.createElement(i);d.async=!0;d.src=c;g=a.getElementsByTagName(i)[0];g.parentNode.insertBefore(d,g)}(window,document,"script","https://connect.facebook.net/en_US/fbevents.js");fbq("init","102029836881428");fbq("track","PageView")};

                if (main === null) {
                    throw 'invalid inline script, missing main declaration.';
                }
                main();
            })();
    </script>
    <script type="text/javascript" src="/ylx-uxybeudrrawvvezsawxtux.js" defer></script><style type="text/css">#d__fFH{position:absolute;top:-5000px;left:-5000px}#d__fF{font-family:serif;font-size:200px;visibility:hidden}#qwcqyubaruyustwwxtqwcqy{display:none!important}</style></head>











    <body id="yelp_main_body" class="jquery country-us logged-out biz-details">

        <script>(function (d, w) {
    var supportsSVG = (
        !!d.createElementNS &&
        !!d.createElementNS(
            'http://www.w3.org/2000/svg',
            'svg'
        ).createSVGRect
    );
    var cdnPath = 'https://s3-media2.fl.yelpcdn.com/assets/srv0/svg_icons/ade293f8fccf/assets/svg_sprite.js';
    var head = d.getElementsByTagName('head')[0];
    function fallback() {
        var link = d.createElement('link');
        link.rel = 'stylesheet';
        link.href = 'https://s3-media3.fl.yelpcdn.com/assets/srv0/svg_icons/ff950daaac51/assets/sprite.css';
        head.appendChild(link);
    }
    if (!supportsSVG) {
        fallback();
        return;
    }
    if (!w.yelp) {
        w.yelp = {};
    }
    w.yelp.__injectSvgSpritesheet = function (svg) {
        document.body.insertAdjacentHTML('afterbegin', svg);
        delete window.yelp.__injectSvgSpritesheet;
    }
    function onError() {
        d.documentElement.className = [
            d.documentElement.className,
            'icon-svg-unavailable'
        ].join(' ');
        fallback();
        return true;
    }
    var script = d.createElement('script');
    script.async = true;
    script.onerror = onError;
    script.src = cdnPath + '?callback=window.yelp.__injectSvgSpritesheet';
    head.appendChild(script);
}(document, window));</script>
<noscript>
    <link rel="stylesheet" href="https://s3-media3.fl.yelpcdn.com/assets/srv0/svg_icons/ff950daaac51/assets/sprite.css">
</noscript>

    <script>                window.yPerfTimings.push(["body:start", (new Date()).getTime()]);
</script>

            <div id="fb-root"></div>

        <div id="wrap" class="lang-en">

                

                    <div >
                

                                <ul class="offscreen">
                <li>
                    <a href="#header_find_form" rel="nofollow">
                        Skip to Search Form
                    </a><a href="ysdrfvaarydbuufzrdz.html" style="display: none;" rel="file" id="qwcqyubaruyustwwxtqwcqy">zzuuxvuxevfsz</a>
                </li>
                <li>
                    <a href="#header-nav" rel="nofollow">
                        Skip to Navigation
                    </a>
                </li>
                <li>
                    <a href="#page-content" rel="nofollow">
                        Skip to Page Content
                    </a>
                </li>
        </ul>








        <div class="main-header main-content-wrap js-main-header webview-hidden">
            <div class="content-container">
                <div class="arrange arrange--18 main-header_arrange">

                                    <div class="arrange_unit main-header--full_arrange_unit">
            <div class="main-header_logo" id="logo">
                <a href="/">Yelp</a>
            </div>
        </div>


    <div class="arrange_unit arrange_unit--fill align-middle main-header--full_arrange_unit main-header_search-container">
            <div class="main-header_search responsive-hidden-medium-only">
                    <form method="get" action="/search" id="header_find_form" class="main-search yform u-space-b0" role="search">
        <div class="arrange arrange--middle arrange--6 arrange--stack">
            <div class="arrange_unit  main-search_search-field-arrange">    <div class="main-search_suggestions-field search-field-container find-decorator">
        <label class="main-search_pseudo-input pseudo-input">
            <span class="pseudo-input_text">Find</span>
            <span class="pseudo-input_field-holder">
                <input maxlength="64" name="find_desc" id="find_desc" autocomplete="off" value="" placeholder="tacos, cheap dinner, Max’s" class="main-search_field pseudo-input_field" aria-autocomplete="list" tabindex="1">
            </span>
        </label>
        <div class="main-search_suggestions suggestions-list-container search-suggestions-list-container hidden">
            <ul class="suggestions-list" role="listbox" aria-label="Search results"></ul>
        </div>
    </div>
</div>
            <div class="arrange_unit main-search_near-field-arrange  main-search_search-field-arrange arrange_unit--stack-12">    <div class="main-search_suggestions-field search-field-container near-decorator">
        <label class="main-search_pseudo-input pseudo-input">
            <span class="pseudo-input_text">Near</span>
            <span class="main-search_field-holder pseudo-input_field-holder">
                <input maxlength="80" name="find_loc" id="dropperText_Mast" autocomplete="off" value="San Francisco, CA" placeholder="address, neighborhood, city, state or zip" data-query="San Francisco, CA" class="main-search_field pseudo-input_field" aria-autocomplete="list" tabindex="2">
                <input type="hidden" name="ns" value="1">
            </span>
        </label>
        <div class="main-search_suggestions suggestions-list-container location-suggestions-list-container hidden">
            <ul class="suggestions-list" role="listbox" aria-label="Search results"></ul>
        </div>
    </div>
</div>
            <div class="arrange_unit main-search_actions arrange_unit--stack-12">
                <div class="arrange  arrange--wrap arrange--6">
                <div class="arrange_unit hidden-non-responsive-inline-block responsive-visible-small-inline-block main-search_action">

    <a class="ybtn ybtn--primary main-header_button js-search-close main-search_close">
                        Cancel
    </a>
                </div>
                <div class="arrange_unit main-search_action arrange_unit--stack-12">

    <button class="ybtn ybtn--primary main-search_submit main-header_button" id="header-search-submit" tabindex="3" title="Search" type="submit" value="submit">
                        <span class="main-search_action-icon-wrap js-search-icon-wrap">
                            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-search-small icon--size-18 icon--inverse icon--fallback-inverted">
    <svg class="icon_svg">
        <use xlink:href="#18x18_search_small" />
    </svg>
</span>
                            <span class="u-offscreen">Search</span>
                        </span>
                            <div class="circle-spinner js-circle-spinner hidden">
        <div class="circle-spinner_segment container1">
            <div class="circle1"></div>
            <div class="circle2"></div>
            <div class="circle3"></div>
            <div class="circle4"></div>
        </div>
        <div class="circle-spinner_segment container2">
            <div class="circle1"></div>
            <div class="circle2"></div>
            <div class="circle3"></div>
            <div class="circle4"></div>
        </div>
        <div class="circle-spinner_segment container3">
            <div class="circle1"></div>
            <div class="circle2"></div>
            <div class="circle3"></div>
            <div class="circle4"></div>
        </div>
    </div>

    </button>
                </div>
                </div>
            </div>
        </div>
    </form>

            </div>

            <div class="main-header_nav nowrap responsive-hidden-medium">
                        <ul class="header-nav" id="header-nav">
                <li id="home-link" class="header-nav_item">
                        <a class="header-nav_link" href="/">
                            Home
                        </a>
                </li>
                <li id="about-me" class="header-nav_item">
                        <a class="header-nav_link" href="/user_details">
                            About Me
                        </a>
                </li>
                <li id="write-review" class="header-nav_item">
                        <a class="header-nav_link" href="/writeareview">
                            Write a Review
                        </a>
                </li>
                <li id="find-friends" class="header-nav_item">
                        <a class="header-nav_link" href="/find_friends">
                            Find Friends
                        </a>
                </li>
                <li id="messaging" class="header-nav_item">
                        <a class="header-nav_link" href="/mail">
                            Messages
                        </a>
                </li>
                <li id="talk" class="header-nav_item">
                        <a class="header-nav_link" href="/talk">
                            Talk
                        </a>
                </li>
                <li id="events" class="header-nav_item">
                        <a class="header-nav_link" href="/events">
                            Events
                        </a>
                </li>
        </ul>

            </div>
    </div>


        <div class="arrange_unit main-header--full_arrange_unit">
            <div class="arrange arrange--6">
                <div class="arrange_unit nowrap">
                    <div class="main-header_account webview-hidden">
                                    <ul class="header-nav">
            <li class="header-nav_item responsive-hidden-small">

    <a class="ybtn ybtn--primary main-header_button header-nav_button--sign-up js-sign-up-button" href="/signup" id="header-sign-up">
                    Sign Up
    </a>
            </li>
            <li class="header-nav_item text-centered">
                <a class="header-nav_link header-nav_link--log-in js-log-in-button" href="https://www.yelp.com/login?return_url=%2Fbiz%2Fboba-guys-san-francisco-4">
                    Log In
                </a>
            </li>
    </ul>
        
    <div id="topbar-account-item" class="user-account clearfix drop-menu-origin hidden-non-responsive-block responsive-visible-small-block">

    <a class="ybtn ybtn--primary drop-menu-link user-account_button" href="javascript:;" id="topbar-account-link">
            <span aria-hidden="true" style="width: 14px; height: 14px;" class="icon icon--14-triangle-down icon--size-14 icon--inverse icon--fallback-inverted u-triangle-direction-down user-account_button-arrow responsive-visible-large-inline-block">
    <svg class="icon_svg">
        <use xlink:href="#14x14_triangle_down" />
    </svg>
</span>
            <span aria-hidden="true" style="width: 24px; height: 24px;" class="icon icon--24-hamburger icon--size-24 icon--inverse icon--fallback-inverted drop-menu-link_open">
    <svg class="icon_svg">
        <use xlink:href="#24x24_hamburger" />
    </svg>
</span>
            <span aria-hidden="true" style="width: 24px; height: 24px;" class="icon icon--24-close icon--size-24 icon--inverse icon--fallback-inverted drop-menu-link_close">
    <svg class="icon_svg">
        <use xlink:href="#24x24_close" />
    </svg>
</span>
    </a>
        <div id="topbar-account-wrap" class="drop-menu drop-menu-has-arrow">
            <div class="drop-menu-arrow responsive-hidden-small"></div>

                <div class="arrange arrange--6 arrange--equal drop-menu_auth-buttons">
                    <div class="arrange_unit">

    <a class="ybtn ybtn-full" href="https://www.yelp.com/login?return_url=%2Fbiz%2Fboba-guys-san-francisco-4">
                            Login
    </a>
                    </div>
                    <div class="arrange_unit">

    <a class="ybtn ybtn--primary ybtn-full" href="/signup">
                            Sign Up
    </a>
                    </div>
                </div>

                <ul class="drop-menu-group--nav drop-menu-group">
                            <li class="drop-down-menu-link">
        <div class="arrange arrange--middle arrange--6">
            <strong class="arrange_unit arrange_unit--fill">
                    <a href="/user_details">
                            <span aria-hidden="true" style="width: 24px; height: 24px;" class="icon icon--24-profile icon--size-24 u-space-r1">
    <svg class="icon_svg">
        <use xlink:href="#24x24_profile" />
    </svg>
</span>About Me
                    </a>
            </strong>
            <span class="arrange_unit">
                <span aria-hidden="true" style="width: 24px; height: 24px;" class="icon icon--24-chevron-right icon--size-24 hidden-non-responsive-block responsive-visible-medium-block">
    <svg class="icon_svg">
        <use xlink:href="#24x24_chevron_right" />
    </svg>
</span>
            </span>
        </div>
    </li>

                            
                            
                            <li class="drop-down-menu-link hidden-non-responsive-block responsive-visible-medium-block">
        <div class="arrange arrange--middle arrange--6">
            <strong class="arrange_unit arrange_unit--fill">
                    <a href="/talk">
                            <span aria-hidden="true" style="width: 24px; height: 24px;" class="icon icon--24-talk icon--size-24 u-space-r1">
    <svg class="icon_svg">
        <use xlink:href="#24x24_talk" />
    </svg>
</span>Talk
                    </a>
            </strong>
            <span class="arrange_unit">
                <span aria-hidden="true" style="width: 24px; height: 24px;" class="icon icon--24-chevron-right icon--size-24 hidden-non-responsive-block responsive-visible-medium-block">
    <svg class="icon_svg">
        <use xlink:href="#24x24_chevron_right" />
    </svg>
</span>
            </span>
        </div>
    </li>

                </ul>

        </div>
    </div>



                    </div>
                </div>
            </div>
        </div>


                </div>
            </div>
        </div>

        </div>

            


                



                

                <script>
            (function() {
                var main = null;

                var main=(function(){function a(b){window.yDFP.ABP={};window.yDFP.ABP.getPixelSource=function(c){return b+"?ch="+c+"&rn="+Math.random()*11};window.yDFP.ABP.detect=function(l){var g=false;var f=2;var i=false;var h=false;function k(n,m){if(f===0||m>400){n(f===0&&g)}else{setTimeout(function(){k(n,m*2)},m*2)}}function j(){if(f!==0){return}g=!i&&h}var e=function(){f-=1;j()};var d=new Image();d.onload=e;d.onerror=function(){i=true;e()};d.src=window.yDFP.ABP.getPixelSource(1);var c=new Image();c.onload=e;
c.onerror=function(){h=true;e()};c.src=window.yDFP.ABP.getPixelSource(2);k(l,100)};window.yDFP.ABP.abpInstalledChannel="1382551876";window.yDFP.ABP.abpNotInstalledChannel="2859285073"}window.yDFP=window.yDFP||{};window.yDFP.initABPDetection=a;return window.yDFP.initABPDetection})();

                if (main === null) {
                    throw 'invalid inline script, missing main declaration.';
                }
                main("/px.gif");
            })();
    </script>

                <div id="print-masthead">
        <img src="https://s3-media2.fl.yelpcdn.com/assets/2/www/img/b7e9d647188d/gfx/header_print.gif" class="print-bkg-img" alt="Yelp">
    </div>




    <div class="biz-country-us">

            <span id="page-content" class="offscreen">&nbsp;</span>

            <div class="main-content-wrap main-content-wrap--full">
    <div class="top-shelf">
        <div class="content-container">
            
    <div id="alert-container">

    </div>


                <div class="hidden">
            <div itemscope itemtype="http://schema.org/LocalBusiness">
        

                <div itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
        <meta itemprop="ratingValue" content="4.0">
        <span itemprop="reviewCount">924</span>
    </div>


            <meta itemprop="image" content="https://s3-media4.fl.yelpcdn.com/bphoto/HPrO3kgwbdc6iGYhnX1Tyw/ls.jpg">

            <meta itemprop="priceRange" content="$" />

            <meta itemprop="name" content="Boba Guys" />

            <address itemprop="address" itemscope itemtype="http://schema.org/PostalAddress">
        <span itemprop="streetAddress">3491 19th St</span><br><span itemprop="addressLocality">San Francisco</span>, <span itemprop="addressRegion">CA</span> <span itemprop="postalCode">94110</span><br><meta content="US" itemprop="addressCountry">
    </address>

            <span itemprop="telephone">
        (415) 967-2622
    </span>

                    <div itemprop="review" itemscope itemtype="http://schema.org/Review">
        <meta itemprop="author" content="Calvin T.">
        <div itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
            <meta itemprop="ratingValue" content="4.0">
        </div>
        <meta itemprop="datePublished" content="2016-11-28">
        <p itemprop="description">This is one of the most popular boba spots in the Bay Area. I was pleased with the quality of my drink, but I don&#39;t think it&#39;s something I&#39;d go out of my way for. For the price point and wait time, it was a great experience, but not a must-have.

I went to this location on Black Friday (2016). To our surprise, the line was already out of the door. It&#39;s a very small shop and the wait took some time. I got to the front of the line and ordered my drink. The workers were very nice and went through orders very quickly. I personally don&#39;t like spending more than $5 for boba, but for the one time, I was definitely willing, especially with all of the hype surrounding the shop.

The wait time for the actual drink wasn&#39;t too long. I ordered the Muscat Oolong milk tea with boba. The taste was definitely interesting and worth the wait. It felt very authentic and flavorful. The only thing that disappointed me was the small size of the drink for the price. However, I left feeling pleased.

There&#39;s a ton of hype surrounding boba guys and it is well deserved. However, if you&#39;re like me and love boba all over the Bay Area, this isn&#39;t anything to go out of your way for. The price point brings it down a little bit, in my opinion, but in many ways, you get what you pay for. I would highly suggest Boba Guys to any first timer or SF tourist.<p>
    </div>

            <div itemprop="review" itemscope itemtype="http://schema.org/Review">
        <meta itemprop="author" content="Wendy T.">
        <div itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
            <meta itemprop="ratingValue" content="5.0">
        </div>
        <meta itemprop="datePublished" content="2016-11-27">
        <p itemprop="description">This boba place is absolutely my favorite spot in the city. Every single location of Boba Guys has quality drinks, so it doesn&#39;t matter where I&#39;m at in the city. If i crave boba, I can rely on Boba Guys just about anywhere and everywhere with that A1 drink. 

There&#39;s something so unique about the boba, either the chewiness or the taste. You can&#39;t really find the same balls anywhere else. It&#39;s definitely Grade A balls just like they say. 

There is also a variety of tea and choices. Every single one of them is so natural that even when I intake 16 oz. of sugary liquid, I can still feel healthy. So, seriously, choose anything that you want on that menu, and I can promise you that it&#39;ll taste delicious and natural. The tea taste is definitely there, and that&#39;s how I know that their drinks are definitely all natural. 

Oh, I also forgot to mention somewhere above that they give different options of milk! I always get soy because my stomach can&#39;t really tolerate dairy. So, if you&#39;re lactose and tolerant, don&#39;t be afraid to drink milk tea because Boba Guys can accommodate your needs.<p>
    </div>

            <div itemprop="review" itemscope itemtype="http://schema.org/Review">
        <meta itemprop="author" content="Kellyn W.">
        <div itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
            <meta itemprop="ratingValue" content="2.0">
        </div>
        <meta itemprop="datePublished" content="2016-11-27">
        <p itemprop="description">I made a trip out in the rain before running to a movie yesterday and was very disappointed with the level of service. They completely forgot to make 1 drink in a friend&#39;s order then blamed it on another customer taking the missing drink. After we asked for the missing drink (an iced milk tea) they then made the incorrect drink (hot tea) which accepted due to our time constraints. 

Waiting 30 minutes for the wrong order which technically cost less than the missing item isn&#39;t exactly what I&#39;d consider a good job. I won&#39;t be coming back here for sometime.<p>
    </div>

            <div itemprop="review" itemscope itemtype="http://schema.org/Review">
        <meta itemprop="author" content="Maleah M.">
        <div itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
            <meta itemprop="ratingValue" content="4.0">
        </div>
        <meta itemprop="datePublished" content="2016-11-22">
        <p itemprop="description">Sometimes it makes me sad that there aren&#39;t many boba options in SF. Then when I really think about it, who needs more options when they have one of the best places anyway? 

I love boba guys because they don&#39;t have a crazy overwhelming menu and they have an awesome matcha which is all I really need anyway. The boba is always soft and sweet! That&#39;s a plus. The lines seem long, but it moves by fairly quickly. The only huge downside really is their lack of parking!<p>
    </div>

            <div itemprop="review" itemscope itemtype="http://schema.org/Review">
        <meta itemprop="author" content="Lakshmi M.">
        <div itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
            <meta itemprop="ratingValue" content="5.0">
        </div>
        <meta itemprop="datePublished" content="2016-11-21">
        <p itemprop="description">I am such a sucker for Boba Guys. Frankly, this place has ruined most other boba places for me because of its great quality. I can actually taste the tea in my drinks and the high quality of the milk is seriously refreshing. I also really appreciate that they have non-dairy options (woohoo almond/soy milk!). I&#39;ve definitely gotten a couple of friends completely hooked on this place.

My two favorite drinks here are the thai tea and the coffee milk tea. I have yet to find another coffee milk tea that can hold a candle to the one here. It is a bit on the sweet side so I&#39;d suggest getting less sugar if you don&#39;t like particularly sweet drinks. However, it&#39;s such a good blend of flavors with some strong, tasty coffee. I have a bad habit of comparing all other thai teas to the one here as well. 

The classic milk tea and hong kong milk tea are also great choices! If you want something that&#39;s outside of the box, I would recommend the strawberry matcha~<p>
    </div>

            <div itemprop="review" itemscope itemtype="http://schema.org/Review">
        <meta itemprop="author" content="Annie H.">
        <div itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
            <meta itemprop="ratingValue" content="4.0">
        </div>
        <meta itemprop="datePublished" content="2016-11-06">
        <p itemprop="description">Been wanting to try this place for a while. I was super excited to finally try it, although I&#39;m a bit disappointed. This place is definitely over hyped. Luckily my boyfriend and I didn&#39;t have to wait too long before we ordered our drink but by that time, the line behind us got insanely long. I ordered the iced matcha green tea latte with boba and my boyfriend ordered the strawberry green tea latte. 

I asked for 50% sweetness and still thought my drink was too sweet. In all honestly, the drink was just mediocre. I expected something great, considering the long line of people but it was just like any regular green tea latte. My boyfriends strawberry green tea latte was interesting though. Also, the boba was really hard and kind of gross. This place is more of a three and a half stars but oh wells.<p>
    </div>

            <div itemprop="review" itemscope itemtype="http://schema.org/Review">
        <meta itemprop="author" content="Anna Z.">
        <div itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
            <meta itemprop="ratingValue" content="5.0">
        </div>
        <meta itemprop="datePublished" content="2016-11-21">
        <p itemprop="description">I am obsessed... like... utterly, completely, head-over-heels, obsessed! HK style milk tea is the way to go! It contains condensed milk, so the drink is pretty darn sweet. I prefer going with 50% sweetness. And their boba... *heart eyes* omg. Perfect consistency and texture. I try really hard not to get boba most of the time because they&#39;re empty calories, but I cannot resist the boba here. 

Also... they sell the best pineapple cakes in the world (every time I discover someone going to Taiwan, I ask for them to bring Sunny Hills pineapple cakes back to me, and yes, this includes a friend of a friend of a friend). It&#39;s pricy though... $5 for one, which is more expensive than a large drink, but oh so worth it.<p>
    </div>

            <div itemprop="review" itemscope itemtype="http://schema.org/Review">
        <meta itemprop="author" content="Jean K.">
        <div itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
            <meta itemprop="ratingValue" content="4.0">
        </div>
        <meta itemprop="datePublished" content="2016-10-27">
        <p itemprop="description">So I finally found the source of the inconsistencies with their tea drinks - the horchata. Been back a few times and it was always good then got tempted by a special matchata (horchata topped with matcha). It looked beautiful but again it was really watery with hardly any horchata flavor. Boo! 

Stay away from the horchata and you&#39;ll be all set. Still the best balls around!<p>
    </div>

            <div itemprop="review" itemscope itemtype="http://schema.org/Review">
        <meta itemprop="author" content="Betty R.">
        <div itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
            <meta itemprop="ratingValue" content="2.0">
        </div>
        <meta itemprop="datePublished" content="2016-09-15">
        <p itemprop="description">Overpriced and simply not very good. 

Saw an article this week in SF Gate about these guys so had to come try them out for myself. Tiny little place with line out the door looked promising but didn&#39;t deliver.

I ordered the Thai Iced Tea with boba. The tea was pretty good and made with organic Strauss milk. They definitely take pride in using good, quality ingredients. However, maybe I was there on a bad day because whoever cooked up the batch of boba clearly never checked that it was cooked through. Nothing worse than biting into a boba to find it hard in the center like partially cooked pasta. No matter how good the tea was, it didn&#39;t make up for the awful texture of the boba. Definitely not worth the trip out to the Mission. 

Sorry guys but you can&#39;t call yourself the Boba Guys and post up signs about your &#34;Grade-A Balls&#34; if the boba you serve is not even cooked all the way through.<p>
    </div>

            <div itemprop="review" itemscope itemtype="http://schema.org/Review">
        <meta itemprop="author" content="Christine L.">
        <div itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
            <meta itemprop="ratingValue" content="4.0">
        </div>
        <meta itemprop="datePublished" content="2016-09-13">
        <p itemprop="description">Boba Guys is the only boba shop in the Mission, so the line is often pretty long. Weekend afternoons/nights are the worst. 

I&#39;d say the sweetness is similar to the average boba tea, but I always get 25% sweetness because I don&#39;t like it that sweet. Boba is softer rather than firmer (which I like). 

They don&#39;t have a huge variety of drinks, but in a way it makes it seem more &#34;high-class&#34; and easy to choose. Before you order, make sure to check out the seasonal flavors on the side of the ordering counter. I usually end up picking some fruity flavor from there (strawberry jasmine tea fresca, strawberry matcha, and peach green tea were all great). 

Overall, it&#39;s a bit expensive for the price ($4-5), but if you&#39;re here, you probably don&#39;t have an easy alternative. At least you can Instagram a hipster pic of your tea on the pretty patterned wall outside. 

Note: Watch your step at the entrance. You can tell there were originally yellow markings to show that there&#39;s a step there, but it&#39;s worn off over time. They should probably repaint it!<p>
    </div>

            <div itemprop="review" itemscope itemtype="http://schema.org/Review">
        <meta itemprop="author" content="Stephanie A.">
        <div itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
            <meta itemprop="ratingValue" content="5.0">
        </div>
        <meta itemprop="datePublished" content="2016-11-20">
        <p itemprop="description">My first time trying Boba Guys and it was great! I went on a Sunday afternoon around 4pm. The line was out the door but it was worth the wait. Their ingredients are hand crafted, and the quality is impeccable. 

My drink: 
I got the Coffee Milk tea with almond milk, 25% sweetness and boba. And it was perfection. 

Ambiance: 
Fresh white paint and earthy tones give this environment an openness (which is needed because it&#39;s small). It was a bit warm inside but with the door open and the large windows, it helped minimized the stuffiness. 

My experience: 
I met the manager while ubering (she was my rider) and she was sweet as pie!! Her staff were very customer-oriented, conscientious, and professional. All in all, I&#39;d go back again.<p>
    </div>

            <div itemprop="review" itemscope itemtype="http://schema.org/Review">
        <meta itemprop="author" content="Michelle T.">
        <div itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
            <meta itemprop="ratingValue" content="4.0">
        </div>
        <meta itemprop="datePublished" content="2016-08-23">
        <p itemprop="description">I love me some boba. Always. And after seeing soOooOO many photos on social media, I knew I had to try it when I visited SF. 

I went here twice. I was THAT obsessed. The store itself is quite small and only offers a bar-countertop with just 4 stools available for seating. So if you plan to sit around to do do any work, this is not the place to do that. The line can get long and extend outside, but it does move pretty quick. 

[[Iced Matcha Latte with Boba]] Lately, I have been obsessed with anything matcha, so this drink was definitely calling my name. The matcha was smooth, bold, and not chalky. I absolutely hate it when matcha drinks are chalky. Yuck! The boba was soft and chewy; a little sweet, but not too bland either. Add-ons are an extra 50 cents, but so worth it! 

The first time I went, I didn&#39;t have them change the sweetness level and kept it at 100%. Now I am one to usually take my drinks pretty sweet. But this was just way too sweet. So the 2nd time I went, I had them knock it down to 75% and it was a little better. The next time I go, I think I&#39;ll do 50% sweetness.

You can choose from regular milk, almond, or soy milk you won&#39;t get charged extra! Sweet! 

It is a bit pricey here. If I remember correctly it was around $5 for the 24 oz. However, the pricing is reflected in the quality ingredients, so it&#39;s definitely worth it.

My first time here, I drove, so I was lucky enough to find a spot (metered, of course) within a 5 minute walking distance. The second time, I Uber-ed it so no need to pay for parking, yay!

I am hoping that Boba Guys will one day open in Orange County because I will be all over that shiz.<p>
    </div>

            <div itemprop="review" itemscope itemtype="http://schema.org/Review">
        <meta itemprop="author" content="Patricia Z.">
        <div itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
            <meta itemprop="ratingValue" content="4.0">
        </div>
        <meta itemprop="datePublished" content="2016-08-19">
        <p itemprop="description">Good stuff.

A few of my friends and I were itching for boba, so we stopped by Boba Guys on a Sunday afternoon. There was a short line, probably about 10 minutes or so. I ordered the Iced Matcha Latte with almond milk (at no additional charge, pretty neat) and quite enjoyed it. The matcha flavor is bold and full-bodied, but not too overpowering over the almond milk. The honey came through very nicely and was a tasty, untraditional touch. A bit pricey, but that&#39;s definitely reflected in the quality ingredients. Would come back.<p>
    </div>

            <div itemprop="review" itemscope itemtype="http://schema.org/Review">
        <meta itemprop="author" content="Hurjane V.">
        <div itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
            <meta itemprop="ratingValue" content="2.0">
        </div>
        <meta itemprop="datePublished" content="2016-08-08">
        <p itemprop="description">ERRR. Not worth the hype, TBH. 

Waited in line for around 20 minutes and was super excited since everyone seemed to be enjoying their drinks. 

We ordered:
-1 16 oz. iced Jasmine Milk Tea without toppings, organic milk, 25% sugar // Asked for no ice, still got ice. Jasmine tea flavor is super faint- overpowered by milk (at least 2/3 of the cup was milk instead). Also, organic milk tasted more like soymilk since it wasn&#39;t rich or creamy at all....a 1/5 drink.

-1 16 oz. iced HK Style Milk Tea with pearls, organic milk, 50% sugar // Condensed milk overkill- can&#39;t imagine what it would be if it was 100% sweetness! There was barely any boba and the boba was too stiff- not soft at all. It says &#34;blended with condensed milk&#34;...felt like I was eating straight out of the jar myself.

Pros:
+Fast service. Waited in line for 20 minutes, ordered in 1 minute, got the drink in 2 minutes. 
+Cute concept. Cute ant-eater, crisp interior. Good selection of basics on the menu!

Cons:
-Meh service. Lady looked piss the whole time...good thing I didn&#39;t tip. 
-Pricey. $8 for two drinks? I would rather spend my $8 on a cream tart at Tartine&#39;s. 

Tips/Observations:
-Why don&#39;t they have a stamp card system? Not that I would want one..but I&#39;m sure there are die-hard fans here. 
-Small space. Definitely grab and go unless you manage to steal a spot by the window. 
-What is their signature drink here? 

Overall, not impressed. They can&#39;t even get the basic teas right....not even sure what more to expect.

Nice try, Boba Guys. May attempt to get it again at a different location...and try their swirly pink drink.<p>
    </div>

            <div itemprop="review" itemscope itemtype="http://schema.org/Review">
        <meta itemprop="author" content="Anna H.">
        <div itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
            <meta itemprop="ratingValue" content="2.0">
        </div>
        <meta itemprop="datePublished" content="2016-08-14">
        <p itemprop="description">This is my second time at Boba Guys. The first time, I got the matcha latte with pearls. I didn&#39;t enjoy it too much, but that&#39;s probably because I don&#39;t like matcha very much. 

This time around, I got the HK-style tea with pearls at 50% sweetness. I was pretty unimpressed. I didn&#39;t taste any of the condensed milk, which was also why I lowered the sweetness. I spent $4.25 for a regular-sized drink that, in my opinion, did not taste unique at all. Lines were also insane and parking impossible. However, drinks came out very quickly once we placed our orders.

I had a taste of the horchata tea and it didn&#39;t seem too special either. I prefer real horchata that costs a fraction of the price! I don&#39;t think I&#39;ll be back - I&#39;ve effectively tasted three of their most popular drinks and have been dissatisfied with all of them.<p>
    </div>

            <div itemprop="review" itemscope itemtype="http://schema.org/Review">
        <meta itemprop="author" content="Hayley D.">
        <div itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
            <meta itemprop="ratingValue" content="5.0">
        </div>
        <meta itemprop="datePublished" content="2016-11-09">
        <p itemprop="description">Every time I come here it&#39;s so so good. This time I got a jasmine milk tea, 50% sweetness, with boba. 

Staff was super nice, and my tea was ready super quick. Coming on the weekday is the way to go -- no line at all. On the weekends it takes around 30 min in line.<p>
    </div>

            <div itemprop="review" itemscope itemtype="http://schema.org/Review">
        <meta itemprop="author" content="Nancy L.">
        <div itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
            <meta itemprop="ratingValue" content="5.0">
        </div>
        <meta itemprop="datePublished" content="2016-10-28">
        <p itemprop="description">The line for this one is definitely not as long as the one in Union Square. Also, I have an appreciation for the bigger store so that you have room to stand when you&#39;re waiting for your drink. 

Boba Guys drinks average between $4-5, which is a little more than I hope to pay, but it&#39;s for delicious good quality boba tea. They have a lot of options such as Hong Kong style milk tea, Hojicha and Matcha lattes.I&#39;ve heard great things about their Dirty Horchata, which I believe is Horchata with espresso on top. 

The ambience here is great, the staff are friendly and the decor is very clean and modern. Would highly recommend this one over the one in Union Square!<p>
    </div>

            <div itemprop="review" itemscope itemtype="http://schema.org/Review">
        <meta itemprop="author" content="Sarah C.">
        <div itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
            <meta itemprop="ratingValue" content="4.0">
        </div>
        <meta itemprop="datePublished" content="2016-11-27">
        <p itemprop="description">Boba guys are warming up to me. They always have a location where I am craving boba like in the Mission area. The line is kind of ridiculous and there are like no tables in many of the locations esp this one. I like how there is a good size menu but not overwhelming with 50 different boba drinks. You can basically customize your drink however you like (type of milk - almond, soy, regular, sugar level, ice level, size, and hot/cold.) I got a warm boba which satisfied my boba craving and also kept me warm on a cold day. A bit pricy but overall I would come back.<p>
    </div>

            <div itemprop="review" itemscope itemtype="http://schema.org/Review">
        <meta itemprop="author" content="Melanie T.">
        <div itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
            <meta itemprop="ratingValue" content="5.0">
        </div>
        <meta itemprop="datePublished" content="2016-10-09">
        <p itemprop="description">Boba guys like a lot of the stores on Valencia, has great ingredients like Strauss milk and grade A tea. You really get what you pay for! 

My favorites are the lychee milk tea, lavender-rose milk tea, and currently my most favorite Hojichaa (roasted milk tea). Yummm :). 

Their Belgium waffles are so good too, when you bite into them they have pieces of sugar crystals and it tastes supa buttery+sweet. 

It is a bit on the pricey side, but as I mentioned before, they have the best ingredients and you really can&#39;t complain if you want the best, right? 

Shout out to the tall Asian guy and the boba guys team, keep doing your thaang!!<p>
    </div>

            <div itemprop="review" itemscope itemtype="http://schema.org/Review">
        <meta itemprop="author" content="Ashley C.">
        <div itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
            <meta itemprop="ratingValue" content="5.0">
        </div>
        <meta itemprop="datePublished" content="2016-09-27">
        <p itemprop="description">I&#39;m sorry for not returning sooner, Boba Guys!! Make sure you check the specials listed next to the register, there are some really yummy options...I wanted them all! I decided on the Matchata - matcha plus horchata. It&#39;s really good, tastes a little more horchata than matcha but you can still taste all the flavors. I also tried a regular milk tea but the flavor is really strong, I like it! Not watery at all. I&#39;d definitely get either drink again but next time I&#39;ll have to go for that strawberry matcha!<p>
    </div>


    </div>

    </div>

    

    



    <div class="biz-page-header clearfix">
        <div class="biz-page-header-left claim-status">

            
    


    <div class="u-space-t1">
        <h1 class="biz-page-title embossed-text-white shortenough">
            Boba Guys
        </h1>
                        <span class="u-nowrap claim-status_teaser js-claim-status-hover">
            


    <img class="u-align-top u-space-r1" src="https://s3-media3.fl.yelpcdn.com/assets/2/www/img/f8262b35caef/claim_status/18x18_verified.png" srcset="https://s3-media1.fl.yelpcdn.com/assets/2/www/img/dc76cf997eb6/claim_status/18x18_verified@2x.png 2x" width="18">Claimed

    </span>

                    <div class="u-hidden js-claim-status-hover-content">
        <p class="u-space-b0">
            This business has been claimed by the owner or a representative.
                <a href="https://www.yelp-support.com/article/000032392?l=en_US" target="_blank">Learn more</a>
        </p>
    </div>



    </div>

    

    <div class="biz-main-info embossed-text-white">
            <div class="rating-info clearfix">
                        <div class="biz-rating biz-rating-very-large clearfix" >
                


    <div class="i-stars i-stars--large-4 rating-very-large" title="4.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="4.0 star rating">
    </div>


                    <span class="review-count rating-qualifier">
            924 reviews
    </span>

        </div>

                
    <div class="rating-details">
        <a href="javascript:;" class="chiclet-link chiclet-link--with-text show-tooltip js-rating-details">
            <span aria-hidden="true" style="width: 14px; height: 14px;" class="icon icon--14-histogram icon--size-14 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#14x14_histogram" />
    </svg>
</span>         Details
        <span class="offscreen">, Opens a popup</span>

            <span class="tooltip-wrapper">
                <span class="tooltip">Rating details</span>
            </span>
        </a>
    </div>

            </div>

        <div class="price-category">
                    <span class="bullet-after">
            
        <span class="business-attribute price-range">$</span>
        </span>
            <span class="category-str-list">
                    <a href="/c/sf/coffee">Coffee & Tea</a>,
                    <a href="/c/sf/bubbletea">Bubble Tea</a>
    </span>



                
    <a class="edit-category chiclet-link chiclet-link--with-text show-tooltip" data-pop-uri="/edit_category_popup/18TtLS_JtiS2OH30FLqNrw" data-ro-mode-action="edit categories" href="/biz_attribute?biz_id=18TtLS_JtiS2OH30FLqNrw">
        <span aria-hidden="true" style="width: 14px; height: 14px;" class="icon icon--14-pencil icon--size-14 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#14x14_pencil" />
    </svg>
</span>        Edit
        <span class="offscreen">, Opens a popup</span>

        <span class="tooltip-wrapper">
            <span class="tooltip">Edit categories</span>
        </span>
    </a>

        </div>
    </div>

            <script>
            (function() {
                var main = null;

                var main=function(c){var d=window.performance||window.mozPerformance||window.msPerformance||window.webkitPerformance;if(d){var a=d.mark||d.mozPerformance||d.msMark||d.webkitMark;var b=d.clearMarks||d.mozClearMarks||d.msClearMarks||d.webkitClearMarks;if(typeof a==="function"&&typeof b==="function"){b.call(d,c);a.call(d,c)}}};

                if (main === null) {
                    throw 'invalid inline script, missing main declaration.';
                }
                main("yelp_header_title");
            })();
    </script>
        </div>
        <div class="biz-page-header-right u-relative">
                <div class="biz-page-actions nowrap">



    <a class="ybtn ybtn--primary war-button" href="/writeareview/biz/18TtLS_JtiS2OH30FLqNrw?return_url=%2Fbiz%2F18TtLS_JtiS2OH30FLqNrw">
                <span aria-hidden="true" style="width: 24px; height: 24px;" class="icon icon--24-star icon--size-24 icon--currentColor u-space-r-half icon--fallback-inverted">
    <svg class="icon_svg">
        <use xlink:href="#24x24_star" />
    </svg>
</span>Write a Review
    </a>

        <span class="ybtn-group clearfix">

    <a class="ybtn ybtn--small add-photo-button" href="/biz_user_photos/18TtLS_JtiS2OH30FLqNrw/upload">
                <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-add-photo icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_add_photo" />
    </svg>
</span>
                Add Photo
    </a>

            



    <a class="ybtn ybtn--small share-icon js-business-send-to-friend" data-pop-uri="/send_to_friend/business/18TtLS_JtiS2OH30FLqNrw" data-ro-mode-action="share a business" href="/biz_share/18TtLS_JtiS2OH30FLqNrw">
                <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-share icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_share" />
    </svg>
</span>
                <span class="js-popup-link-text">Share</span>
                <span class="offscreen">, Opens a popup</span>
    </a>

            




    <a class="ybtn ybtn--small bookmark-button js-action-bar-bookmark-button not-bookmarked" data-bookmark-button-position="action-bar" data-ro-mode-action="add a bookmark" data-signup-object="biz_id:18TtLS_JtiS2OH30FLqNrw" href="/signup?return_url=%2Fbiz%2F18TtLS_JtiS2OH30FLqNrw">
                <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-bookmark icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_bookmark" />
    </svg>
</span>
                <span class="js-popup-link-text">Bookmark</span>
                <span class="offscreen">, Opens a popup</span>
    </a>
        </span>
    </div>
    <small class="u-absolute u-sticky-right">
        <span class="js-edit-bookmark-link u-pseudo-link" data-has-note="false">
        </span>
    </small>

        </div>
    </div>

    <div class="biz-page-subheader">
        <div class="mapbox-container">
                <div class="mapbox" data-lightbox-page-title="Directions - Boba Guys - Mission - San Francisco, CA" data-map-library="google">
            <div class="mapbox-map">
        <a href="/map/boba-guys-san-francisco-4" class="biz-map-directions">
                        <img alt="Map" height="135" src="https://maps.googleapis.com/maps/api/staticmap?scale=2&amp;center=37.759993%2C-122.421119&amp;language=None&amp;zoom=15&amp;markers=scale%3A2%7Cshadow%3Afalse%7Cicon%3Ahttps%3A%2F%2Fyelp-images.s3.amazonaws.com%2Fassets%2Fmap-markers%2Fannotation_64x86.png%7C37.759993%2C-122.421119&amp;client=gme-yelp&amp;sensor=false&amp;size=286x135&amp;signature=389nxLMVtVCIafQ8LWtiy4_lrVM=" width="286">


        </a>
        <div
            class="lightbox-map hidden"
            data-map-state="{&#34;overlay_width&#34;: 335, &#34;should_draw_checkbox&#34;: false, &#34;service_areas&#34;: [], &#34;library&#34;: &#34;google&#34;, &#34;zoom_control_position&#34;: &#34;top_right&#34;, &#34;market&#34;: null, &#34;mo_map_possible&#34;: true, &#34;center&#34;: {&#34;latitude&#34;: 37.7599926, &#34;longitude&#34;: -122.421119}, &#34;zoom&#34;: 15, &#34;markers&#34;: {&#34;directions_marker&#34;: {&#34;location&#34;: null, &#34;key&#34;: &#34;directions_marker&#34;, &#34;icon&#34;: {&#34;anchor_offset&#34;: [12, 32], &#34;active_uri&#34;: &#34;https://s3-media2.fl.yelpcdn.com/assets/2/www/img/7249ab345ac8/ico/yelp_map/directions_highlighted@2x.png&#34;, &#34;regular_uri&#34;: &#34;https://s3-media2.fl.yelpcdn.com/assets/2/www/img/79f63ebc20db/ico/yelp_map/directions@2x.png&#34;, &#34;scaled_size&#34;: [24, 32], &#34;active_origin&#34;: [0, 0], &#34;regular_origin&#34;: [0, 0], &#34;size&#34;: [24, 32]}}, &#34;starred_business&#34;: {&#34;url&#34;: &#34;/biz/boba-guys-san-francisco-4&#34;, &#34;location&#34;: {&#34;latitude&#34;: 37.7599926, &#34;longitude&#34;: -122.421119}, &#34;key&#34;: &#34;starred_business&#34;, &#34;hovercard_id&#34;: &#34;u3DMTvvyhIaqxDmzj-ENFg&#34;, &#34;resource_type&#34;: &#34;business&#34;, &#34;icon&#34;: {&#34;anchor_offset&#34;: [12, 32], &#34;active_uri&#34;: &#34;https://s3-media2.fl.yelpcdn.com/assets/2/www/img/63e0e17c0579/ico/yelp_map/annotation_star_highlighted@2x.png&#34;, &#34;regular_uri&#34;: &#34;https://s3-media2.fl.yelpcdn.com/assets/2/www/img/7ffd8e34c576/ico/yelp_map/annotation_star@2x.png&#34;, &#34;scaled_size&#34;: [24, 32], &#34;active_origin&#34;: [0, 0], &#34;regular_origin&#34;: [0, 0], &#34;size&#34;: [24, 32]}}, &#34;current_location&#34;: {&#34;location&#34;: null, &#34;key&#34;: &#34;current_location&#34;, &#34;icon&#34;: {&#34;anchor_offset&#34;: [14, 14], &#34;active_uri&#34;: &#34;https://s3-media3.fl.yelpcdn.com/assets/2/www/img/56b9eee3f027/ico/yelp_map/current_location_dot@2x.png&#34;, &#34;regular_uri&#34;: &#34;https://s3-media3.fl.yelpcdn.com/assets/2/www/img/56b9eee3f027/ico/yelp_map/current_location_dot@2x.png&#34;, &#34;scaled_size&#34;: [28, 28], &#34;active_origin&#34;: [0, 0], &#34;regular_origin&#34;: [0, 0], &#34;size&#34;: [28, 28]}}}, &#34;top_biz_bounds&#34;: null, &#34;hoods&#34;: [], &#34;scrollwheel_zoom&#34;: false}"
            data-business-id="18TtLS_JtiS2OH30FLqNrw"
            data-location-dropper-uri="/locations"
        >
                    <div class="map-wrapper">
        <div class="side-box">
            
    <div class="get-directions-box island">
        <div class="get-directions-content">
                <h3>Get directions</h3>
    <div class="contentbox">
        <form action="/map/boba-guys-san-francisco-4" method='GET' class="clearfix yform">
            <div class="section-header u-space-preventcollapse-block">    


        <div class="tab-nav-container">
            <ul class="tab-nav js-tab-nav tab-nav--full js-tab-nav--full">

                        <li class="tab-nav_item">
                                





    <a class="tab-link js-tab-link tab-link--nav js-tab-link--nav is-selected" data-tab-id="driving" href="javascript:;">
            <span aria-label="Driving" style="width: 24px; height: 24px;" class="icon icon--24-car icon--size-24 icon--currentColor is-active tab-link_icon js-tab-link_icon tab-link_icon-wrap">
    <svg class="icon_svg">
        <use xlink:href="#24x24_car" />
    </svg>
</span>
    </a>

                        </li>

                        <li class="tab-nav_item">
                                





    <a class="tab-link js-tab-link tab-link--nav js-tab-link--nav" data-tab-id="transit" href="javascript:;">
            <span aria-label="Public Transit" style="width: 24px; height: 24px;" class="icon icon--24-transit icon--size-24 icon--currentColor tab-link_icon js-tab-link_icon tab-link_icon-wrap">
    <svg class="icon_svg">
        <use xlink:href="#24x24_transit" />
    </svg>
</span>
    </a>

                        </li>

                        <li class="tab-nav_item">
                                





    <a class="tab-link js-tab-link tab-link--nav js-tab-link--nav" data-tab-id="walking" href="javascript:;">
            <span aria-label="Walking" style="width: 24px; height: 24px;" class="icon icon--24-walk icon--size-24 icon--currentColor tab-link_icon js-tab-link_icon tab-link_icon-wrap">
    <svg class="icon_svg">
        <use xlink:href="#24x24_walk" />
    </svg>
</span>
    </a>

                        </li>

                        <li class="tab-nav_item tab-nav_item--last">
                                





    <a class="tab-link js-tab-link tab-link--nav js-tab-link--nav" data-tab-id="cycling" href="javascript:;">
            <span aria-label="Cycling" style="width: 24px; height: 24px;" class="icon icon--24-bicycle icon--size-24 icon--currentColor tab-link_icon js-tab-link_icon tab-link_icon-wrap">
    <svg class="icon_svg">
        <use xlink:href="#24x24_bicycle" />
    </svg>
</span>
    </a>

                        </li>
            </ul>
        </div>

</div>
                <div class="js-starting-point u-space-b2">
        <a class="swapper pull-right read-more" href="javascript:;">Swap start/end points</a>
        <label>Start from</label>
        <div class="location">
            <div class="user-location nested-icon-label">
                <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-marker icon--size-18 icon--linked i">
    <svg class="icon_svg">
        <use xlink:href="#18x18_marker" />
    </svg>
</span>
                            <input autocomplete="off" id="js-dropper-text" name="location" type="text">


            </div>
        </div>
    </div>

                <div class="js-ending-point u-space-b2">
        <strong class="hidden">Start from</strong>
        <a class="swapper pull-right read-more hidden" href="javascript:;">Swap start/end points</a>
        <div class="location">
            <div class="business-location media-block">
                <div class="media-avatar">
                    <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-marker icon--size-18 icon--error">
    <svg class="icon_svg">
        <use xlink:href="#18x18_marker" />
    </svg>
</span>
                </div>
                <div class="media-story">
                    <div class="media-title">
                                    <a class="biz-name js-analytics-click" data-analytics-label="biz-name" href="/biz/boba-guys-san-francisco-4" data-hovercard-id="u3DMTvvyhIaqxDmzj-ENFg" ><span >Boba Guys</span></a>


                    </div>
                            <address>
        3491 19th St, San Francisco, CA 94110
    </address>

                </div>
            </div>
        </div>
    </div>

            <button type="submit" value="submit" class="ybtn ybtn--primary ybtn--small get-directions-button"><span>Get directions</span></button>
        </form>

        <h3 class="result-header hidden"></h3>
        <div class="textual-results"></div>
    </div>

        </div>

    </div>

        </div>

        <div class="yelp-map-container directions-map">
            <div class="engine-container"></div>
        </div>
    </div>


        </div>
    </div>

            <div class="mapbox-text">
        <ul>
            <li class="u-relative">
                <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-marker icon--size-18 u-absolute u-sticky-top">
    <svg class="icon_svg">
        <use xlink:href="#18x18_marker" />
    </svg>
</span>
                        <a href="/biz_attribute?biz_id=18TtLS_JtiS2OH30FLqNrw" class="link-more icon-wrapper mapbox-edit">
            <span aria-hidden="true" style="width: 14px; height: 14px;" class="icon icon--14-pencil icon--size-14 icon--linked u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#14x14_pencil" />
    </svg>
</span><span>Edit</span>
        </a>
    <div class="map-box-address u-space-l4">
            <strong class="street-address">
                            <address>
        3491 19th St<br>San Francisco, CA 94110
    </address>


            </strong>

                <span class="cross-streets">
            b/t Valencia St & Lexington St
        </span>
            <br>
                    <span class="neighborhood-str-list">
            Mission        </span>


    </div>

            </li>

                <li class="clearfix">
                    <div>
                        <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-directions icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_directions" />
    </svg>
</span>
                            <a href="/map/boba-guys-san-francisco-4" class="biz-directions">Get Directions</a>

                    </div>
                </li>

                <li>
                    <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-phone icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_phone" />
    </svg>
</span>
                    
    <span class="offscreen">Phone number</span>
    <span class="biz-phone">
        (415) 967-2622
    </span>

                </li>

                    <li>
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-speech icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_speech" />
    </svg>
</span>
                <a href="javascript:;" class="js-message-biz">
        Message the business

    </a>

    </li>


                <li>
                    <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-external-link icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_external_link" />
    </svg>
</span>    <span class="biz-website js-add-url-tagging">
        <span class="offscreen">Business website</span>
        <a href="/biz_redir?url=http%3A%2F%2Fwww.bobaguys.com&amp;website_link_type=website&amp;src_bizid=18TtLS_JtiS2OH30FLqNrw&amp;cachebuster=1480919123&amp;s=c778ca527f2e1bda90ec2ef6ffd33569975374d9f40d6df922bf45869987cb74" target="_blank" rel="noopener">bobaguys.com</a>
    </span>

                </li>

        </ul>
    </div>

    </div>

            

            <span itemscope class="hidden" itemtype="http://data-vocabulary.org/Breadcrumb">
                    <a href="/c/sf/food" itemprop="url">
                        <span itemprop="title">Food</span>
                    </a>


            <span itemscope itemprop="child" itemtype="http://data-vocabulary.org/Breadcrumb">
                    <a href="/c/sf/coffee" itemprop="url">
                        <span itemprop="title">Coffee & Tea</span>
                    </a>


        </span></span>

            <span itemscope class="hidden" itemtype="http://data-vocabulary.org/Breadcrumb">
                    <a href="/c/sf/food" itemprop="url">
                        <span itemprop="title">Food</span>
                    </a>


            <span itemscope itemprop="child" itemtype="http://data-vocabulary.org/Breadcrumb">
                    <a href="/c/sf/bubbletea" itemprop="url">
                        <span itemprop="title">Bubble Tea</span>
                    </a>


        </span></span>

        </div>
        <div class="showcase-container">
                

    <div class="showcase-container_inner showcase showcase-3-photo">

        <div class="top-shelf-grey"></div>

        <div class="showcase-footer-links">
            
        </div>



        <div class="lightbox-media-parent" data-ad-logging-csrf="d5914a75327491d026c1399caf993fa6fbc76f73485f25d094bb5df52f761a99" data-ad-logging-uri="/ad_acknowledgment" data-ga-path="media_lightbox/servlet:biz_details/type:biz" data-logging-csrf="4ac56838914c80cf7089cd149a39f5d6d938929e1ec91e2f42852d2116286e0c" data-logging-uri="/biz_photos/18TtLS_JtiS2OH30FLqNrw/log_views" data-media-count="1058" data-media-url="/biz_photos/get_media_slice/18TtLS_JtiS2OH30FLqNrw" data-starting-index="0">
            <div class="showcase-photos">
                        





    <div class="js-photo photo photo-1" data-ga-label="left_photo" data-media-id="HPrO3kgwbdc6iGYhnX1Tyw" data-media-index="1">
        <div class="showcase-photo-box">
                    <a href="/biz_photos/boba-guys-san-francisco-4?select=HPrO3kgwbdc6iGYhnX1Tyw">
            
                <img alt="Photo of Boba Guys - San Francisco, CA, United States" class="photo-box-img" height="250" src="https://s3-media4.fl.yelpcdn.com/bphoto/HPrO3kgwbdc6iGYhnX1Tyw/ls.jpg" width="250">


        </a>

        </div>


                    <div class="photo-box-overlay js-overlay">
                <div class="media-block photo-box-overlay_caption">
                        <div class="media-avatar avatar">
                    <div class="photo-box pb-30s" data-hovercard-id="DzjYnfWnoKR8FALQ2tdpVQ">
                <a href="/user_details?userid=w-_A9eGBECZ7qJMV0UQWbA" class="js-analytics-click" data-analytics-label="user-photo">
                <img alt="Boba G." class="photo-box-img" height="30" src="https://s3-media4.fl.yelpcdn.com/photo/0zKHXuyu5x6Uftn0Ct98Jg/30s.jpg" width="30">

        </a>

    </div>



    </div>

                        <div class="media-story">
            <a class="photo-desc" href="/biz_photos/boba-guys-san-francisco-4?select=HPrO3kgwbdc6iGYhnX1Tyw">
                Photo of Boba Guys - San Francisco, CA, United States
            </a>
        <span class="author">
                by         <a class="user-display-name" href="/user_details?userid=w-_A9eGBECZ7qJMV0UQWbA" data-hovercard-id="DzjYnfWnoKR8FALQ2tdpVQ">Boba G.</a>
        </span>
    </div>

                </div>
        </div>

    </div>

        





    <div class="js-photo photo photo-2" data-ga-label="middle_photo" data-media-id="FE1lCskaigmVupQGk86T4g" data-media-index="0">
        <div class="showcase-photo-box">
                    <a href="/biz_photos/boba-guys-san-francisco-4?select=FE1lCskaigmVupQGk86T4g">
            
                <img alt="Photo of Boba Guys - San Francisco, CA, United States" class="photo-box-img" height="250" src="https://s3-media2.fl.yelpcdn.com/bphoto/FE1lCskaigmVupQGk86T4g/ls.jpg" width="250">


        </a>

        </div>


                    <div class="photo-box-overlay js-overlay">
                <div class="media-block photo-box-overlay_caption">
                        <div class="media-avatar avatar">
                    <div class="photo-box pb-30s" data-hovercard-id="DzjYnfWnoKR8FALQ2tdpVQ">
                <a href="/user_details?userid=w-_A9eGBECZ7qJMV0UQWbA" class="js-analytics-click" data-analytics-label="user-photo">
                <img alt="Boba G." class="photo-box-img" height="30" src="https://s3-media4.fl.yelpcdn.com/photo/0zKHXuyu5x6Uftn0Ct98Jg/30s.jpg" width="30">

        </a>

    </div>



    </div>

                        <div class="media-story">
            <a class="photo-desc" href="/biz_photos/boba-guys-san-francisco-4?select=FE1lCskaigmVupQGk86T4g">
                Photo of Boba Guys - San Francisco, CA, United States
            </a>
        <span class="author">
                by         <a class="user-display-name" href="/user_details?userid=w-_A9eGBECZ7qJMV0UQWbA" data-hovercard-id="DzjYnfWnoKR8FALQ2tdpVQ">Boba G.</a>
        </span>
    </div>

                </div>
        </div>

    </div>

        





    <div class="js-photo photo photo-3 photo-grid" data-ga-label="right_photo" data-media-id="YiNxgOWNJ9Ti0Y4sXt7F_g" data-media-index="2">
        <div class="showcase-photo-box">
                    <a href="/biz_photos/boba-guys-san-francisco-4?select=YiNxgOWNJ9Ti0Y4sXt7F_g">
            
                <img alt="Photo of Boba Guys - San Francisco, CA, United States. Jasmine milk tea ftw" class="photo-box-img" height="250" src="https://s3-media2.fl.yelpcdn.com/bphoto/YiNxgOWNJ9Ti0Y4sXt7F_g/ls.jpg" width="250">


        </a>

                            <a href="/biz_photos/boba-guys-san-francisco-4?select=qrRTlcSXKlCmkWLr3A1Vpw">
            
                <img alt="Photo of Boba Guys - San Francisco, CA, United States" class="photo-box-img" height="180" src="https://s3-media1.fl.yelpcdn.com/bphoto/qrRTlcSXKlCmkWLr3A1Vpw/180s.jpg" width="180">


        </a>

                            <a href="/biz_photos/boba-guys-san-francisco-4?select=x1zLNS19x7KrPsZKVcqWJA">
            
                <img alt="Photo of Boba Guys - San Francisco, CA, United States" class="photo-box-img" height="180" src="https://s3-media3.fl.yelpcdn.com/bphoto/x1zLNS19x7KrPsZKVcqWJA/180s.jpg" width="180">


        </a>

                            <a href="/biz_photos/boba-guys-san-francisco-4?select=lKYVlejW-kznoUhu20pIZA">
            
                <img alt="Photo of Boba Guys - San Francisco, CA, United States" class="photo-box-img" height="180" src="https://s3-media4.fl.yelpcdn.com/bphoto/lKYVlejW-kznoUhu20pIZA/180s.jpg" width="180">


        </a>

        </div>


                <a class="see-more show-all-overlay" href="/biz_photos/boba-guys-san-francisco-4">
        <span aria-hidden="true" style="width: 24px; height: 24px;" class="icon icon--24-grid icon--size-24 icon--inverse icon--fallback-inverted show-all-overlay_icon">
    <svg class="icon_svg">
        <use xlink:href="#24x24_grid" />
    </svg>
</span>
        See all 1058
    </a>

    </div>


            </div>
        </div>

    </div>

        </div>
    </div>

        </div>
    </div>

                <div id="super-container" class="content-container">

    <div class="container">
    <div class="clearfix layout-block layout-a layout-border ysection js-position-with-scroll-container position-with-scroll-container layout--biz-details">
    <div class="column column-alpha main-section">

                
                    <div class="review-highlights">
        <div class="review-highlights-content">
                <ul class="review-highlights-list">
                    <li class="media-block media-block--12 review-highlight">
        <div class="media-avatar highlight-photo">
                    <div class="photo-box pb-60s">
                <a href="/biz_photos/boba-guys-san-francisco-4?select=YiNxgOWNJ9Ti0Y4sXt7F_g" >
                <img alt="" class="photo-box-img" height="60" src="https://s3-media4.fl.yelpcdn.com/bphoto/YiNxgOWNJ9Ti0Y4sXt7F_g/60s.jpg" width="60">

        </a>

    </div>


        </div>
        <div class="media-story">
            

    <p class="quote">
            “<a class="ngram" href="https://www.yelp.com/biz/boba-guys-san-francisco-4?hrid=sVoGEc6KHohKq6YME6spxQ&rh_ident=jasmine&rh_type=menu">Jasmine</a> Milk Tea - Almond Jelly
  - If you&#39;re feeling more festive, go for this drink as it will be more tea for your buck.” <a class="quote-source" href="https://www.yelp.com/biz/boba-guys-san-francisco-4?hrid=sVoGEc6KHohKq6YME6spxQ&amp;rh_ident=jasmine&amp;rh_type=menu">in 193 reviews</a>
    </p>

            
            <p class='highlight-sub-info'>
        <a href="/menu/boba-guys-san-francisco-4/item/jasmine">
            $3.50 Jasmine
        </a>
    </p>


        </div>
    </li>

                    <li class="media-block media-block--12 review-highlight">
        <div class="media-avatar highlight-photo">
                    <div class="photo-box pb-60s">
                <a href="/biz_photos/boba-guys-san-francisco-4?select=vGvwDpbUCCeKEyKox-iKlg" >
                <img alt="" class="photo-box-img" height="60" src="https://s3-media1.fl.yelpcdn.com/bphoto/vGvwDpbUCCeKEyKox-iKlg/60s.jpg" width="60">

        </a>

    </div>


        </div>
        <div class="media-story">
            

    <p class="quote">
            “Favorites are the Indian Chai with Almond Jelly and Tapioca and Black Milk Tea, and the Matcha Almond Latte (or <a class="ngram" href="https://www.yelp.com/biz/boba-guys-san-francisco-4?hrid=gQvPaE8w_BXNv79nC5IW8Q&rh_ident=matcha&rh_type=phrase">Matcha</a> Strawberry).” <a class="quote-source" href="https://www.yelp.com/biz/boba-guys-san-francisco-4?hrid=gQvPaE8w_BXNv79nC5IW8Q&amp;rh_ident=matcha&amp;rh_type=phrase">in 58 reviews</a>
    </p>

            
        </div>
    </li>

                    <li class="media-block media-block--12 review-highlight">
        <div class="media-avatar highlight-photo">
                    <div class="photo-box pb-60s" data-hovercard-id="V3Sn6eqSiH9xbo5Cv2Ihug">
                <a href="/user_details?userid=fj5HMXFNDvOG9dKmkymcqg" >
                <img alt="Candice C." class="photo-box-img" height="60" src="https://s3-media1.fl.yelpcdn.com/photo/wQrRwUDJ8-8NaIHbdXtP_g/60s.jpg" width="60">

        </a>

    </div>


        </div>
        <div class="media-story">
            

    <p class="quote">
            “Flavors: Enjoyed hot bergamot milk tea and on another occasion the HK milk tea with option to adjust <a class="ngram" href="https://www.yelp.com/biz/boba-guys-san-francisco-4?hrid=9nY1fon22ZLqywjwXldwcw&rh_ident=sweetness_level&rh_type=phrase">sweetness level</a>.” <a class="quote-source" href="https://www.yelp.com/biz/boba-guys-san-francisco-4?hrid=9nY1fon22ZLqywjwXldwcw&amp;rh_ident=sweetness_level&amp;rh_type=phrase">in 28 reviews</a>
    </p>

            
        </div>
    </li>

        </ul>
        <script>
            (function() {
                var main = null;

                var main=function(c){var d=window.performance||window.mozPerformance||window.msPerformance||window.webkitPerformance;if(d){var a=d.mark||d.mozPerformance||d.msMark||d.webkitMark;var b=d.clearMarks||d.mozClearMarks||d.msClearMarks||d.webkitClearMarks;if(typeof a==="function"&&typeof b==="function"){b.call(d,c);a.call(d,c)}}};

                if (main === null) {
                    throw 'invalid inline script, missing main declaration.';
                }
                main("yelp_review_highlights");
            })();
    </script>
        <div class="review-highlight-action">
            <a class='show-more-url' href="https://www.yelp.com/biz/boba-guys-san-francisco-4?rh_count=8&amp;rh_start=0">Show more review highlights</a>
        </div>

        </div>
    </div>


                    <div class="media-details js-media-details js-media-details-template hidden">
        <div class="media-details_container media-details_container--embed media-details_container--with-sidebar">
            <div class="media-container js-media-container"></div>
            <div class="media-nav js-media-nav"></div>
        </div>
    </div>



    <script>                        window.addEventListener("message", receiveMessage, false);

                        function receiveMessage(event) {
                            if (event.data == "adsense-fallback") {
                                document.getElementsByClassName('adsbygoogle')[0].style.display = "none";
                            }
                        }
</script>

                    <script async="true" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js" type="text/javascript"></script>
                    <div class="adsense-iframe-wrap">
                        <ins class="adsbygoogle u-space-b4"
                            style="display:inline-block;max-width:630px;width:100%;height:112px"
                            data-ad-client="ca-pub-1554273207255362"
                            data-ad-slot="9678474674"></ins>
                    </div>
                    <script>
            (function() {
                var main = null;

                var main=function(){if(!!window.yDFP&&!!window.yDFP.ABP&&!!window.yDFP.ABP.detect){var a;var b=function(e){var c="1382551876";var d="2859285073";a=e?c:d};window.yDFP.ABP.detect(b);(adsbygoogle=window.adsbygoogle||[]).push({params:{google_ad_channel:a}})}else{(adsbygoogle=window.adsbygoogle||[]).push({})}};

                if (main === null) {
                    throw 'invalid inline script, missing main declaration.';
                }
                main();
            })();
    </script>

                

                <div >
                        <div class="feed">
            <div class="feed_header">
                <div class="section-header">
                <h2>Recommended Reviews <b>for Boba Guys</b></h2>

            <div class="u-space-b1">
                    <div class="feed_trust-banner">
        <div class="arrange arrange--12 arrange--middle">
            <div class="arrange_unit">
                <span aria-hidden="true" style="fill: #c41200; width: 24px; height: 24px;" class="icon icon--24-yelp icon--size-24">
    <svg class="icon_svg">
        <use xlink:href="#24x24_yelp" />
    </svg>
</span>
            </div>
            <div class="arrange_unit arrange_unit--fill">
                <span class="legal-copy">
                    <b>Your trust is our top concern,</b> so businesses can't pay to alter or remove their reviews. <a href="/advertiser_faq">Learn more.</a>
                </span>
            </div>
            <div class="arrange_unit">
                <span class="dismiss-link js-dismiss-trust-banner" role="button" aria-label="Close">
                    &times;
                </span>
            </div>
        </div>
    </div>

            </div>
        <div class="feed_filters">
            <div class="section-header_block u-space-0">
                <div class="arrange arrange--middle u-space-b1">
                        <div class="arrange_unit arrange_unit--fill feed_search">
                            <div class="section-header_search u-space-r5">
                                    <form class="yform yform--continuous arrange" name="q" action="https://www.yelp.com/biz/boba-guys-san-francisco-4" method="GET">
            <label for="q" class="offscreen">Search within the reviews</label>
    <div class="arrange_unit arrange_unit--fill">
        <input type="text" placeholder="Search within the reviews" name="q" value="" autocomplete="on" >
    </div>
    <div class="arrange_unit">
        <button type="submit" value="submit" class="ybtn ybtn--primary ybtn--small"><span><span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-search-small icon--size-18 icon--inverse icon--fallback-inverted">
    <svg class="icon_svg">
        <use xlink:href="#18x18_search_small" />
    </svg>
</span></span></button>
    </div>

    </form>

                            </div>
                        </div>
                        <div class="arrange_unit u-nowrap">
                            <div class="feed_sort js-review-feed-sort">
                                

    <div class="dropdown js-dropdown dropdown--tab dropdown--arrow dropdown--hover dropdown--restricted">
        

    <div class="dropdown_toggle js-dropdown-toggle" aria-haspopup="true" role="button" tabindex="-1">
        <a
            class="dropdown_toggle-action"
                href="javascript:;"
                data-dropdown-prefix="Sort by"
        >
            <span class="dropdown_toggle-text js-dropdown-toggle-text" data-dropdown-initial-text="Yelp Sort">Yelp Sort</span>
            <span aria-hidden="true" style="width: 14px; height: 14px;" class="icon icon--14-triangle-down icon--size-14 icon--currentColor u-triangle-direction-down dropdown_arrow">
    <svg class="icon_svg">
        <use xlink:href="#14x14_triangle_down" />
    </svg>
</span>
        </a>
    </div>

            <div class="dropdown_menu js-dropdown-menu">
        <div class="dropdown_menu-inner">
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                            





    <a class="tab-link js-dropdown-link tab-link--dropdown js-tab-link--dropdown is-selected" data-sort="relevance" href="https://www.yelp.com/biz/boba-guys-san-francisco-4?sort_by=relevance_desc&amp;start=0">
            <span class="tab-link_label" title="Yelp Sort">Yelp Sort</span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                            





    <a class="tab-link js-dropdown-link tab-link--dropdown js-tab-link--dropdown" data-order_by="desc" data-sort="date" href="https://www.yelp.com/biz/boba-guys-san-francisco-4?sort_by=date_desc&amp;start=0">
            <span class="tab-link_label" title="Newest First">Newest First</span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                            





    <a class="tab-link js-dropdown-link tab-link--dropdown js-tab-link--dropdown" data-order_by="asc" data-sort="date" href="https://www.yelp.com/biz/boba-guys-san-francisco-4?sort_by=date_asc&amp;start=0">
            <span class="tab-link_label" title="Oldest First">Oldest First</span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                            





    <a class="tab-link js-dropdown-link tab-link--dropdown js-tab-link--dropdown" data-order_by="desc" data-sort="rating" href="https://www.yelp.com/biz/boba-guys-san-francisco-4?sort_by=rating_desc&amp;start=0">
            <span class="tab-link_label" title="Highest Rated">Highest Rated</span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                            





    <a class="tab-link js-dropdown-link tab-link--dropdown js-tab-link--dropdown" data-order_by="asc" data-sort="rating" href="https://www.yelp.com/biz/boba-guys-san-francisco-4?sort_by=rating_asc&amp;start=0">
            <span class="tab-link_label" title="Lowest Rated">Lowest Rated</span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                            





    <span class="tab-link tab-link--dropdown" data-sort="elites">
            <span class="tab-link_label" title="Elites">Elites</span>
    </span>

                        </li>
                </ul>
        </div>
    </div>

    </div>

                            </div>
                        </div>
                        <div class="arrange_unit u-nowrap feed_language js-review-feed-language dropdown--right">
                                


        <div class="tab-nav-container">
            <ul class="tab-nav js-tab-nav">

                        <li class="tab-nav_item tab-nav_item--last">
                                

    <div class="dropdown js-dropdown dropdown--tab dropdown--arrow dropdown--hover dropdown--restricted">
        

    <div class="dropdown_toggle js-dropdown-toggle" aria-haspopup="true" role="button" tabindex="-1">
        <a
            class="dropdown_toggle-action"
                href="javascript:;"
                data-dropdown-prefix="Language"
        >
            <span class="dropdown_toggle-text js-dropdown-toggle-text" data-dropdown-initial-text="English (924)">English (924)</span>
            <span aria-hidden="true" style="width: 14px; height: 14px;" class="icon icon--14-triangle-down icon--size-14 icon--currentColor u-triangle-direction-down dropdown_arrow">
    <svg class="icon_svg">
        <use xlink:href="#14x14_triangle_down" />
    </svg>
</span>
        </a>
    </div>

            <div class="dropdown_menu js-dropdown-menu">
        <div class="dropdown_menu-inner">
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                            





    <span class="tab-link tab-link--dropdown is-selected" data-lang="en">
            <span class="tab-link_label" title="English">English</span>
            <span class="tab-link_count" title="(924)">(924)</span>
    </span>

                        </li>
                </ul>
        </div>
    </div>

    </div>

                        </li>
            </ul>
        </div>


                        </div>
                </div>
            </div>
        </div>
    </div>

    </div>

        <div class="review-list">
                <ul class="ylist ylist-bordered reviews">
                <li>
                    <div class="js-war-widget war-widget--compose review review--with-sidebar">
            <div class="review-sidebar">
        <div class="review-sidebar-content">
                <img src="https://s3-media4.fl.yelpcdn.com/assets/2/www/img/b5b7ea174ecb/writeareview/empty_profile.png" srcset="https://s3-media2.fl.yelpcdn.com/assets/2/www/img/0a027d2e0fcf/writeareview/empty_profile@2x.png 2x" width="148"
                    height="68" width="148">
        </div>
    </div>


        <div class='review-wrapper'>
            <div class="island clearfix u-text-centered">
                <div class="u-border-bottom u-space-b2 war-widget_stars--top">
                            <fieldset class="star-selector js-star-selector u-space-b2" data-war-url="/writeareview/biz/18TtLS_JtiS2OH30FLqNrw?return_url=%2Fbiz%2F18TtLS_JtiS2OH30FLqNrw" data-original-rating="0">
        <legend class="star-selector_legend offscreen">Rating</legend>
                <ul class="star-selector_stars i-selector-stars i-selector-stars--extra-large-0 js-star-selector_stars">
                        <li class="star-selector_star js-star-selector_star show-tooltip" data-description="Eek! Methinks not.">
                            <input class="star-selector_input js-star-selector_input" id="rating-1" name="rating" type="radio" value="1">
                        </li>
                        <li class="star-selector_star js-star-selector_star show-tooltip" data-description="Meh. I've experienced better.">
                            <input class="star-selector_input js-star-selector_input" id="rating-2" name="rating" type="radio" value="2">
                        </li>
                        <li class="star-selector_star js-star-selector_star show-tooltip" data-description="A-OK.">
                            <input class="star-selector_input js-star-selector_input" id="rating-3" name="rating" type="radio" value="3">
                        </li>
                        <li class="star-selector_star js-star-selector_star show-tooltip" data-description="Yay! I'm a fan.">
                            <input class="star-selector_input js-star-selector_input" id="rating-4" name="rating" type="radio" value="4">
                        </li>
                        <li class="star-selector_star js-star-selector_star show-tooltip star-selector_star--last" data-description="Woohoo! As good as it gets!">
                            <input class="star-selector_input js-star-selector_input" id="rating-5" name="rating" type="radio" value="5">
                        </li>
                </ul>

    </fieldset>


                </div>
                <a class="js-war-text-link" href="/writeareview/biz/18TtLS_JtiS2OH30FLqNrw?return_url=%2Fbiz%2F18TtLS_JtiS2OH30FLqNrw">
                    Start your review of <strong>Boba Guys</strong>.
                </a>
            </div>
        </div>
    </div>


    </li>


                    <li >
                <div class="review review--with-sidebar" data-review-id="44FpUT_Mx3ry-efRjwQnEw" data-signup-object="user_id:zGvKyfU1JxmPDeqYf3CfAQ">
            <div class="review-sidebar">
        <div class="review-sidebar-content">
                <div class="ypassport media-block">
        <div class="media-avatar responsive-photo-box">
                        <div class="photo-box pb-60s" data-hovercard-id="PoJuQtSMA1MXq3XMFow87Q">
                <a href="/user_details?userid=zGvKyfU1JxmPDeqYf3CfAQ" class="js-analytics-click" data-analytics-label="user-photo">
                <img alt="Calvin T." class="photo-box-img" height="60" src="https://s3-media4.fl.yelpcdn.com/photo/zixol5QYeLO63xfeupKssg/60s.jpg" width="60">

        </a>

    </div>



        </div>
        <div class="media-story">
                <ul class="user-passport-info">
        <li class="user-name">
                    <a class="user-display-name" href="/user_details?userid=zGvKyfU1JxmPDeqYf3CfAQ" data-hovercard-id="PoJuQtSMA1MXq3XMFow87Q">Calvin T.</a>
        </li>
        <li class="user-location responsive-hidden-small">
            <b>Berkeley, CA</b>
        </li>
    </ul>

            

    <ul class="user-passport-stats">
        <li class="friend-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-friends icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_friends" />
    </svg>
</span>
            <b>326</b> friends
        </li>
        <li class="review-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-review icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_review" />
    </svg>
</span>
            <b>8</b> reviews
        </li>
        
    </ul>

        </div>
    </div>

                    <ul class="action-link-list action-link-list--small">
        
        <li>
            


    <a class="arrange arrange--middle send-to-friend" data-pop-uri="/send_to_friend/review/44FpUT_Mx3ry-efRjwQnEw" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-share icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_share" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Share review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle embed-review" data-pop-uri="/review_embed_modal/44FpUT_Mx3ry-efRjwQnEw" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-embed icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_embed" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Embed review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-compliment" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-compliment icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_compliment" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Compliment
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-pm" href="javascript:;" rel="Calvin T.">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-speech icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_speech" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Send message
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-add" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="zGvKyfU1JxmPDeqYf3CfAQ">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-following icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_following" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Follow Calvin T.
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-remove hidden" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="zGvKyfU1JxmPDeqYf3CfAQ">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-unfollow icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_unfollow" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Stop following Calvin T.
        </div>
    </a>

        </li>


    </ul>

        </div>
    </div>

        <div class="review-wrapper">
                <div class="review-content">
            <div class="biz-rating biz-rating-large clearfix">
        <div >
                    


    <div class="i-stars i-stars--regular-4 rating-large" title="4.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="4.0 star rating">
    </div>



        </div>
            <span class="rating-qualifier">
        11/28/2016
    </span>

    </div>

                        <ul class="review-tags">
                <li class="review-tags_item">

        <span >
            <span aria-hidden="true" style="fill: #0077bc; width: 18px; height: 18px;" class="icon icon--18-check-in icon--size-18 u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_check_in" />
    </svg>
</span>1 check-in
        </span>
    </li>

    </ul>


                <p lang="en">This is one of the most popular boba spots in the Bay Area. I was pleased with the quality of my drink, but I don&#39;t think it&#39;s something I&#39;d go out of my way for. For the price point and wait time, it was a great experience, but not a must-have.<br><br>I went to this location on Black Friday (2016). To our surprise, the line was already out of the door. It&#39;s a very small shop and the wait took some time. I got to the front of the line and ordered my drink. The workers were very nice and went through orders very quickly. I personally don&#39;t like spending more than $5 for boba, but for the one time, I was definitely willing, especially with all of the hype surrounding the shop.<br><br>The wait time for the actual drink wasn&#39;t too long. I ordered the Muscat Oolong milk tea with boba. The taste was definitely interesting and worth the wait. It felt very authentic and flavorful. The only thing that disappointed me was the small size of the drink for the price. However, I left feeling pleased.<br><br>There&#39;s a ton of hype surrounding boba guys and it is well deserved. However, if you&#39;re like me and love boba all over the Bay Area, this isn&#39;t anything to go out of your way for. The price point brings it down a little bit, in my opinion, but in many ways, you get what you pay for. I would highly suggest Boba Guys to any first timer or SF tourist.</p> 
            
    </div>
    <div class="review-footer clearfix">
                    <div class="rateReview voting-feedback" data-review-id="44FpUT_Mx3ry-efRjwQnEw">
                    <p class="voting-intro voting-prompt">
        Was this review &hellip;?
    </p>
    <ul class="voting-buttons" data-csrf-token="c5f44b4ca2649aeb4492d827a797d61476922eef4584ff73370a63d021703fa8">
            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small useful js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="useful">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-useful-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_useful_outline" />
    </svg>
</span>    <span class="vote-type">Useful</span>
    <span class="count"></span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small funny js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="funny">
            <span aria-hidden="true" style="fill: #41a700; width: 18px; height: 18px;" class="icon icon--18-funny-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_funny_outline" />
    </svg>
</span>    <span class="vote-type">Funny</span>
    <span class="count"></span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small cool js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="cool">
            <span aria-hidden="true" style="fill: #0097ec; width: 18px; height: 18px;" class="icon icon--18-cool-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_cool_outline" />
    </svg>
</span>    <span class="vote-type">Cool</span>
    <span class="count"></span>
    </a>
    </li>

    </ul>

        </div>

    </div>
    
    

        </div>
    </div>

        </li>
        <li >
                <div class="review review--with-sidebar" data-review-id="RZfe2zhyIkpkiHVw21_DlA" data-signup-object="user_id:16bvuXvClT-bEsiaJerjug">
            <div class="review-sidebar">
        <div class="review-sidebar-content">
                <div class="ypassport media-block">
        <div class="media-avatar responsive-photo-box">
                        <div class="photo-box pb-60s" data-hovercard-id="-Pd4BRYFHhyQoA9g7she6w">
                <a href="/user_details?userid=16bvuXvClT-bEsiaJerjug" class="js-analytics-click" data-analytics-label="user-photo">
                <img alt="Wendy T." class="photo-box-img" height="60" src="https://s3-media2.fl.yelpcdn.com/photo/HkECcdDknwErrlEadRNqYQ/60s.jpg" width="60">

        </a>

    </div>



        </div>
        <div class="media-story">
                <ul class="user-passport-info">
        <li class="user-name">
                    <a class="user-display-name" href="/user_details?userid=16bvuXvClT-bEsiaJerjug" data-hovercard-id="-Pd4BRYFHhyQoA9g7she6w">Wendy T.</a>
        </li>
        <li class="user-location responsive-hidden-small">
            <b>San Francisco, CA</b>
        </li>
    </ul>

            

    <ul class="user-passport-stats">
        <li class="friend-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-friends icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_friends" />
    </svg>
</span>
            <b>21</b> friends
        </li>
        <li class="review-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-review icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_review" />
    </svg>
</span>
            <b>62</b> reviews
        </li>
        
    </ul>

        </div>
    </div>

                    <ul class="action-link-list action-link-list--small">
        
        <li>
            


    <a class="arrange arrange--middle send-to-friend" data-pop-uri="/send_to_friend/review/RZfe2zhyIkpkiHVw21_DlA" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-share icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_share" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Share review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle embed-review" data-pop-uri="/review_embed_modal/RZfe2zhyIkpkiHVw21_DlA" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-embed icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_embed" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Embed review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-compliment" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-compliment icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_compliment" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Compliment
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-pm" href="javascript:;" rel="Wendy T.">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-speech icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_speech" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Send message
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-add" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="16bvuXvClT-bEsiaJerjug">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-following icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_following" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Follow Wendy T.
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-remove hidden" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="16bvuXvClT-bEsiaJerjug">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-unfollow icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_unfollow" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Stop following Wendy T.
        </div>
    </a>

        </li>


    </ul>

        </div>
    </div>

        <div class="review-wrapper">
                <div class="review-content">
            <div class="biz-rating biz-rating-large clearfix">
        <div >
                    


    <div class="i-stars i-stars--regular-5 rating-large" title="5.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="5.0 star rating">
    </div>



        </div>
            <span class="rating-qualifier">
        11/27/2016
    </span>

    </div>

                        <ul class="review-tags">
                <li class="review-tags_item">

        <span >
            <span aria-hidden="true" style="fill: #0077bc; width: 18px; height: 18px;" class="icon icon--18-check-in icon--size-18 u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_check_in" />
    </svg>
</span>1 check-in
        </span>
    </li>

    </ul>


                <p lang="en">This boba place is absolutely my favorite spot in the city. Every single location of Boba Guys has quality drinks, so it doesn&#39;t matter where I&#39;m at in the city. If i crave boba, I can rely on Boba Guys just about anywhere and everywhere with that A1 drink. <br><br>There&#39;s something so unique about the boba, either the chewiness or the taste. You can&#39;t really find the same balls anywhere else. It&#39;s definitely Grade A balls just like they say. <br><br>There is also a variety of tea and choices. Every single one of them is so natural that even when I intake 16 oz. of sugary liquid, I can still feel healthy. So, seriously, choose anything that you want on that menu, and I can promise you that it&#39;ll taste delicious and natural. The tea taste is definitely there, and that&#39;s how I know that their drinks are definitely all natural. <br><br>Oh, I also forgot to mention somewhere above that they give different options of milk! I always get soy because my stomach can&#39;t really tolerate dairy. So, if you&#39;re lactose and tolerant, don&#39;t be afraid to drink milk tea because Boba Guys can accommodate your needs.</p> 
            
    </div>
    <div class="review-footer clearfix">
                    <div class="rateReview voting-feedback" data-review-id="RZfe2zhyIkpkiHVw21_DlA">
                    <p class="voting-intro voting-prompt">
        Was this review &hellip;?
    </p>
    <ul class="voting-buttons" data-csrf-token="c5f44b4ca2649aeb4492d827a797d61476922eef4584ff73370a63d021703fa8">
            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small useful js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="useful">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-useful-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_useful_outline" />
    </svg>
</span>    <span class="vote-type">Useful</span>
    <span class="count"></span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small funny js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="funny">
            <span aria-hidden="true" style="fill: #41a700; width: 18px; height: 18px;" class="icon icon--18-funny-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_funny_outline" />
    </svg>
</span>    <span class="vote-type">Funny</span>
    <span class="count"></span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small cool js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="cool">
            <span aria-hidden="true" style="fill: #0097ec; width: 18px; height: 18px;" class="icon icon--18-cool-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_cool_outline" />
    </svg>
</span>    <span class="vote-type">Cool</span>
    <span class="count"></span>
    </a>
    </li>

    </ul>

        </div>

    </div>
    
    

        </div>
    </div>

        </li>
        <li >
                <div class="review review--with-sidebar" data-review-id="B3ePtu2tHMFuvrIcJ2zQjg" data-signup-object="user_id:iSeyLT6OeKh4yOFrT5ji3Q">
            <div class="review-sidebar">
        <div class="review-sidebar-content">
                <div class="ypassport media-block">
        <div class="media-avatar responsive-photo-box">
                        <div class="photo-box pb-60s" data-hovercard-id="rDa-Pnx5TBJaJXDFeDTYAA">
                <a href="/user_details?userid=iSeyLT6OeKh4yOFrT5ji3Q" class="js-analytics-click" data-analytics-label="user-photo">
                <img alt="Kellyn W." class="photo-box-img" height="60" src="https://s3-media3.fl.yelpcdn.com/photo/zi7V19r0VZFoz23FWpA5_w/60s.jpg" width="60">

        </a>

    </div>



        </div>
        <div class="media-story">
                <ul class="user-passport-info">
        <li class="user-name">
                    <a class="user-display-name" href="/user_details?userid=iSeyLT6OeKh4yOFrT5ji3Q" data-hovercard-id="rDa-Pnx5TBJaJXDFeDTYAA">Kellyn W.</a>
        </li>
        <li class="user-location responsive-hidden-small">
            <b>San Francisco, CA</b>
        </li>
    </ul>

            

    <ul class="user-passport-stats">
        <li class="friend-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-friends icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_friends" />
    </svg>
</span>
            <b>10</b> friends
        </li>
        <li class="review-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-review icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_review" />
    </svg>
</span>
            <b>21</b> reviews
        </li>
        
    </ul>

        </div>
    </div>

                    <ul class="action-link-list action-link-list--small">
        
        <li>
            


    <a class="arrange arrange--middle send-to-friend" data-pop-uri="/send_to_friend/review/B3ePtu2tHMFuvrIcJ2zQjg" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-share icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_share" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Share review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle embed-review" data-pop-uri="/review_embed_modal/B3ePtu2tHMFuvrIcJ2zQjg" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-embed icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_embed" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Embed review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-compliment" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-compliment icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_compliment" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Compliment
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-pm" href="javascript:;" rel="Kellyn W.">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-speech icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_speech" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Send message
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-add" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="iSeyLT6OeKh4yOFrT5ji3Q">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-following icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_following" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Follow Kellyn W.
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-remove hidden" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="iSeyLT6OeKh4yOFrT5ji3Q">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-unfollow icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_unfollow" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Stop following Kellyn W.
        </div>
    </a>

        </li>


    </ul>

        </div>
    </div>

        <div class="review-wrapper">
                <div class="review-content">
            <div class="biz-rating biz-rating-large clearfix">
        <div >
                    


    <div class="i-stars i-stars--regular-2 rating-large" title="2.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="2.0 star rating">
    </div>



        </div>
            <span class="rating-qualifier">
        11/27/2016
    </span>

    </div>

        
                <p lang="en">I made a trip out in the rain before running to a movie yesterday and was very disappointed with the level of service. They completely forgot to make 1 drink in a friend&#39;s order then blamed it on another customer taking the missing drink. After we asked for the missing drink (an iced milk tea) they then made the incorrect drink (hot tea) which accepted due to our time constraints. <br><br>Waiting 30 minutes for the wrong order which technically cost less than the missing item isn&#39;t exactly what I&#39;d consider a good job. I won&#39;t be coming back here for sometime.</p> 
            
    </div>
    <div class="review-footer clearfix">
                    <div class="rateReview voting-feedback" data-review-id="B3ePtu2tHMFuvrIcJ2zQjg">
                    <p class="voting-intro voting-prompt">
        Was this review &hellip;?
    </p>
    <ul class="voting-buttons" data-csrf-token="c5f44b4ca2649aeb4492d827a797d61476922eef4584ff73370a63d021703fa8">
            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small useful js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="useful">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-useful-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_useful_outline" />
    </svg>
</span>    <span class="vote-type">Useful</span>
    <span class="count">1</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small funny js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="funny">
            <span aria-hidden="true" style="fill: #41a700; width: 18px; height: 18px;" class="icon icon--18-funny-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_funny_outline" />
    </svg>
</span>    <span class="vote-type">Funny</span>
    <span class="count"></span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small cool js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="cool">
            <span aria-hidden="true" style="fill: #0097ec; width: 18px; height: 18px;" class="icon icon--18-cool-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_cool_outline" />
    </svg>
</span>    <span class="vote-type">Cool</span>
    <span class="count"></span>
    </a>
    </li>

    </ul>

        </div>

    </div>
    
    

        </div>
    </div>

        </li>
        <li >
                <div class="review review--with-sidebar" data-review-id="wtiHZO7UuO-4VPh4wcgB_A" data-signup-object="user_id:rj8n3rXKqYvDQATiprVgjA">
            <div class="review-sidebar">
        <div class="review-sidebar-content">
                <div class="ypassport media-block">
        <div class="media-avatar responsive-photo-box">
                        <div class="photo-box pb-60s" data-hovercard-id="-7FTptuqCn83No4a2j7QZA">
                <a href="/user_details?userid=rj8n3rXKqYvDQATiprVgjA" class="js-analytics-click" data-analytics-label="user-photo">
                <img alt="Maleah M." class="photo-box-img" height="60" src="https://s3-media1.fl.yelpcdn.com/photo/xyOhv2YnkyB13UM3bfZfFg/60s.jpg" width="60">

        </a>

    </div>



        </div>
        <div class="media-story">
                <ul class="user-passport-info">
        <li class="user-name">
                    <a class="user-display-name" href="/user_details?userid=rj8n3rXKqYvDQATiprVgjA" data-hovercard-id="-7FTptuqCn83No4a2j7QZA">Maleah M.</a>
        </li>
        <li class="user-location responsive-hidden-small">
            <b>San Jose, CA</b>
        </li>
    </ul>

            

    <ul class="user-passport-stats">
        <li class="friend-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-friends icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_friends" />
    </svg>
</span>
            <b>703</b> friends
        </li>
        <li class="review-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-review icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_review" />
    </svg>
</span>
            <b>515</b> reviews
        </li>
                <li class="is-elite responsive-small-display-inline-block">
            <a href="/elite">Elite ’16</a>
        </li>

    </ul>

        </div>
    </div>

                    <ul class="action-link-list action-link-list--small">
        
        <li>
            


    <a class="arrange arrange--middle send-to-friend" data-pop-uri="/send_to_friend/review/wtiHZO7UuO-4VPh4wcgB_A" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-share icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_share" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Share review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle embed-review" data-pop-uri="/review_embed_modal/wtiHZO7UuO-4VPh4wcgB_A" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-embed icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_embed" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Embed review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-compliment" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-compliment icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_compliment" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Compliment
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-pm" href="javascript:;" rel="Maleah M.">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-speech icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_speech" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Send message
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-add" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="rj8n3rXKqYvDQATiprVgjA">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-following icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_following" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Follow Maleah M.
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-remove hidden" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="rj8n3rXKqYvDQATiprVgjA">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-unfollow icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_unfollow" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Stop following Maleah M.
        </div>
    </a>

        </li>


    </ul>

        </div>
    </div>

        <div class="review-wrapper">
                <div class="review-content">
            <div class="biz-rating biz-rating-large clearfix">
        <div >
                    


    <div class="i-stars i-stars--regular-4 rating-large" title="4.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="4.0 star rating">
    </div>



        </div>
            <span class="rating-qualifier">
        11/22/2016
    </span>

    </div>

                        <ul class="review-tags">
                <li class="review-tags_item">

        <span >
            <span aria-hidden="true" style="fill: #ecac25; width: 18px; height: 18px;" class="icon icon--18-check-in icon--size-18 u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_check_in" />
    </svg>
</span>2 check-ins
        </span>
    </li>

    </ul>

                <ul class="review-tags">
        <li class="review-tags_item">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-list icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_list" />
    </svg>
</span>
            Listed in <a href="/list/its-time-to-par-tea-milpitas-3" title="Hot teas to hotties to milk tea to iced tea, this is the list. The boba craze has swept the nation, with new milk tea places">It&#39;s time to par-TEA</a>
        </li>
    </ul>


                <p lang="en">Sometimes it makes me sad that there aren&#39;t many boba options in SF. Then when I really think about it, who needs more options when they have one of the best places anyway? <br><br>I love boba guys because they don&#39;t have a crazy overwhelming menu and they have an awesome matcha which is all I really need anyway. The boba is always soft and sweet! That&#39;s a plus. The lines seem long, but it moves by fairly quickly. The only huge downside really is their lack of parking!</p> 
                        
        <ul class="photo-box-grid clearfix js-content-expandable lightbox-media-parent" data-ad-logging-csrf="d5914a75327491d026c1399caf993fa6fbc76f73485f25d094bb5df52f761a99" data-ad-logging-uri="/ad_acknowledgment" data-ga-path="media_lightbox/servlet:biz_details/type:biz" data-logging-csrf="4ac56838914c80cf7089cd149a39f5d6d938929e1ec91e2f42852d2116286e0c" data-logging-uri="/biz_photos/18TtLS_JtiS2OH30FLqNrw/log_views" data-media-count="5" data-media-url="/biz_photos/get_media_slice/18TtLS_JtiS2OH30FLqNrw?reviewid=wtiHZO7UuO-4VPh4wcgB_A" data-starting-index="0">
                <li style="width: 348px; height: 348px;">
                        <div class="photo-box photo-box--interactive is-loading">
        
                <img data-async-src=https://s3-media1.fl.yelpcdn.com/bphoto/2zZX2VwmA63EWXPWiE83Ow/348s.jpg alt="Photo of Boba Guys - San Francisco, CA, United States" class="photo-box-img no-js-hidden" height="348" src="https://s3-media2.fl.yelpcdn.com/assets/srv0/yelp_styleguide/978c1bee49d7/assets/img/1x1.png" width="348">

            <noscript>
                    <img alt="Photo of Boba Guys - San Francisco, CA, United States" class="photo-box-img" height="348" src="https://s3-media1.fl.yelpcdn.com/bphoto/2zZX2VwmA63EWXPWiE83Ow/348s.jpg" width="348">

            </noscript>



        

            <a class="biz-shim js-lightbox-media-link js-analytics-click" data-analytics-label="biz-photo"  href="/biz_photos/boba-guys-san-francisco-4?reviewid=wtiHZO7UuO-4VPh4wcgB_A&amp;select=2zZX2VwmA63EWXPWiE83Ow">
            <span class="offscreen"></span>
    </a>

    </div>

                </li>
                <li style="width: 168px; height: 168px;">
                        <div class="photo-box photo-box--interactive is-loading">
        
                <img data-async-src=https://s3-media3.fl.yelpcdn.com/bphoto/Agi8PKXOtboTUPqVQPe7Tg/168s.jpg alt="Photo of Boba Guys - San Francisco, CA, United States" class="photo-box-img no-js-hidden" height="168" src="https://s3-media2.fl.yelpcdn.com/assets/srv0/yelp_styleguide/978c1bee49d7/assets/img/1x1.png" width="168">

            <noscript>
                    <img alt="Photo of Boba Guys - San Francisco, CA, United States" class="photo-box-img" height="168" src="https://s3-media3.fl.yelpcdn.com/bphoto/Agi8PKXOtboTUPqVQPe7Tg/168s.jpg" width="168">

            </noscript>



        

            <a class="biz-shim js-lightbox-media-link js-analytics-click" data-analytics-label="biz-photo"  href="/biz_photos/boba-guys-san-francisco-4?reviewid=wtiHZO7UuO-4VPh4wcgB_A&amp;select=Agi8PKXOtboTUPqVQPe7Tg">
            <span class="offscreen"></span>
    </a>

    </div>

                </li>
                <li style="width: 168px; height: 168px;">
                        <div class="photo-box photo-box--interactive is-loading">
        
                <img data-async-src=https://s3-media3.fl.yelpcdn.com/bphoto/YRohpmIJwQxdtR-wEvGyHA/168s.jpg alt="Photo of Boba Guys - San Francisco, CA, United States" class="photo-box-img no-js-hidden" height="168" src="https://s3-media2.fl.yelpcdn.com/assets/srv0/yelp_styleguide/978c1bee49d7/assets/img/1x1.png" width="168">

            <noscript>
                    <img alt="Photo of Boba Guys - San Francisco, CA, United States" class="photo-box-img" height="168" src="https://s3-media3.fl.yelpcdn.com/bphoto/YRohpmIJwQxdtR-wEvGyHA/168s.jpg" width="168">

            </noscript>



        

            <a class="biz-shim js-lightbox-media-link js-analytics-click" data-analytics-label="biz-photo"  href="/biz_photos/boba-guys-san-francisco-4?reviewid=wtiHZO7UuO-4VPh4wcgB_A&amp;select=YRohpmIJwQxdtR-wEvGyHA">
            <span class="offscreen"></span>
    </a>

    </div>

                </li>

                <li class="more-review-photos">
                    <a href="/biz_photos/boba-guys-san-francisco-4?userid=rj8n3rXKqYvDQATiprVgjA" class="js-content-expander">
                        See all photos from Maleah M. for Boba Guys
                    </a>
                </li>
        </ul>

    </div>
    <div class="review-footer clearfix">
                    <div class="rateReview voting-feedback" data-review-id="wtiHZO7UuO-4VPh4wcgB_A">
                    <p class="voting-intro voting-prompt">
        Was this review &hellip;?
    </p>
    <ul class="voting-buttons" data-csrf-token="c5f44b4ca2649aeb4492d827a797d61476922eef4584ff73370a63d021703fa8">
            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small useful js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="useful">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-useful-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_useful_outline" />
    </svg>
</span>    <span class="vote-type">Useful</span>
    <span class="count">6</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small funny js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="funny">
            <span aria-hidden="true" style="fill: #41a700; width: 18px; height: 18px;" class="icon icon--18-funny-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_funny_outline" />
    </svg>
</span>    <span class="vote-type">Funny</span>
    <span class="count">5</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small cool js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="cool">
            <span aria-hidden="true" style="fill: #0097ec; width: 18px; height: 18px;" class="icon icon--18-cool-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_cool_outline" />
    </svg>
</span>    <span class="vote-type">Cool</span>
    <span class="count">5</span>
    </a>
    </li>

    </ul>

        </div>

    </div>
    
    

        </div>
    </div>

        </li>
        <li >
                <div class="review review--with-sidebar" data-review-id="ABLKma7iRtKrnsVlPRBxSg" data-signup-object="user_id:3ABugfXekKDaV4F1iBg0TQ">
            <div class="review-sidebar">
        <div class="review-sidebar-content">
                <div class="ypassport media-block">
        <div class="media-avatar responsive-photo-box">
                        <div class="photo-box pb-60s" data-hovercard-id="IFwbs25DUrBpNVP2p5eUQw">
                <a href="/user_details?userid=3ABugfXekKDaV4F1iBg0TQ" class="js-analytics-click" data-analytics-label="user-photo">
                <img alt="Lakshmi M." class="photo-box-img" height="60" src="https://s3-media4.fl.yelpcdn.com/photo/RHWHKNN_ZNKXiKFJOGEo5A/60s.jpg" width="60">

        </a>

    </div>



        </div>
        <div class="media-story">
                <ul class="user-passport-info">
        <li class="user-name">
                    <a class="user-display-name" href="/user_details?userid=3ABugfXekKDaV4F1iBg0TQ" data-hovercard-id="IFwbs25DUrBpNVP2p5eUQw">Lakshmi M.</a>
        </li>
        <li class="user-location responsive-hidden-small">
            <b>Berkeley, CA</b>
        </li>
    </ul>

            

    <ul class="user-passport-stats">
        <li class="friend-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-friends icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_friends" />
    </svg>
</span>
            <b>42</b> friends
        </li>
        <li class="review-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-review icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_review" />
    </svg>
</span>
            <b>93</b> reviews
        </li>
                <li class="is-elite responsive-small-display-inline-block">
            <a href="/elite">Elite ’16</a>
        </li>

    </ul>

        </div>
    </div>

                    <ul class="action-link-list action-link-list--small">
        
        <li>
            


    <a class="arrange arrange--middle send-to-friend" data-pop-uri="/send_to_friend/review/ABLKma7iRtKrnsVlPRBxSg" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-share icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_share" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Share review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle embed-review" data-pop-uri="/review_embed_modal/ABLKma7iRtKrnsVlPRBxSg" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-embed icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_embed" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Embed review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-compliment" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-compliment icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_compliment" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Compliment
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-pm" href="javascript:;" rel="Lakshmi M.">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-speech icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_speech" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Send message
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-add" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="3ABugfXekKDaV4F1iBg0TQ">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-following icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_following" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Follow Lakshmi M.
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-remove hidden" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="3ABugfXekKDaV4F1iBg0TQ">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-unfollow icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_unfollow" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Stop following Lakshmi M.
        </div>
    </a>

        </li>


    </ul>

        </div>
    </div>

        <div class="review-wrapper">
                <div class="review-content">
            <div class="biz-rating biz-rating-large clearfix">
        <div >
                    


    <div class="i-stars i-stars--regular-5 rating-large" title="5.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="5.0 star rating">
    </div>



        </div>
            <span class="rating-qualifier">
        11/21/2016
    </span>

    </div>

                        <ul class="review-tags">
                <li class="review-tags_item">

        <span >
            <span aria-hidden="true" style="fill: #0077bc; width: 18px; height: 18px;" class="icon icon--18-check-in icon--size-18 u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_check_in" />
    </svg>
</span>1 check-in
        </span>
    </li>

    </ul>


                <p lang="en">I am such a sucker for Boba Guys. Frankly, this place has ruined most other boba places for me because of its great quality. I can actually taste the tea in my drinks and the high quality of the milk is seriously refreshing. I also really appreciate that they have non-dairy options (woohoo almond/soy milk!). I&#39;ve definitely gotten a couple of friends completely hooked on this place.<br><br>My two favorite drinks here are the thai tea and the coffee milk tea. I have yet to find another coffee milk tea that can hold a candle to the one here. It is a bit on the sweet side so I&#39;d suggest getting less sugar if you don&#39;t like particularly sweet drinks. However, it&#39;s such a good blend of flavors with some strong, tasty coffee. I have a bad habit of comparing all other thai teas to the one here as well. <br><br>The classic milk tea and hong kong milk tea are also great choices! If you want something that&#39;s outside of the box, I would recommend the strawberry matcha~</p> 
            
    </div>
    <div class="review-footer clearfix">
                    <div class="rateReview voting-feedback" data-review-id="ABLKma7iRtKrnsVlPRBxSg">
                    <p class="voting-intro voting-prompt">
        Was this review &hellip;?
    </p>
    <ul class="voting-buttons" data-csrf-token="c5f44b4ca2649aeb4492d827a797d61476922eef4584ff73370a63d021703fa8">
            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small useful js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="useful">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-useful-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_useful_outline" />
    </svg>
</span>    <span class="vote-type">Useful</span>
    <span class="count"></span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small funny js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="funny">
            <span aria-hidden="true" style="fill: #41a700; width: 18px; height: 18px;" class="icon icon--18-funny-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_funny_outline" />
    </svg>
</span>    <span class="vote-type">Funny</span>
    <span class="count"></span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small cool js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="cool">
            <span aria-hidden="true" style="fill: #0097ec; width: 18px; height: 18px;" class="icon icon--18-cool-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_cool_outline" />
    </svg>
</span>    <span class="vote-type">Cool</span>
    <span class="count"></span>
    </a>
    </li>

    </ul>

        </div>

    </div>
    
    

        </div>
    </div>

        </li>
        <li >
                <div class="review review--with-sidebar" data-review-id="yjykAYPVO24i_6CeM0f3xA" data-signup-object="user_id:lT9w9ud7Mu85De15gno8Pw">
            <div class="review-sidebar">
        <div class="review-sidebar-content">
                <div class="ypassport media-block">
        <div class="media-avatar responsive-photo-box">
                        <div class="photo-box pb-60s" data-hovercard-id="aKMdfVhMoeZdv09zW6TA0g">
                <a href="/user_details?userid=lT9w9ud7Mu85De15gno8Pw" class="js-analytics-click" data-analytics-label="user-photo">
                <img alt="Annie H." class="photo-box-img" height="60" src="https://s3-media1.fl.yelpcdn.com/photo/--Op0BfOj-xSz0V3_uJhOA/60s.jpg" width="60">

        </a>

    </div>



        </div>
        <div class="media-story">
                <ul class="user-passport-info">
        <li class="user-name">
                    <a class="user-display-name" href="/user_details?userid=lT9w9ud7Mu85De15gno8Pw" data-hovercard-id="aKMdfVhMoeZdv09zW6TA0g">Annie H.</a>
        </li>
        <li class="user-location responsive-hidden-small">
            <b>San Francisco, CA</b>
        </li>
    </ul>

            

    <ul class="user-passport-stats">
        <li class="friend-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-friends icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_friends" />
    </svg>
</span>
            <b>387</b> friends
        </li>
        <li class="review-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-review icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_review" />
    </svg>
</span>
            <b>105</b> reviews
        </li>
                <li class="is-elite responsive-small-display-inline-block">
            <a href="/elite">Elite ’16</a>
        </li>

    </ul>

        </div>
    </div>

                    <ul class="action-link-list action-link-list--small">
        
        <li>
            


    <a class="arrange arrange--middle send-to-friend" data-pop-uri="/send_to_friend/review/yjykAYPVO24i_6CeM0f3xA" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-share icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_share" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Share review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle embed-review" data-pop-uri="/review_embed_modal/yjykAYPVO24i_6CeM0f3xA" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-embed icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_embed" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Embed review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-compliment" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-compliment icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_compliment" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Compliment
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-pm" href="javascript:;" rel="Annie H.">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-speech icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_speech" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Send message
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-add" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="lT9w9ud7Mu85De15gno8Pw">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-following icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_following" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Follow Annie H.
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-remove hidden" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="lT9w9ud7Mu85De15gno8Pw">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-unfollow icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_unfollow" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Stop following Annie H.
        </div>
    </a>

        </li>


    </ul>

        </div>
    </div>

        <div class="review-wrapper">
                <div class="review-content">
            <div class="biz-rating biz-rating-large clearfix">
        <div >
                    


    <div class="i-stars i-stars--regular-4 rating-large" title="4.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="4.0 star rating">
    </div>



        </div>
            <span class="rating-qualifier">
        11/6/2016
    </span>

    </div>

                        <ul class="review-tags">
                <li class="review-tags_item">

        <span >
            <span aria-hidden="true" style="fill: #0077bc; width: 18px; height: 18px;" class="icon icon--18-check-in icon--size-18 u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_check_in" />
    </svg>
</span>1 check-in
        </span>
    </li>

    </ul>


                <p lang="en">Been wanting to try this place for a while. I was super excited to finally try it, although I&#39;m a bit disappointed. This place is definitely over hyped. Luckily my boyfriend and I didn&#39;t have to wait too long before we ordered our drink but by that time, the line behind us got insanely long. I ordered the iced matcha green tea latte with boba and my boyfriend ordered the strawberry green tea latte. <br><br>I asked for 50% sweetness and still thought my drink was too sweet. In all honestly, the drink was just mediocre. I expected something great, considering the long line of people but it was just like any regular green tea latte. My boyfriends strawberry green tea latte was interesting though. Also, the boba was really hard and kind of gross. This place is more of a three and a half stars but oh wells.</p> 
                        
        <ul class="photo-box-grid clearfix js-content-expandable lightbox-media-parent" data-ad-logging-csrf="d5914a75327491d026c1399caf993fa6fbc76f73485f25d094bb5df52f761a99" data-ad-logging-uri="/ad_acknowledgment" data-ga-path="media_lightbox/servlet:biz_details/type:biz" data-logging-csrf="4ac56838914c80cf7089cd149a39f5d6d938929e1ec91e2f42852d2116286e0c" data-logging-uri="/biz_photos/18TtLS_JtiS2OH30FLqNrw/log_views" data-media-count="1" data-media-url="/biz_photos/get_media_slice/18TtLS_JtiS2OH30FLqNrw?reviewid=yjykAYPVO24i_6CeM0f3xA" data-starting-index="0">
                <li style="width: 348px; height: 348px;">
                        <div class="photo-box photo-box--interactive is-loading">
        
                <img data-async-src=https://s3-media4.fl.yelpcdn.com/bphoto/Fj-oQvyycQ9Hhz6kcQrFyg/348s.jpg alt="Photo of Boba Guys - San Francisco, CA, United States. Iced green tea latte with boba" class="photo-box-img no-js-hidden" height="348" src="https://s3-media2.fl.yelpcdn.com/assets/srv0/yelp_styleguide/978c1bee49d7/assets/img/1x1.png" width="348">

            <noscript>
                    <img alt="Photo of Boba Guys - San Francisco, CA, United States. Iced green tea latte with boba" class="photo-box-img" height="348" src="https://s3-media4.fl.yelpcdn.com/bphoto/Fj-oQvyycQ9Hhz6kcQrFyg/348s.jpg" width="348">

            </noscript>



                <div class="photo-box-overlay js-overlay">
                <div class="photo-box-overlay_caption">Iced green tea latte with boba</div>
        </div>


            <a class="biz-shim js-lightbox-media-link js-analytics-click" data-analytics-label="biz-photo"  href="/biz_photos/boba-guys-san-francisco-4?reviewid=yjykAYPVO24i_6CeM0f3xA&amp;select=Fj-oQvyycQ9Hhz6kcQrFyg">
            <span class="offscreen">Iced green tea latte with boba</span>
    </a>

    </div>

                </li>

        </ul>

    </div>
    <div class="review-footer clearfix">
                    <div class="rateReview voting-feedback" data-review-id="yjykAYPVO24i_6CeM0f3xA">
                    <p class="voting-intro voting-prompt">
        Was this review &hellip;?
    </p>
    <ul class="voting-buttons" data-csrf-token="c5f44b4ca2649aeb4492d827a797d61476922eef4584ff73370a63d021703fa8">
            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small useful js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="useful">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-useful-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_useful_outline" />
    </svg>
</span>    <span class="vote-type">Useful</span>
    <span class="count"></span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small funny js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="funny">
            <span aria-hidden="true" style="fill: #41a700; width: 18px; height: 18px;" class="icon icon--18-funny-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_funny_outline" />
    </svg>
</span>    <span class="vote-type">Funny</span>
    <span class="count"></span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small cool js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="cool">
            <span aria-hidden="true" style="fill: #0097ec; width: 18px; height: 18px;" class="icon icon--18-cool-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_cool_outline" />
    </svg>
</span>    <span class="vote-type">Cool</span>
    <span class="count"></span>
    </a>
    </li>

    </ul>

        </div>

    </div>
    
    

        </div>
    </div>

        </li>
        <li >
                <div class="review review--with-sidebar" data-review-id="3hPZ_0dq4SQ80Nerr0z_2w" data-signup-object="user_id:Q5_vF3yrGQEwaZn6xQFrwQ">
            <div class="review-sidebar">
        <div class="review-sidebar-content">
                <div class="ypassport media-block">
        <div class="media-avatar responsive-photo-box">
                        <div class="photo-box pb-60s" data-hovercard-id="73Q5o-6tamf7bFr2eiHgxQ">
                <a href="/user_details?userid=Q5_vF3yrGQEwaZn6xQFrwQ" class="js-analytics-click" data-analytics-label="user-photo">
                <img alt="Anna Z." class="photo-box-img" height="60" src="https://s3-media2.fl.yelpcdn.com/photo/-poFegPdbRe1ZC7SI_zNJg/60s.jpg" width="60">

        </a>

    </div>



        </div>
        <div class="media-story">
                <ul class="user-passport-info">
        <li class="user-name">
                    <a class="user-display-name" href="/user_details?userid=Q5_vF3yrGQEwaZn6xQFrwQ" data-hovercard-id="73Q5o-6tamf7bFr2eiHgxQ">Anna Z.</a>
        </li>
        <li class="user-location responsive-hidden-small">
            <b>San Francisco, CA</b>
        </li>
    </ul>

            

    <ul class="user-passport-stats">
        <li class="friend-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-friends icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_friends" />
    </svg>
</span>
            <b>105</b> friends
        </li>
        <li class="review-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-review icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_review" />
    </svg>
</span>
            <b>53</b> reviews
        </li>
                <li class="is-elite responsive-small-display-inline-block">
            <a href="/elite">Elite ’16</a>
        </li>

    </ul>

        </div>
    </div>

                    <ul class="action-link-list action-link-list--small">
        
        <li>
            


    <a class="arrange arrange--middle send-to-friend" data-pop-uri="/send_to_friend/review/3hPZ_0dq4SQ80Nerr0z_2w" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-share icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_share" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Share review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle embed-review" data-pop-uri="/review_embed_modal/3hPZ_0dq4SQ80Nerr0z_2w" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-embed icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_embed" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Embed review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-compliment" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-compliment icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_compliment" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Compliment
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-pm" href="javascript:;" rel="Anna Z.">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-speech icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_speech" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Send message
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-add" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="Q5_vF3yrGQEwaZn6xQFrwQ">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-following icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_following" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Follow Anna Z.
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-remove hidden" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="Q5_vF3yrGQEwaZn6xQFrwQ">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-unfollow icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_unfollow" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Stop following Anna Z.
        </div>
    </a>

        </li>


    </ul>

        </div>
    </div>

        <div class="review-wrapper">
                <div class="review-content">
            <div class="biz-rating biz-rating-large clearfix">
        <div >
                    


    <div class="i-stars i-stars--regular-5 rating-large" title="5.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="5.0 star rating">
    </div>



        </div>
            <span class="rating-qualifier">
        11/21/2016
    </span>

    </div>

        
                <p lang="en">I am obsessed... like... utterly, completely, head-over-heels, obsessed! HK style milk tea is the way to go! It contains condensed milk, so the drink is pretty darn sweet. I prefer going with 50% sweetness. And their boba... *heart eyes* omg. Perfect consistency and texture. I try really hard not to get boba most of the time because they&#39;re empty calories, but I cannot resist the boba here. <br><br>Also... they sell the best pineapple cakes in the world (every time I discover someone going to Taiwan, I ask for them to bring Sunny Hills pineapple cakes back to me, and yes, this includes a friend of a friend of a friend). It&#39;s pricy though... $5 for one, which is more expensive than a large drink, but oh so worth it.</p> 
            
    </div>
    <div class="review-footer clearfix">
                    <div class="rateReview voting-feedback" data-review-id="3hPZ_0dq4SQ80Nerr0z_2w">
                    <p class="voting-intro voting-prompt">
        Was this review &hellip;?
    </p>
    <ul class="voting-buttons" data-csrf-token="c5f44b4ca2649aeb4492d827a797d61476922eef4584ff73370a63d021703fa8">
            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small useful js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="useful">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-useful-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_useful_outline" />
    </svg>
</span>    <span class="vote-type">Useful</span>
    <span class="count">1</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small funny js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="funny">
            <span aria-hidden="true" style="fill: #41a700; width: 18px; height: 18px;" class="icon icon--18-funny-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_funny_outline" />
    </svg>
</span>    <span class="vote-type">Funny</span>
    <span class="count">1</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small cool js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="cool">
            <span aria-hidden="true" style="fill: #0097ec; width: 18px; height: 18px;" class="icon icon--18-cool-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_cool_outline" />
    </svg>
</span>    <span class="vote-type">Cool</span>
    <span class="count">1</span>
    </a>
    </li>

    </ul>

        </div>

    </div>
    
    

        </div>
    </div>

        </li>
        <li >
                <div class="review review--with-sidebar" data-review-id="xQO8GlKDKH5xm0L9ZH2M2w" data-signup-object="user_id:U9yWtQO_0LPjtaU9jN0JsA">
            <div class="review-sidebar">
        <div class="review-sidebar-content">
                <div class="ypassport media-block">
        <div class="media-avatar responsive-photo-box">
                        <div class="photo-box pb-60s" data-hovercard-id="HVhrneB2HEPbFgbcC21ywA">
                <a href="/user_details?userid=U9yWtQO_0LPjtaU9jN0JsA" class="js-analytics-click" data-analytics-label="user-photo">
                <img alt="Jean K." class="photo-box-img" height="60" src="https://s3-media1.fl.yelpcdn.com/photo/bsKlrejgRhteQykpZsk-gg/60s.jpg" width="60">

        </a>

    </div>



        </div>
        <div class="media-story">
                <ul class="user-passport-info">
        <li class="user-name">
                    <a class="user-display-name" href="/user_details?userid=U9yWtQO_0LPjtaU9jN0JsA" data-hovercard-id="HVhrneB2HEPbFgbcC21ywA">Jean K.</a>
        </li>
        <li class="user-location responsive-hidden-small">
            <b>San Francisco, CA</b>
        </li>
    </ul>

            

    <ul class="user-passport-stats">
        <li class="friend-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-friends icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_friends" />
    </svg>
</span>
            <b>321</b> friends
        </li>
        <li class="review-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-review icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_review" />
    </svg>
</span>
            <b>1910</b> reviews
        </li>
                <li class="is-elite responsive-small-display-inline-block">
            <a href="/elite">Elite ’16</a>
        </li>

    </ul>

        </div>
    </div>

                    <ul class="action-link-list action-link-list--small">
        
        <li>
            


    <a class="arrange arrange--middle send-to-friend" data-pop-uri="/send_to_friend/review/xQO8GlKDKH5xm0L9ZH2M2w" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-share icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_share" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Share review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle embed-review" data-pop-uri="/review_embed_modal/xQO8GlKDKH5xm0L9ZH2M2w" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-embed icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_embed" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Embed review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-compliment" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-compliment icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_compliment" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Compliment
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-pm" href="javascript:;" rel="Jean K.">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-speech icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_speech" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Send message
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-add" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="U9yWtQO_0LPjtaU9jN0JsA">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-following icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_following" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Follow Jean K.
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-remove hidden" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="U9yWtQO_0LPjtaU9jN0JsA">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-unfollow icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_unfollow" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Stop following Jean K.
        </div>
    </a>

        </li>


    </ul>

        </div>
    </div>

        <div class="review-wrapper">
                <div class="review-content">
            <div class="biz-rating biz-rating-large clearfix">
        <div >
                    


    <div class="i-stars i-stars--regular-4 rating-large" title="4.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="4.0 star rating">
    </div>



        </div>
            <span class="rating-qualifier">
        10/27/2016
            <small class="bullet-before has-archived-review">
                <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-update icon--size-18 icon--warning">
    <svg class="icon_svg">
        <use xlink:href="#18x18_update" />
    </svg>
</span>
                <strong>Updated review</strong>
            </small>
    </span>

    </div>

                        <ul class="review-tags">
                <li class="review-tags_item">

        <span >
            <span aria-hidden="true" style="fill: #0077bc; width: 18px; height: 18px;" class="icon icon--18-check-in icon--size-18 u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_check_in" />
    </svg>
</span>2 check-ins
        </span>
    </li>

    </ul>


                <p lang="en">So I finally found the source of the inconsistencies with their tea drinks - the horchata. Been back a few times and it was always good then got tempted by a special matchata (horchata topped with matcha). It looked beautiful but again it was really watery with hardly any horchata flavor. Boo! <br><br>Stay away from the horchata and you&#39;ll be all set. Still the best balls around!</p> 
                        
        <ul class="photo-box-grid clearfix js-content-expandable lightbox-media-parent" data-ad-logging-csrf="d5914a75327491d026c1399caf993fa6fbc76f73485f25d094bb5df52f761a99" data-ad-logging-uri="/ad_acknowledgment" data-ga-path="media_lightbox/servlet:biz_details/type:biz" data-logging-csrf="4ac56838914c80cf7089cd149a39f5d6d938929e1ec91e2f42852d2116286e0c" data-logging-uri="/biz_photos/18TtLS_JtiS2OH30FLqNrw/log_views" data-media-count="1" data-media-url="/biz_photos/get_media_slice/18TtLS_JtiS2OH30FLqNrw?reviewid=xQO8GlKDKH5xm0L9ZH2M2w" data-starting-index="0">
                <li style="width: 348px; height: 348px;">
                        <div class="photo-box photo-box--interactive is-loading">
        
                <img data-async-src=https://s3-media3.fl.yelpcdn.com/bphoto/EwoNNsF_QGZP2csFonNVmw/348s.jpg alt="Photo of Boba Guys - San Francisco, CA, United States. matchata" class="photo-box-img no-js-hidden" height="348" src="https://s3-media2.fl.yelpcdn.com/assets/srv0/yelp_styleguide/978c1bee49d7/assets/img/1x1.png" width="348">

            <noscript>
                    <img alt="Photo of Boba Guys - San Francisco, CA, United States. matchata" class="photo-box-img" height="348" src="https://s3-media3.fl.yelpcdn.com/bphoto/EwoNNsF_QGZP2csFonNVmw/348s.jpg" width="348">

            </noscript>



                <div class="photo-box-overlay js-overlay">
                <div class="photo-box-overlay_caption">matchata</div>
        </div>


            <a class="biz-shim js-lightbox-media-link js-analytics-click" data-analytics-label="biz-photo"  href="/biz_photos/boba-guys-san-francisco-4?reviewid=xQO8GlKDKH5xm0L9ZH2M2w&amp;select=EwoNNsF_QGZP2csFonNVmw">
            <span class="offscreen">matchata</span>
    </a>

    </div>

                </li>

        </ul>

    </div>
    <div class="review-footer clearfix">
                    <div class="rateReview voting-feedback" data-review-id="xQO8GlKDKH5xm0L9ZH2M2w">
                    <p class="voting-intro voting-prompt">
        Was this review &hellip;?
    </p>
    <ul class="voting-buttons" data-csrf-token="c5f44b4ca2649aeb4492d827a797d61476922eef4584ff73370a63d021703fa8">
            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small useful js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="useful">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-useful-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_useful_outline" />
    </svg>
</span>    <span class="vote-type">Useful</span>
    <span class="count"></span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small funny js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="funny">
            <span aria-hidden="true" style="fill: #41a700; width: 18px; height: 18px;" class="icon icon--18-funny-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_funny_outline" />
    </svg>
</span>    <span class="vote-type">Funny</span>
    <span class="count"></span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small cool js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="cool">
            <span aria-hidden="true" style="fill: #0097ec; width: 18px; height: 18px;" class="icon icon--18-cool-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_cool_outline" />
    </svg>
</span>    <span class="vote-type">Cool</span>
    <span class="count">2</span>
    </a>
    </li>

    </ul>

        </div>

    </div>
                <div class="previous-review clearfix">
            <div class="biz-rating biz-rating-large clearfix">
                


    <div class="i-stars i-stars--regular-3 rating-large" title="3.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="3.0 star rating">
    </div>



        <span class="rating-qualifier">
            4/1/2015
            <strong class="bullet-before has-previous-review">
                <small>Previous review</small>
            </strong>
        </span>
    </div>

                <span class="js-expandable-comment comment-truncated">
            <span class="js-content-toggleable">Dear Boba Guys,<br><br>I think your quality control has gone down since your popularity has gone up. I wish…</span>
            <span class="js-content-toggleable hidden">Dear Boba Guys,<br><br>I think your quality control has gone down since your popularity has gone up. I wish I could tell you in person but you&#39;re not there anymore except when it&#39;s really busy and then there&#39;s no time to talk! The last four times I&#39;ve been there the tapioca balls have not been up to par. They&#39;re not fresh and chewy as they used to be. Instead they&#39;re kinda hard - like if you get boba tea to go and then let it sit too long before drinking/eating. Last time the thai iced tea was overbrewed too, kinda bitter tasting. <br><br>I used to come as a treat once a week - perfect antidote after a long bike ride. But now it&#39;s not as appealing.<br><br>Jean</span>
            <a href="javascript:;" class="read-more js-review-expander">Read more</a>
                
            <div class="review-footer js-content-toggleable hidden clearfix">
                            <div class="rateReview voting-feedback" data-review-id="J20qT2qRXqKVAl3rbgWEzQ">
                    <p class="voting-intro voting-prompt">
        Was this review &hellip;?
    </p>
    <ul class="voting-buttons" data-csrf-token="c5f44b4ca2649aeb4492d827a797d61476922eef4584ff73370a63d021703fa8">
            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small useful js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="useful">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-useful-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_useful_outline" />
    </svg>
</span>    <span class="vote-type">Useful</span>
    <span class="count">3</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small funny js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="funny">
            <span aria-hidden="true" style="fill: #41a700; width: 18px; height: 18px;" class="icon icon--18-funny-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_funny_outline" />
    </svg>
</span>    <span class="vote-type">Funny</span>
    <span class="count"></span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small cool js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="cool">
            <span aria-hidden="true" style="fill: #0097ec; width: 18px; height: 18px;" class="icon icon--18-cool-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_cool_outline" />
    </svg>
</span>    <span class="vote-type">Cool</span>
    <span class="count"></span>
    </a>
    </li>

    </ul>

        </div>

                
            </div>
        </span>

    </div>

            <div class="previous-review clearfix">
            <div class="biz-rating biz-rating-large clearfix">
                


    <div class="i-stars i-stars--regular-5 rating-large" title="5.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="5.0 star rating">
    </div>



        <span class="rating-qualifier">
            10/9/2013
            <strong class="bullet-before has-previous-review">
                <small>Previous review</small>
            </strong>
        </span>
    </div>

                <span class="js-expandable-comment comment-truncated">
            <span class="js-content-toggleable">I&#39;m so glad that the boba guys moved into a permanent home with regular hours so I can indulge in…</span>
            <span class="js-content-toggleable hidden">I&#39;m so glad that the boba guys moved into a permanent home with regular hours so I can indulge in their drinks whenever I want. Major props for being open late too! The tapioca balls are cooked perfectly - nice and chewy without being too soft or too chewy. But where they really shine is in the quality of tea. It&#39;s really good. So good I would buy the loose leaf tea if they sold it (which they&#39;ve promised to do soon).<br><br>You can order off the regular menu or the tea bar/special menu below. I thought the special menu was tea only but it&#39;s all for boba drinks. Even though the menu says pick one you can actually pick more than one thing to mix in - tapioca balls, almond jelly, grass jelly - for the same price.<br><br>So far I&#39;ve tried horchata (several times), thai iced tea (several times), jasmine milk tea, iced matcha latte, coconut green tea (special tea), muscat oolong (special tea). The only ones I wasn&#39;t as impressed with were the jasmine green tea and iced matcha. The horchata has also been hit or miss. Most of the time it&#39;s great but once it was really watered down. My fave at the moment is the muscat oolong with tapioca AND almond jelly. Heaven. On my to try list is the Hong Kong style and Duke of Earl Grey.<br><br>Because the teas are fresh sometimes the drink isn&#39;t as cold as it should be. A little annoying but I just mix it up really well with the ice and cool it down before drinking.</span>
            <a href="javascript:;" class="read-more js-review-expander">Read more</a>
                
            <div class="review-footer js-content-toggleable hidden clearfix">
                            <div class="rateReview voting-feedback" data-review-id="-4l5bWrVtRHBeR43mChB6g">
                    <p class="voting-intro voting-prompt">
        Was this review &hellip;?
    </p>
    <ul class="voting-buttons" data-csrf-token="c5f44b4ca2649aeb4492d827a797d61476922eef4584ff73370a63d021703fa8">
            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small useful js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="useful">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-useful-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_useful_outline" />
    </svg>
</span>    <span class="vote-type">Useful</span>
    <span class="count">2</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small funny js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="funny">
            <span aria-hidden="true" style="fill: #41a700; width: 18px; height: 18px;" class="icon icon--18-funny-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_funny_outline" />
    </svg>
</span>    <span class="vote-type">Funny</span>
    <span class="count">2</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small cool js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="cool">
            <span aria-hidden="true" style="fill: #0097ec; width: 18px; height: 18px;" class="icon icon--18-cool-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_cool_outline" />
    </svg>
</span>    <span class="vote-type">Cool</span>
    <span class="count">2</span>
    </a>
    </li>

    </ul>

        </div>

                
            </div>
        </span>

    </div>


    

        </div>
    </div>

        </li>
        <li >
                <div class="review review--with-sidebar" data-review-id="dKwPTV4AA-8G2OERIU_EEg" data-signup-object="user_id:KKr3BP-PXYHB3knac__ETw">
            <div class="review-sidebar">
        <div class="review-sidebar-content">
                <div class="ypassport media-block">
        <div class="media-avatar responsive-photo-box">
                        <div class="photo-box pb-60s" data-hovercard-id="rCGXawSviHyxmZSwGk0lag">
                <a href="/user_details?userid=KKr3BP-PXYHB3knac__ETw" class="js-analytics-click" data-analytics-label="user-photo">
                <img alt="Betty R." class="photo-box-img" height="60" src="https://s3-media4.fl.yelpcdn.com/photo/E4SNH1Uh6mr0M5j342HwHQ/60s.jpg" width="60">

        </a>

    </div>



        </div>
        <div class="media-story">
                <ul class="user-passport-info">
        <li class="user-name">
                    <a class="user-display-name" href="/user_details?userid=KKr3BP-PXYHB3knac__ETw" data-hovercard-id="rCGXawSviHyxmZSwGk0lag">Betty R.</a>
        </li>
        <li class="user-location responsive-hidden-small">
            <b>Oakland, CA</b>
        </li>
    </ul>

            

    <ul class="user-passport-stats">
        <li class="friend-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-friends icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_friends" />
    </svg>
</span>
            <b>42</b> friends
        </li>
        <li class="review-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-review icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_review" />
    </svg>
</span>
            <b>64</b> reviews
        </li>
                <li class="is-elite responsive-small-display-inline-block">
            <a href="/elite">Elite ’16</a>
        </li>

    </ul>

        </div>
    </div>

                    <ul class="action-link-list action-link-list--small">
        
        <li>
            


    <a class="arrange arrange--middle send-to-friend" data-pop-uri="/send_to_friend/review/dKwPTV4AA-8G2OERIU_EEg" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-share icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_share" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Share review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle embed-review" data-pop-uri="/review_embed_modal/dKwPTV4AA-8G2OERIU_EEg" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-embed icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_embed" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Embed review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-compliment" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-compliment icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_compliment" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Compliment
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-pm" href="javascript:;" rel="Betty R.">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-speech icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_speech" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Send message
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-add" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="KKr3BP-PXYHB3knac__ETw">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-following icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_following" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Follow Betty R.
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-remove hidden" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="KKr3BP-PXYHB3knac__ETw">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-unfollow icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_unfollow" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Stop following Betty R.
        </div>
    </a>

        </li>


    </ul>

        </div>
    </div>

        <div class="review-wrapper">
                <div class="review-content">
            <div class="biz-rating biz-rating-large clearfix">
        <div >
                    


    <div class="i-stars i-stars--regular-2 rating-large" title="2.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="2.0 star rating">
    </div>



        </div>
            <span class="rating-qualifier">
        9/15/2016
    </span>

    </div>

        
                <p lang="en">Overpriced and simply not very good. <br><br>Saw an article this week in SF Gate about these guys so had to come try them out for myself. Tiny little place with line out the door looked promising but didn&#39;t deliver.<br><br>I ordered the Thai Iced Tea with boba. The tea was pretty good and made with organic Strauss milk. They definitely take pride in using good, quality ingredients. However, maybe I was there on a bad day because whoever cooked up the batch of boba clearly never checked that it was cooked through. Nothing worse than biting into a boba to find it hard in the center like partially cooked pasta. No matter how good the tea was, it didn&#39;t make up for the awful texture of the boba. Definitely not worth the trip out to the Mission. <br><br>Sorry guys but you can&#39;t call yourself the Boba Guys and post up signs about your &#34;Grade-A Balls&#34; if the boba you serve is not even cooked all the way through.</p> 
                        
        <ul class="photo-box-grid clearfix js-content-expandable lightbox-media-parent" data-ad-logging-csrf="d5914a75327491d026c1399caf993fa6fbc76f73485f25d094bb5df52f761a99" data-ad-logging-uri="/ad_acknowledgment" data-ga-path="media_lightbox/servlet:biz_details/type:biz" data-logging-csrf="4ac56838914c80cf7089cd149a39f5d6d938929e1ec91e2f42852d2116286e0c" data-logging-uri="/biz_photos/18TtLS_JtiS2OH30FLqNrw/log_views" data-media-count="1" data-media-url="/biz_photos/get_media_slice/18TtLS_JtiS2OH30FLqNrw?reviewid=dKwPTV4AA-8G2OERIU_EEg" data-starting-index="0">
                <li style="width: 348px; height: 348px;">
                        <div class="photo-box photo-box--interactive is-loading">
        
                <img data-async-src=https://s3-media2.fl.yelpcdn.com/bphoto/kOS8HvIsMGknJnTxB1P6eQ/348s.jpg alt="Photo of Boba Guys - San Francisco, CA, United States. Boba was awful--hard in the center and not cooked all the way through. Sorry but Grade D Balls served here." class="photo-box-img no-js-hidden" height="348" src="https://s3-media2.fl.yelpcdn.com/assets/srv0/yelp_styleguide/978c1bee49d7/assets/img/1x1.png" width="348">

            <noscript>
                    <img alt="Photo of Boba Guys - San Francisco, CA, United States. Boba was awful--hard in the center and not cooked all the way through. Sorry but Grade D Balls served here." class="photo-box-img" height="348" src="https://s3-media2.fl.yelpcdn.com/bphoto/kOS8HvIsMGknJnTxB1P6eQ/348s.jpg" width="348">

            </noscript>



                <div class="photo-box-overlay js-overlay">
                <div class="photo-box-overlay_caption">Boba was awful--hard in the center and not cooked all the way through. Sorry but Grade D Balls served here.</div>
        </div>


            <a class="biz-shim js-lightbox-media-link js-analytics-click" data-analytics-label="biz-photo"  href="/biz_photos/boba-guys-san-francisco-4?reviewid=dKwPTV4AA-8G2OERIU_EEg&amp;select=kOS8HvIsMGknJnTxB1P6eQ">
            <span class="offscreen">Boba was awful--hard in the center and not cooked all the way through. Sorry but Grade D Balls served here.</span>
    </a>

    </div>

                </li>

        </ul>

    </div>
    <div class="review-footer clearfix">
                    <div class="rateReview voting-feedback" data-review-id="dKwPTV4AA-8G2OERIU_EEg">
                    <p class="voting-intro voting-prompt">
        Was this review &hellip;?
    </p>
    <ul class="voting-buttons" data-csrf-token="c5f44b4ca2649aeb4492d827a797d61476922eef4584ff73370a63d021703fa8">
            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small useful js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="useful">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-useful-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_useful_outline" />
    </svg>
</span>    <span class="vote-type">Useful</span>
    <span class="count">5</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small funny js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="funny">
            <span aria-hidden="true" style="fill: #41a700; width: 18px; height: 18px;" class="icon icon--18-funny-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_funny_outline" />
    </svg>
</span>    <span class="vote-type">Funny</span>
    <span class="count">3</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small cool js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="cool">
            <span aria-hidden="true" style="fill: #0097ec; width: 18px; height: 18px;" class="icon icon--18-cool-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_cool_outline" />
    </svg>
</span>    <span class="vote-type">Cool</span>
    <span class="count">1</span>
    </a>
    </li>

    </ul>

        </div>

    </div>
    
    

        </div>
    </div>

        </li>
        <li >
                <div class="review review--with-sidebar" data-review-id="Q-j1O_rYw8jJkgPnWUdGSQ" data-signup-object="user_id:V4nNUVs8X9ncc8eAJ9unvg">
            <div class="review-sidebar">
        <div class="review-sidebar-content">
                <div class="ypassport media-block">
        <div class="media-avatar responsive-photo-box">
                        <div class="photo-box pb-60s" data-hovercard-id="abFj0-zPM5lBzdT5W7dMqw">
                <a href="/user_details?userid=V4nNUVs8X9ncc8eAJ9unvg" class="js-analytics-click" data-analytics-label="user-photo">
                <img alt="Christine L." class="photo-box-img" height="60" src="https://s3-media4.fl.yelpcdn.com/photo/_Ss7zqeRAvimEw-79VPwvg/60s.jpg" width="60">

        </a>

    </div>



        </div>
        <div class="media-story">
                <ul class="user-passport-info">
        <li class="user-name">
                    <a class="user-display-name" href="/user_details?userid=V4nNUVs8X9ncc8eAJ9unvg" data-hovercard-id="abFj0-zPM5lBzdT5W7dMqw">Christine L.</a>
        </li>
        <li class="user-location responsive-hidden-small">
            <b>San Francisco, CA</b>
        </li>
    </ul>

            

    <ul class="user-passport-stats">
        <li class="friend-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-friends icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_friends" />
    </svg>
</span>
            <b>669</b> friends
        </li>
        <li class="review-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-review icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_review" />
    </svg>
</span>
            <b>178</b> reviews
        </li>
                <li class="is-elite responsive-small-display-inline-block">
            <a href="/elite">Elite ’16</a>
        </li>

    </ul>

        </div>
    </div>

                    <ul class="action-link-list action-link-list--small">
        
        <li>
            


    <a class="arrange arrange--middle send-to-friend" data-pop-uri="/send_to_friend/review/Q-j1O_rYw8jJkgPnWUdGSQ" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-share icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_share" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Share review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle embed-review" data-pop-uri="/review_embed_modal/Q-j1O_rYw8jJkgPnWUdGSQ" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-embed icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_embed" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Embed review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-compliment" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-compliment icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_compliment" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Compliment
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-pm" href="javascript:;" rel="Christine L.">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-speech icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_speech" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Send message
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-add" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="V4nNUVs8X9ncc8eAJ9unvg">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-following icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_following" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Follow Christine L.
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-remove hidden" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="V4nNUVs8X9ncc8eAJ9unvg">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-unfollow icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_unfollow" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Stop following Christine L.
        </div>
    </a>

        </li>


    </ul>

        </div>
    </div>

        <div class="review-wrapper">
                <div class="review-content">
            <div class="biz-rating biz-rating-large clearfix">
        <div >
                    


    <div class="i-stars i-stars--regular-4 rating-large" title="4.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="4.0 star rating">
    </div>



        </div>
            <span class="rating-qualifier">
        9/13/2016
    </span>

    </div>

                        <ul class="review-tags">
                <li class="review-tags_item">

        <span >
            <span aria-hidden="true" style="fill: #ecac25; width: 18px; height: 18px;" class="icon icon--18-check-in icon--size-18 u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_check_in" />
    </svg>
</span>4 check-ins
        </span>
    </li>

    </ul>


                <p lang="en">Boba Guys is the only boba shop in the Mission, so the line is often pretty long. Weekend afternoons/nights are the worst. <br><br>I&#39;d say the sweetness is similar to the average boba tea, but I always get 25% sweetness because I don&#39;t like it that sweet. Boba is softer rather than firmer (which I like). <br><br>They don&#39;t have a huge variety of drinks, but in a way it makes it seem more &#34;high-class&#34; and easy to choose. Before you order, make sure to check out the seasonal flavors on the side of the ordering counter. I usually end up picking some fruity flavor from there (strawberry jasmine tea fresca, strawberry matcha, and peach green tea were all great). <br><br>Overall, it&#39;s a bit expensive for the price ($4-5), but if you&#39;re here, you probably don&#39;t have an easy alternative. At least you can Instagram a hipster pic of your tea on the pretty patterned wall outside. <br><br>Note: Watch your step at the entrance. You can tell there were originally yellow markings to show that there&#39;s a step there, but it&#39;s worn off over time. They should probably repaint it!</p> 
                        
        <ul class="photo-box-grid clearfix js-content-expandable lightbox-media-parent" data-ad-logging-csrf="d5914a75327491d026c1399caf993fa6fbc76f73485f25d094bb5df52f761a99" data-ad-logging-uri="/ad_acknowledgment" data-ga-path="media_lightbox/servlet:biz_details/type:biz" data-logging-csrf="4ac56838914c80cf7089cd149a39f5d6d938929e1ec91e2f42852d2116286e0c" data-logging-uri="/biz_photos/18TtLS_JtiS2OH30FLqNrw/log_views" data-media-count="1" data-media-url="/biz_photos/get_media_slice/18TtLS_JtiS2OH30FLqNrw?reviewid=Q-j1O_rYw8jJkgPnWUdGSQ" data-starting-index="0">
                <li style="width: 348px; height: 348px;">
                        <div class="photo-box photo-box--interactive is-loading">
        
                <img data-async-src=https://s3-media3.fl.yelpcdn.com/bphoto/ZQcHGiuv3VIt5i_-HlHPbA/348s.jpg alt="Photo of Boba Guys - San Francisco, CA, United States" class="photo-box-img no-js-hidden" height="348" src="https://s3-media2.fl.yelpcdn.com/assets/srv0/yelp_styleguide/978c1bee49d7/assets/img/1x1.png" width="348">

            <noscript>
                    <img alt="Photo of Boba Guys - San Francisco, CA, United States" class="photo-box-img" height="348" src="https://s3-media3.fl.yelpcdn.com/bphoto/ZQcHGiuv3VIt5i_-HlHPbA/348s.jpg" width="348">

            </noscript>



        

            <a class="biz-shim js-lightbox-media-link js-analytics-click" data-analytics-label="biz-photo"  href="/biz_photos/boba-guys-san-francisco-4?reviewid=Q-j1O_rYw8jJkgPnWUdGSQ&amp;select=ZQcHGiuv3VIt5i_-HlHPbA">
            <span class="offscreen"></span>
    </a>

    </div>

                </li>

        </ul>

    </div>
    <div class="review-footer clearfix">
                    <div class="rateReview voting-feedback" data-review-id="Q-j1O_rYw8jJkgPnWUdGSQ">
                    <p class="voting-intro voting-prompt">
        Was this review &hellip;?
    </p>
    <ul class="voting-buttons" data-csrf-token="c5f44b4ca2649aeb4492d827a797d61476922eef4584ff73370a63d021703fa8">
            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small useful js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="useful">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-useful-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_useful_outline" />
    </svg>
</span>    <span class="vote-type">Useful</span>
    <span class="count">4</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small funny js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="funny">
            <span aria-hidden="true" style="fill: #41a700; width: 18px; height: 18px;" class="icon icon--18-funny-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_funny_outline" />
    </svg>
</span>    <span class="vote-type">Funny</span>
    <span class="count">3</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small cool js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="cool">
            <span aria-hidden="true" style="fill: #0097ec; width: 18px; height: 18px;" class="icon icon--18-cool-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_cool_outline" />
    </svg>
</span>    <span class="vote-type">Cool</span>
    <span class="count">2</span>
    </a>
    </li>

    </ul>

        </div>

    </div>
    
    

        </div>
    </div>

        </li>
        <li >
                <div class="review review--with-sidebar" data-review-id="V_vYdROlE089Fox5CC1jOA" data-signup-object="user_id:xCbr-NhqVmHmukNjkgUbnw">
            <div class="review-sidebar">
        <div class="review-sidebar-content">
                <div class="ypassport media-block">
        <div class="media-avatar responsive-photo-box">
                        <div class="photo-box pb-60s" data-hovercard-id="D4kteQTBTm09o950eecGnw">
                <a href="/user_details?userid=xCbr-NhqVmHmukNjkgUbnw" class="js-analytics-click" data-analytics-label="user-photo">
                <img alt="Stephanie A." class="photo-box-img" height="60" src="https://s3-media1.fl.yelpcdn.com/photo/JiCZxvg_c70j10on7Jk5Ug/60s.jpg" width="60">

        </a>

    </div>



        </div>
        <div class="media-story">
                <ul class="user-passport-info">
        <li class="user-name">
                    <a class="user-display-name" href="/user_details?userid=xCbr-NhqVmHmukNjkgUbnw" data-hovercard-id="D4kteQTBTm09o950eecGnw">Stephanie A.</a>
        </li>
        <li class="user-location responsive-hidden-small">
            <b>Turlock, CA</b>
        </li>
    </ul>

            

    <ul class="user-passport-stats">
        <li class="friend-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-friends icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_friends" />
    </svg>
</span>
            <b>75</b> friends
        </li>
        <li class="review-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-review icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_review" />
    </svg>
</span>
            <b>6</b> reviews
        </li>
        
    </ul>

        </div>
    </div>

                    <ul class="action-link-list action-link-list--small">
        
        <li>
            


    <a class="arrange arrange--middle send-to-friend" data-pop-uri="/send_to_friend/review/V_vYdROlE089Fox5CC1jOA" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-share icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_share" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Share review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle embed-review" data-pop-uri="/review_embed_modal/V_vYdROlE089Fox5CC1jOA" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-embed icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_embed" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Embed review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-compliment" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-compliment icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_compliment" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Compliment
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-pm" href="javascript:;" rel="Stephanie A.">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-speech icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_speech" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Send message
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-add" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="xCbr-NhqVmHmukNjkgUbnw">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-following icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_following" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Follow Stephanie A.
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-remove hidden" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="xCbr-NhqVmHmukNjkgUbnw">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-unfollow icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_unfollow" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Stop following Stephanie A.
        </div>
    </a>

        </li>


    </ul>

        </div>
    </div>

        <div class="review-wrapper">
                <div class="review-content">
            <div class="biz-rating biz-rating-large clearfix">
        <div >
                    


    <div class="i-stars i-stars--regular-5 rating-large" title="5.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="5.0 star rating">
    </div>



        </div>
            <span class="rating-qualifier">
        11/20/2016
    </span>

    </div>

        
                <p lang="en">My first time trying Boba Guys and it was great! I went on a Sunday afternoon around 4pm. The line was out the door but it was worth the wait. Their ingredients are hand crafted, and the quality is impeccable. <br><br>My drink: <br>I got the Coffee Milk tea with almond milk, 25% sweetness and boba. And it was perfection. <br><br>Ambiance: <br>Fresh white paint and earthy tones give this environment an openness (which is needed because it&#39;s small). It was a bit warm inside but with the door open and the large windows, it helped minimized the stuffiness. <br><br>My experience: <br>I met the manager while ubering (she was my rider) and she was sweet as pie!! Her staff were very customer-oriented, conscientious, and professional. All in all, I&#39;d go back again.</p> 
                        
        <ul class="photo-box-grid clearfix js-content-expandable lightbox-media-parent" data-ad-logging-csrf="d5914a75327491d026c1399caf993fa6fbc76f73485f25d094bb5df52f761a99" data-ad-logging-uri="/ad_acknowledgment" data-ga-path="media_lightbox/servlet:biz_details/type:biz" data-logging-csrf="4ac56838914c80cf7089cd149a39f5d6d938929e1ec91e2f42852d2116286e0c" data-logging-uri="/biz_photos/18TtLS_JtiS2OH30FLqNrw/log_views" data-media-count="1" data-media-url="/biz_photos/get_media_slice/18TtLS_JtiS2OH30FLqNrw?reviewid=V_vYdROlE089Fox5CC1jOA" data-starting-index="0">
                <li style="width: 348px; height: 348px;">
                        <div class="photo-box photo-box--interactive is-loading">
        
                <img data-async-src=https://s3-media4.fl.yelpcdn.com/bphoto/gIbwR3XZ9s0bbO3wV_uiNw/348s.jpg alt="Photo of Boba Guys - San Francisco, CA, United States. Coffee milk tea with almond milk, 25% sweetness, and boba. Perfection!" class="photo-box-img no-js-hidden" height="348" src="https://s3-media2.fl.yelpcdn.com/assets/srv0/yelp_styleguide/978c1bee49d7/assets/img/1x1.png" width="348">

            <noscript>
                    <img alt="Photo of Boba Guys - San Francisco, CA, United States. Coffee milk tea with almond milk, 25% sweetness, and boba. Perfection!" class="photo-box-img" height="348" src="https://s3-media4.fl.yelpcdn.com/bphoto/gIbwR3XZ9s0bbO3wV_uiNw/348s.jpg" width="348">

            </noscript>



                <div class="photo-box-overlay js-overlay">
                <div class="photo-box-overlay_caption">Coffee milk tea with almond milk, 25% sweetness, and boba. Perfection!</div>
        </div>


            <a class="biz-shim js-lightbox-media-link js-analytics-click" data-analytics-label="biz-photo"  href="/biz_photos/boba-guys-san-francisco-4?reviewid=V_vYdROlE089Fox5CC1jOA&amp;select=gIbwR3XZ9s0bbO3wV_uiNw">
            <span class="offscreen">Coffee milk tea with almond milk, 25% sweetness, and boba. Perfection!</span>
    </a>

    </div>

                </li>

        </ul>

    </div>
    <div class="review-footer clearfix">
                    <div class="rateReview voting-feedback" data-review-id="V_vYdROlE089Fox5CC1jOA">
                    <p class="voting-intro voting-prompt">
        Was this review &hellip;?
    </p>
    <ul class="voting-buttons" data-csrf-token="c5f44b4ca2649aeb4492d827a797d61476922eef4584ff73370a63d021703fa8">
            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small useful js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="useful">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-useful-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_useful_outline" />
    </svg>
</span>    <span class="vote-type">Useful</span>
    <span class="count"></span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small funny js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="funny">
            <span aria-hidden="true" style="fill: #41a700; width: 18px; height: 18px;" class="icon icon--18-funny-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_funny_outline" />
    </svg>
</span>    <span class="vote-type">Funny</span>
    <span class="count"></span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small cool js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="cool">
            <span aria-hidden="true" style="fill: #0097ec; width: 18px; height: 18px;" class="icon icon--18-cool-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_cool_outline" />
    </svg>
</span>    <span class="vote-type">Cool</span>
    <span class="count"></span>
    </a>
    </li>

    </ul>

        </div>

    </div>
    
    

        </div>
    </div>

        </li>
        <li >
                <div class="review review--with-sidebar" data-review-id="jgf6R6T6P0pxIegveFyRoQ" data-signup-object="user_id:d0AMOvtguHv1nYxb9mYf5A">
            <div class="review-sidebar">
        <div class="review-sidebar-content">
                <div class="ypassport media-block">
        <div class="media-avatar responsive-photo-box">
                        <div class="photo-box pb-60s" data-hovercard-id="i8E1zoWEAZvyjLYBU6sIGA">
                <a href="/user_details?userid=d0AMOvtguHv1nYxb9mYf5A" class="js-analytics-click" data-analytics-label="user-photo">
                <img alt="Michelle T." class="photo-box-img" height="60" src="https://s3-media3.fl.yelpcdn.com/photo/2jDvWpTrqQfnBnRu0vvjxg/60s.jpg" width="60">

        </a>

    </div>



        </div>
        <div class="media-story">
                <ul class="user-passport-info">
        <li class="user-name">
                    <a class="user-display-name" href="/user_details?userid=d0AMOvtguHv1nYxb9mYf5A" data-hovercard-id="i8E1zoWEAZvyjLYBU6sIGA">Michelle T.</a>
        </li>
        <li class="user-location responsive-hidden-small">
            <b>Irvine, CA</b>
        </li>
    </ul>

            

    <ul class="user-passport-stats">
        <li class="friend-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-friends icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_friends" />
    </svg>
</span>
            <b>416</b> friends
        </li>
        <li class="review-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-review icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_review" />
    </svg>
</span>
            <b>438</b> reviews
        </li>
                <li class="is-elite responsive-small-display-inline-block">
            <a href="/elite">Elite ’16</a>
        </li>

    </ul>

        </div>
    </div>

                    <ul class="action-link-list action-link-list--small">
        
        <li>
            


    <a class="arrange arrange--middle send-to-friend" data-pop-uri="/send_to_friend/review/jgf6R6T6P0pxIegveFyRoQ" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-share icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_share" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Share review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle embed-review" data-pop-uri="/review_embed_modal/jgf6R6T6P0pxIegveFyRoQ" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-embed icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_embed" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Embed review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-compliment" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-compliment icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_compliment" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Compliment
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-pm" href="javascript:;" rel="Michelle T.">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-speech icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_speech" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Send message
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-add" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="d0AMOvtguHv1nYxb9mYf5A">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-following icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_following" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Follow Michelle T.
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-remove hidden" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="d0AMOvtguHv1nYxb9mYf5A">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-unfollow icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_unfollow" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Stop following Michelle T.
        </div>
    </a>

        </li>


    </ul>

        </div>
    </div>

        <div class="review-wrapper">
                <div class="review-content">
            <div class="biz-rating biz-rating-large clearfix">
        <div >
                    


    <div class="i-stars i-stars--regular-4 rating-large" title="4.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="4.0 star rating">
    </div>



        </div>
            <span class="rating-qualifier">
        8/23/2016
    </span>

    </div>

                        <ul class="review-tags">
                <li class="review-tags_item">

        <span >
            <span aria-hidden="true" style="fill: #0077bc; width: 18px; height: 18px;" class="icon icon--18-check-in icon--size-18 u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_check_in" />
    </svg>
</span>1 check-in
        </span>
    </li>

    </ul>


                <p lang="en">I love me some boba. Always. And after seeing soOooOO many photos on social media, I knew I had to try it when I visited SF. <br><br>I went here twice. I was THAT obsessed. The store itself is quite small and only offers a bar-countertop with just 4 stools available for seating. So if you plan to sit around to do do any work, this is not the place to do that. The line can get long and extend outside, but it does move pretty quick. <br><br>[[Iced Matcha Latte with Boba]] Lately, I have been obsessed with anything matcha, so this drink was definitely calling my name. The matcha was smooth, bold, and not chalky. I absolutely hate it when matcha drinks are chalky. Yuck! The boba was soft and chewy; a little sweet, but not too bland either. Add-ons are an extra 50 cents, but so worth it! <br><br>The first time I went, I didn&#39;t have them change the sweetness level and kept it at 100%. Now I am one to usually take my drinks pretty sweet. But this was just way too sweet. So the 2nd time I went, I had them knock it down to 75% and it was a little better. The next time I go, I think I&#39;ll do 50% sweetness.<br><br>You can choose from regular milk, almond, or soy milk you won&#39;t get charged extra! Sweet! <br><br>It is a bit pricey here. If I remember correctly it was around $5 for the 24 oz. However, the pricing is reflected in the quality ingredients, so it&#39;s definitely worth it.<br><br>My first time here, I drove, so I was lucky enough to find a spot (metered, of course) within a 5 minute walking distance. The second time, I Uber-ed it so no need to pay for parking, yay!<br><br>I am hoping that Boba Guys will one day open in Orange County because I will be all over that shiz.</p> 
                        
        <ul class="photo-box-grid clearfix js-content-expandable lightbox-media-parent" data-ad-logging-csrf="d5914a75327491d026c1399caf993fa6fbc76f73485f25d094bb5df52f761a99" data-ad-logging-uri="/ad_acknowledgment" data-ga-path="media_lightbox/servlet:biz_details/type:biz" data-logging-csrf="4ac56838914c80cf7089cd149a39f5d6d938929e1ec91e2f42852d2116286e0c" data-logging-uri="/biz_photos/18TtLS_JtiS2OH30FLqNrw/log_views" data-media-count="2" data-media-url="/biz_photos/get_media_slice/18TtLS_JtiS2OH30FLqNrw?reviewid=jgf6R6T6P0pxIegveFyRoQ" data-starting-index="0">
                <li style="width: 168px; height: 168px;">
                        <div class="photo-box photo-box--interactive is-loading">
        
                <img data-async-src=https://s3-media1.fl.yelpcdn.com/bphoto/rrU6XoybQJNDmWRs3_fT4g/168s.jpg alt="Photo of Boba Guys - San Francisco, CA, United States" class="photo-box-img no-js-hidden" height="168" src="https://s3-media2.fl.yelpcdn.com/assets/srv0/yelp_styleguide/978c1bee49d7/assets/img/1x1.png" width="168">

            <noscript>
                    <img alt="Photo of Boba Guys - San Francisco, CA, United States" class="photo-box-img" height="168" src="https://s3-media1.fl.yelpcdn.com/bphoto/rrU6XoybQJNDmWRs3_fT4g/168s.jpg" width="168">

            </noscript>



        

            <a class="biz-shim js-lightbox-media-link js-analytics-click" data-analytics-label="biz-photo"  href="/biz_photos/boba-guys-san-francisco-4?reviewid=jgf6R6T6P0pxIegveFyRoQ&amp;select=rrU6XoybQJNDmWRs3_fT4g">
            <span class="offscreen"></span>
    </a>

    </div>

                </li>
                <li style="width: 168px; height: 168px;">
                        <div class="photo-box photo-box--interactive is-loading">
        
                <img data-async-src=https://s3-media4.fl.yelpcdn.com/bphoto/tG-mCx9mwyxqgv7Ujt8BpA/168s.jpg alt="Photo of Boba Guys - San Francisco, CA, United States. Matcha green tea" class="photo-box-img no-js-hidden" height="168" src="https://s3-media2.fl.yelpcdn.com/assets/srv0/yelp_styleguide/978c1bee49d7/assets/img/1x1.png" width="168">

            <noscript>
                    <img alt="Photo of Boba Guys - San Francisco, CA, United States. Matcha green tea" class="photo-box-img" height="168" src="https://s3-media4.fl.yelpcdn.com/bphoto/tG-mCx9mwyxqgv7Ujt8BpA/168s.jpg" width="168">

            </noscript>



                <div class="photo-box-overlay js-overlay">
                <div class="photo-box-overlay_caption">Matcha green tea</div>
        </div>


            <a class="biz-shim js-lightbox-media-link js-analytics-click" data-analytics-label="biz-photo"  href="/biz_photos/boba-guys-san-francisco-4?reviewid=jgf6R6T6P0pxIegveFyRoQ&amp;select=tG-mCx9mwyxqgv7Ujt8BpA">
            <span class="offscreen">Matcha green tea</span>
    </a>

    </div>

                </li>

        </ul>

    </div>
    <div class="review-footer clearfix">
                    <div class="rateReview voting-feedback" data-review-id="jgf6R6T6P0pxIegveFyRoQ">
                    <p class="voting-intro voting-prompt">
        Was this review &hellip;?
    </p>
    <ul class="voting-buttons" data-csrf-token="c5f44b4ca2649aeb4492d827a797d61476922eef4584ff73370a63d021703fa8">
            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small useful js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="useful">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-useful-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_useful_outline" />
    </svg>
</span>    <span class="vote-type">Useful</span>
    <span class="count">4</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small funny js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="funny">
            <span aria-hidden="true" style="fill: #41a700; width: 18px; height: 18px;" class="icon icon--18-funny-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_funny_outline" />
    </svg>
</span>    <span class="vote-type">Funny</span>
    <span class="count">3</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small cool js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="cool">
            <span aria-hidden="true" style="fill: #0097ec; width: 18px; height: 18px;" class="icon icon--18-cool-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_cool_outline" />
    </svg>
</span>    <span class="vote-type">Cool</span>
    <span class="count">4</span>
    </a>
    </li>

    </ul>

        </div>

    </div>
    
    

        </div>
    </div>

        </li>
        <li >
                <div class="review review--with-sidebar" data-review-id="A1tIMdcaXkglQo0_7zjmGQ" data-signup-object="user_id:EA4PcuKqeRw1zI1RZuIO7g">
            <div class="review-sidebar">
        <div class="review-sidebar-content">
                <div class="ypassport media-block">
        <div class="media-avatar responsive-photo-box">
                        <div class="photo-box pb-60s" data-hovercard-id="gjhdHsqgfv73uLKkFREcnA">
                <a href="/user_details?userid=EA4PcuKqeRw1zI1RZuIO7g" class="js-analytics-click" data-analytics-label="user-photo">
                <img alt="Patricia Z." class="photo-box-img" height="60" src="https://s3-media4.fl.yelpcdn.com/photo/eFaYZRPV7Wpz29ga0OQLug/60s.jpg" width="60">

        </a>

    </div>



        </div>
        <div class="media-story">
                <ul class="user-passport-info">
        <li class="user-name">
                    <a class="user-display-name" href="/user_details?userid=EA4PcuKqeRw1zI1RZuIO7g" data-hovercard-id="gjhdHsqgfv73uLKkFREcnA">Patricia Z.</a>
        </li>
        <li class="user-location responsive-hidden-small">
            <b>San Francisco, CA</b>
        </li>
    </ul>

            

    <ul class="user-passport-stats">
        <li class="friend-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-friends icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_friends" />
    </svg>
</span>
            <b>217</b> friends
        </li>
        <li class="review-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-review icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_review" />
    </svg>
</span>
            <b>176</b> reviews
        </li>
                <li class="is-elite responsive-small-display-inline-block">
            <a href="/elite">Elite ’16</a>
        </li>

    </ul>

        </div>
    </div>

                    <ul class="action-link-list action-link-list--small">
        
        <li>
            


    <a class="arrange arrange--middle send-to-friend" data-pop-uri="/send_to_friend/review/A1tIMdcaXkglQo0_7zjmGQ" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-share icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_share" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Share review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle embed-review" data-pop-uri="/review_embed_modal/A1tIMdcaXkglQo0_7zjmGQ" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-embed icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_embed" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Embed review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-compliment" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-compliment icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_compliment" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Compliment
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-pm" href="javascript:;" rel="Patricia Z.">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-speech icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_speech" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Send message
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-add" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="EA4PcuKqeRw1zI1RZuIO7g">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-following icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_following" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Follow Patricia Z.
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-remove hidden" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="EA4PcuKqeRw1zI1RZuIO7g">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-unfollow icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_unfollow" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Stop following Patricia Z.
        </div>
    </a>

        </li>


    </ul>

        </div>
    </div>

        <div class="review-wrapper">
                <div class="review-content">
            <div class="biz-rating biz-rating-large clearfix">
        <div >
                    


    <div class="i-stars i-stars--regular-4 rating-large" title="4.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="4.0 star rating">
    </div>



        </div>
            <span class="rating-qualifier">
        8/19/2016
    </span>

    </div>

                        <ul class="review-tags">
                <li class="review-tags_item">

        <span >
            <span aria-hidden="true" style="fill: #0077bc; width: 18px; height: 18px;" class="icon icon--18-check-in icon--size-18 u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_check_in" />
    </svg>
</span>1 check-in
        </span>
    </li>

    </ul>


                <p lang="en">Good stuff.<br><br>A few of my friends and I were itching for boba, so we stopped by Boba Guys on a Sunday afternoon. There was a short line, probably about 10 minutes or so. I ordered the Iced Matcha Latte with almond milk (at no additional charge, pretty neat) and quite enjoyed it. The matcha flavor is bold and full-bodied, but not too overpowering over the almond milk. The honey came through very nicely and was a tasty, untraditional touch. A bit pricey, but that&#39;s definitely reflected in the quality ingredients. Would come back.</p> 
                        
        <ul class="photo-box-grid clearfix js-content-expandable lightbox-media-parent" data-ad-logging-csrf="d5914a75327491d026c1399caf993fa6fbc76f73485f25d094bb5df52f761a99" data-ad-logging-uri="/ad_acknowledgment" data-ga-path="media_lightbox/servlet:biz_details/type:biz" data-logging-csrf="4ac56838914c80cf7089cd149a39f5d6d938929e1ec91e2f42852d2116286e0c" data-logging-uri="/biz_photos/18TtLS_JtiS2OH30FLqNrw/log_views" data-media-count="1" data-media-url="/biz_photos/get_media_slice/18TtLS_JtiS2OH30FLqNrw?reviewid=A1tIMdcaXkglQo0_7zjmGQ" data-starting-index="0">
                <li style="width: 348px; height: 348px;">
                        <div class="photo-box photo-box--interactive is-loading">
        
                <img data-async-src=https://s3-media4.fl.yelpcdn.com/bphoto/gjG889mZtnDpfjyF0hh1hg/348s.jpg alt="Photo of Boba Guys - San Francisco, CA, United States. iced matcha latte with almond milk" class="photo-box-img no-js-hidden" height="348" src="https://s3-media2.fl.yelpcdn.com/assets/srv0/yelp_styleguide/978c1bee49d7/assets/img/1x1.png" width="348">

            <noscript>
                    <img alt="Photo of Boba Guys - San Francisco, CA, United States. iced matcha latte with almond milk" class="photo-box-img" height="348" src="https://s3-media4.fl.yelpcdn.com/bphoto/gjG889mZtnDpfjyF0hh1hg/348s.jpg" width="348">

            </noscript>



                <div class="photo-box-overlay js-overlay">
                <div class="photo-box-overlay_caption">iced matcha latte with almond milk</div>
        </div>


            <a class="biz-shim js-lightbox-media-link js-analytics-click" data-analytics-label="biz-photo"  href="/biz_photos/boba-guys-san-francisco-4?reviewid=A1tIMdcaXkglQo0_7zjmGQ&amp;select=gjG889mZtnDpfjyF0hh1hg">
            <span class="offscreen">iced matcha latte with almond milk</span>
    </a>

    </div>

                </li>

        </ul>

    </div>
    <div class="review-footer clearfix">
                    <div class="rateReview voting-feedback" data-review-id="A1tIMdcaXkglQo0_7zjmGQ">
                    <p class="voting-intro voting-prompt">
        Was this review &hellip;?
    </p>
    <ul class="voting-buttons" data-csrf-token="c5f44b4ca2649aeb4492d827a797d61476922eef4584ff73370a63d021703fa8">
            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small useful js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="useful">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-useful-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_useful_outline" />
    </svg>
</span>    <span class="vote-type">Useful</span>
    <span class="count">4</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small funny js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="funny">
            <span aria-hidden="true" style="fill: #41a700; width: 18px; height: 18px;" class="icon icon--18-funny-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_funny_outline" />
    </svg>
</span>    <span class="vote-type">Funny</span>
    <span class="count">3</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small cool js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="cool">
            <span aria-hidden="true" style="fill: #0097ec; width: 18px; height: 18px;" class="icon icon--18-cool-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_cool_outline" />
    </svg>
</span>    <span class="vote-type">Cool</span>
    <span class="count">3</span>
    </a>
    </li>

    </ul>

        </div>

    </div>
    
    

        </div>
    </div>

        </li>
        <li >
                <div class="review review--with-sidebar" data-review-id="zGtn5aYBrWSlhBNZk2Ehkw" data-signup-object="user_id:08Dhk90xsB7X_0CmMfYMCg">
            <div class="review-sidebar">
        <div class="review-sidebar-content">
                <div class="ypassport media-block">
        <div class="media-avatar responsive-photo-box">
                        <div class="photo-box pb-60s" data-hovercard-id="_wAEGsC3AmCZnZo9Nmnq9Q">
                <a href="/user_details?userid=08Dhk90xsB7X_0CmMfYMCg" class="js-analytics-click" data-analytics-label="user-photo">
                <img alt="Hurjane V." class="photo-box-img" height="60" src="https://s3-media4.fl.yelpcdn.com/photo/-s16GPYlILqkuyrse5zsIg/60s.jpg" width="60">

        </a>

    </div>



        </div>
        <div class="media-story">
                <ul class="user-passport-info">
        <li class="user-name">
                    <a class="user-display-name" href="/user_details?userid=08Dhk90xsB7X_0CmMfYMCg" data-hovercard-id="_wAEGsC3AmCZnZo9Nmnq9Q">Hurjane V.</a>
        </li>
        <li class="user-location responsive-hidden-small">
            <b>Sunnyvale, CA</b>
        </li>
    </ul>

            

    <ul class="user-passport-stats">
        <li class="friend-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-friends icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_friends" />
    </svg>
</span>
            <b>771</b> friends
        </li>
        <li class="review-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-review icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_review" />
    </svg>
</span>
            <b>613</b> reviews
        </li>
                <li class="is-elite responsive-small-display-inline-block">
            <a href="/elite">Elite ’16</a>
        </li>

    </ul>

        </div>
    </div>

                    <ul class="action-link-list action-link-list--small">
        
        <li>
            


    <a class="arrange arrange--middle send-to-friend" data-pop-uri="/send_to_friend/review/zGtn5aYBrWSlhBNZk2Ehkw" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-share icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_share" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Share review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle embed-review" data-pop-uri="/review_embed_modal/zGtn5aYBrWSlhBNZk2Ehkw" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-embed icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_embed" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Embed review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-compliment" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-compliment icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_compliment" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Compliment
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-pm" href="javascript:;" rel="Hurjane V.">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-speech icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_speech" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Send message
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-add" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="08Dhk90xsB7X_0CmMfYMCg">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-following icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_following" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Follow Hurjane V.
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-remove hidden" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="08Dhk90xsB7X_0CmMfYMCg">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-unfollow icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_unfollow" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Stop following Hurjane V.
        </div>
    </a>

        </li>


    </ul>

        </div>
    </div>

        <div class="review-wrapper">
                <div class="review-content">
            <div class="biz-rating biz-rating-large clearfix">
        <div >
                    


    <div class="i-stars i-stars--regular-2 rating-large" title="2.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="2.0 star rating">
    </div>



        </div>
            <span class="rating-qualifier">
        8/8/2016
    </span>

    </div>

                        <ul class="review-tags">
                <li class="review-tags_item">

        <span >
            <span aria-hidden="true" style="fill: #0077bc; width: 18px; height: 18px;" class="icon icon--18-check-in icon--size-18 u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_check_in" />
    </svg>
</span>1 check-in
        </span>
    </li>

    </ul>

                <ul class="review-tags">
        <li class="review-tags_item">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-list icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_list" />
    </svg>
</span>
            Listed in <a href="/list/2016-yelp-100-review-challenge-fremont-2" title="Class of 2016...means more foodie adventures! (Senioritis is strong)">2016 Yelp 100 Review Challenge</a>, <a href="/list/2016-bay-area-shenanigans-menlo-park" title="Post grad life eats!">2016: Bay Area Shenanigans</a>, <a href="/list/bobalife-fremont-2" title="A cup of boba after every meal is the real deal!">#BOBALIFE</a>, <a href="/list/sf-funnnn-san-francisco" title="When I take the effort to drive 1 hour each way to see some amazing things! (And eat amazing food.)">SF FUNNNN</a>
        </li>
    </ul>


                <p lang="en">ERRR. Not worth the hype, TBH. <br><br>Waited in line for around 20 minutes and was super excited since everyone seemed to be enjoying their drinks. <br><br>We ordered:<br>-1 16 oz. iced Jasmine Milk Tea without toppings, organic milk, 25% sugar // Asked for no ice, still got ice. Jasmine tea flavor is super faint- overpowered by milk (at least 2/3 of the cup was milk instead). Also, organic milk tasted more like soymilk since it wasn&#39;t rich or creamy at all....a 1/5 drink.<br><br>-1 16 oz. iced HK Style Milk Tea with pearls, organic milk, 50% sugar // Condensed milk overkill- can&#39;t imagine what it would be if it was 100% sweetness! There was barely any boba and the boba was too stiff- not soft at all. It says &#34;blended with condensed milk&#34;...felt like I was eating straight out of the jar myself.<br><br>Pros:<br>+Fast service. Waited in line for 20 minutes, ordered in 1 minute, got the drink in 2 minutes. <br>+Cute concept. Cute ant-eater, crisp interior. Good selection of basics on the menu!<br><br>Cons:<br>-Meh service. Lady looked piss the whole time...good thing I didn&#39;t tip. <br>-Pricey. $8 for two drinks? I would rather spend my $8 on a cream tart at Tartine&#39;s. <br><br>Tips/Observations:<br>-Why don&#39;t they have a stamp card system? Not that I would want one..but I&#39;m sure there are die-hard fans here. <br>-Small space. Definitely grab and go unless you manage to steal a spot by the window. <br>-What is their signature drink here? <br><br>Overall, not impressed. They can&#39;t even get the basic teas right....not even sure what more to expect.<br><br>Nice try, Boba Guys. May attempt to get it again at a different location...and try their swirly pink drink.</p> 
                        
        <ul class="photo-box-grid clearfix js-content-expandable lightbox-media-parent" data-ad-logging-csrf="d5914a75327491d026c1399caf993fa6fbc76f73485f25d094bb5df52f761a99" data-ad-logging-uri="/ad_acknowledgment" data-ga-path="media_lightbox/servlet:biz_details/type:biz" data-logging-csrf="4ac56838914c80cf7089cd149a39f5d6d938929e1ec91e2f42852d2116286e0c" data-logging-uri="/biz_photos/18TtLS_JtiS2OH30FLqNrw/log_views" data-media-count="7" data-media-url="/biz_photos/get_media_slice/18TtLS_JtiS2OH30FLqNrw?reviewid=zGtn5aYBrWSlhBNZk2Ehkw" data-starting-index="0">
                <li style="width: 348px; height: 348px;">
                        <div class="photo-box photo-box--interactive is-loading">
        
                <img data-async-src=https://s3-media1.fl.yelpcdn.com/bphoto/7oJM0-2BoLx7BuvoBQRo1A/348s.jpg alt="Photo of Boba Guys - San Francisco, CA, United States. Jasmine Milk tea" class="photo-box-img no-js-hidden" height="348" src="https://s3-media2.fl.yelpcdn.com/assets/srv0/yelp_styleguide/978c1bee49d7/assets/img/1x1.png" width="348">

            <noscript>
                    <img alt="Photo of Boba Guys - San Francisco, CA, United States. Jasmine Milk tea" class="photo-box-img" height="348" src="https://s3-media1.fl.yelpcdn.com/bphoto/7oJM0-2BoLx7BuvoBQRo1A/348s.jpg" width="348">

            </noscript>



                <div class="photo-box-overlay js-overlay">
                <div class="photo-box-overlay_caption">Jasmine Milk tea</div>
        </div>


            <a class="biz-shim js-lightbox-media-link js-analytics-click" data-analytics-label="biz-photo"  href="/biz_photos/boba-guys-san-francisco-4?reviewid=zGtn5aYBrWSlhBNZk2Ehkw&amp;select=7oJM0-2BoLx7BuvoBQRo1A">
            <span class="offscreen">Jasmine Milk tea</span>
    </a>

    </div>

                </li>
                <li style="width: 168px; height: 168px;">
                        <div class="photo-box photo-box--interactive is-loading">
        
                <img data-async-src=https://s3-media3.fl.yelpcdn.com/bphoto/qNKfNfXeRvA-slOjImp9IQ/168s.jpg alt="Photo of Boba Guys - San Francisco, CA, United States. HK style with boba" class="photo-box-img no-js-hidden" height="168" src="https://s3-media2.fl.yelpcdn.com/assets/srv0/yelp_styleguide/978c1bee49d7/assets/img/1x1.png" width="168">

            <noscript>
                    <img alt="Photo of Boba Guys - San Francisco, CA, United States. HK style with boba" class="photo-box-img" height="168" src="https://s3-media3.fl.yelpcdn.com/bphoto/qNKfNfXeRvA-slOjImp9IQ/168s.jpg" width="168">

            </noscript>



                <div class="photo-box-overlay js-overlay">
                <div class="photo-box-overlay_caption">HK style with boba</div>
        </div>


            <a class="biz-shim js-lightbox-media-link js-analytics-click" data-analytics-label="biz-photo"  href="/biz_photos/boba-guys-san-francisco-4?reviewid=zGtn5aYBrWSlhBNZk2Ehkw&amp;select=qNKfNfXeRvA-slOjImp9IQ">
            <span class="offscreen">HK style with boba</span>
    </a>

    </div>

                </li>
                <li style="width: 168px; height: 168px;">
                        <div class="photo-box photo-box--interactive is-loading">
        
                <img data-async-src=https://s3-media4.fl.yelpcdn.com/bphoto/edu0LtNZEt8mTu1PATeMMg/168s.jpg alt="Photo of Boba Guys - San Francisco, CA, United States" class="photo-box-img no-js-hidden" height="168" src="https://s3-media2.fl.yelpcdn.com/assets/srv0/yelp_styleguide/978c1bee49d7/assets/img/1x1.png" width="168">

            <noscript>
                    <img alt="Photo of Boba Guys - San Francisco, CA, United States" class="photo-box-img" height="168" src="https://s3-media4.fl.yelpcdn.com/bphoto/edu0LtNZEt8mTu1PATeMMg/168s.jpg" width="168">

            </noscript>



        

            <a class="biz-shim js-lightbox-media-link js-analytics-click" data-analytics-label="biz-photo"  href="/biz_photos/boba-guys-san-francisco-4?reviewid=zGtn5aYBrWSlhBNZk2Ehkw&amp;select=edu0LtNZEt8mTu1PATeMMg">
            <span class="offscreen"></span>
    </a>

    </div>

                </li>

                <li class="more-review-photos">
                    <a href="/biz_photos/boba-guys-san-francisco-4?userid=08Dhk90xsB7X_0CmMfYMCg" class="js-content-expander">
                        See all photos from Hurjane V. for Boba Guys
                    </a>
                </li>
        </ul>

    </div>
    <div class="review-footer clearfix">
                    <div class="rateReview voting-feedback" data-review-id="zGtn5aYBrWSlhBNZk2Ehkw">
                    <p class="voting-intro voting-prompt">
        Was this review &hellip;?
    </p>
    <ul class="voting-buttons" data-csrf-token="c5f44b4ca2649aeb4492d827a797d61476922eef4584ff73370a63d021703fa8">
            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small useful js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="useful">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-useful-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_useful_outline" />
    </svg>
</span>    <span class="vote-type">Useful</span>
    <span class="count">10</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small funny js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="funny">
            <span aria-hidden="true" style="fill: #41a700; width: 18px; height: 18px;" class="icon icon--18-funny-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_funny_outline" />
    </svg>
</span>    <span class="vote-type">Funny</span>
    <span class="count">8</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small cool js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="cool">
            <span aria-hidden="true" style="fill: #0097ec; width: 18px; height: 18px;" class="icon icon--18-cool-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_cool_outline" />
    </svg>
</span>    <span class="vote-type">Cool</span>
    <span class="count">9</span>
    </a>
    </li>

    </ul>

        </div>

    </div>
    
    

        </div>
    </div>

        </li>
        <li >
                <div class="review review--with-sidebar" data-review-id="fkdTo6tkTGXn7TquhmyyLA" data-signup-object="user_id:_44kOHlluBGZVkyOtYv_lQ">
            <div class="review-sidebar">
        <div class="review-sidebar-content">
                <div class="ypassport media-block">
        <div class="media-avatar responsive-photo-box">
                        <div class="photo-box pb-60s" data-hovercard-id="CcR1XFGB6YDpnOOoVgPCIw">
                <a href="/user_details?userid=_44kOHlluBGZVkyOtYv_lQ" class="js-analytics-click" data-analytics-label="user-photo">
                <img alt="Anna H." class="photo-box-img" height="60" src="https://s3-media3.fl.yelpcdn.com/photo/E5jUcIt3pb31Hly0UEhWJw/60s.jpg" width="60">

        </a>

    </div>



        </div>
        <div class="media-story">
                <ul class="user-passport-info">
        <li class="user-name">
                    <a class="user-display-name" href="/user_details?userid=_44kOHlluBGZVkyOtYv_lQ" data-hovercard-id="CcR1XFGB6YDpnOOoVgPCIw">Anna H.</a>
        </li>
        <li class="user-location responsive-hidden-small">
            <b>Chicago, IL</b>
        </li>
    </ul>

            

    <ul class="user-passport-stats">
        <li class="friend-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-friends icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_friends" />
    </svg>
</span>
            <b>195</b> friends
        </li>
        <li class="review-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-review icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_review" />
    </svg>
</span>
            <b>53</b> reviews
        </li>
                <li class="is-elite responsive-small-display-inline-block">
            <a href="/elite">Elite ’16</a>
        </li>

    </ul>

        </div>
    </div>

                    <ul class="action-link-list action-link-list--small">
        
        <li>
            


    <a class="arrange arrange--middle send-to-friend" data-pop-uri="/send_to_friend/review/fkdTo6tkTGXn7TquhmyyLA" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-share icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_share" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Share review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle embed-review" data-pop-uri="/review_embed_modal/fkdTo6tkTGXn7TquhmyyLA" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-embed icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_embed" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Embed review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-compliment" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-compliment icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_compliment" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Compliment
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-pm" href="javascript:;" rel="Anna H.">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-speech icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_speech" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Send message
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-add" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="_44kOHlluBGZVkyOtYv_lQ">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-following icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_following" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Follow Anna H.
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-remove hidden" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="_44kOHlluBGZVkyOtYv_lQ">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-unfollow icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_unfollow" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Stop following Anna H.
        </div>
    </a>

        </li>


    </ul>

        </div>
    </div>

        <div class="review-wrapper">
                <div class="review-content">
            <div class="biz-rating biz-rating-large clearfix">
        <div >
                    


    <div class="i-stars i-stars--regular-2 rating-large" title="2.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="2.0 star rating">
    </div>



        </div>
            <span class="rating-qualifier">
        8/14/2016
    </span>

    </div>

        
                <p lang="en">This is my second time at Boba Guys. The first time, I got the matcha latte with pearls. I didn&#39;t enjoy it too much, but that&#39;s probably because I don&#39;t like matcha very much. <br><br>This time around, I got the HK-style tea with pearls at 50% sweetness. I was pretty unimpressed. I didn&#39;t taste any of the condensed milk, which was also why I lowered the sweetness. I spent $4.25 for a regular-sized drink that, in my opinion, did not taste unique at all. Lines were also insane and parking impossible. However, drinks came out very quickly once we placed our orders.<br><br>I had a taste of the horchata tea and it didn&#39;t seem too special either. I prefer real horchata that costs a fraction of the price! I don&#39;t think I&#39;ll be back - I&#39;ve effectively tasted three of their most popular drinks and have been dissatisfied with all of them.</p> 
            
    </div>
    <div class="review-footer clearfix">
                    <div class="rateReview voting-feedback" data-review-id="fkdTo6tkTGXn7TquhmyyLA">
                    <p class="voting-intro voting-prompt">
        Was this review &hellip;?
    </p>
    <ul class="voting-buttons" data-csrf-token="c5f44b4ca2649aeb4492d827a797d61476922eef4584ff73370a63d021703fa8">
            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small useful js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="useful">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-useful-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_useful_outline" />
    </svg>
</span>    <span class="vote-type">Useful</span>
    <span class="count">4</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small funny js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="funny">
            <span aria-hidden="true" style="fill: #41a700; width: 18px; height: 18px;" class="icon icon--18-funny-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_funny_outline" />
    </svg>
</span>    <span class="vote-type">Funny</span>
    <span class="count">3</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small cool js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="cool">
            <span aria-hidden="true" style="fill: #0097ec; width: 18px; height: 18px;" class="icon icon--18-cool-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_cool_outline" />
    </svg>
</span>    <span class="vote-type">Cool</span>
    <span class="count">2</span>
    </a>
    </li>

    </ul>

        </div>

    </div>
    
    

        </div>
    </div>

        </li>
        <li >
                <div class="review review--with-sidebar" data-review-id="Lz9UtpXNOKvIDoMPDVdJMA" data-signup-object="user_id:39ukxvwXoEO7bJiZy3BxOw">
            <div class="review-sidebar">
        <div class="review-sidebar-content">
                <div class="ypassport media-block">
        <div class="media-avatar responsive-photo-box">
                        <div class="photo-box pb-60s" data-hovercard-id="-QiWWvixXNKdjmmmtC7lJA">
                <a href="/user_details?userid=39ukxvwXoEO7bJiZy3BxOw" class="js-analytics-click" data-analytics-label="user-photo">
                <img alt="Hayley D." class="photo-box-img" height="60" src="https://s3-media3.fl.yelpcdn.com/photo/vZHtYkONDFEkm6E7KJW1_w/60s.jpg" width="60">

        </a>

    </div>



        </div>
        <div class="media-story">
                <ul class="user-passport-info">
        <li class="user-name">
                    <a class="user-display-name" href="/user_details?userid=39ukxvwXoEO7bJiZy3BxOw" data-hovercard-id="-QiWWvixXNKdjmmmtC7lJA">Hayley D.</a>
        </li>
        <li class="user-location responsive-hidden-small">
            <b>Aptos, CA</b>
        </li>
    </ul>

            

    <ul class="user-passport-stats">
        <li class="friend-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-friends icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_friends" />
    </svg>
</span>
            <b>22</b> friends
        </li>
        <li class="review-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-review icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_review" />
    </svg>
</span>
            <b>113</b> reviews
        </li>
        
    </ul>

        </div>
    </div>

                    <ul class="action-link-list action-link-list--small">
        
        <li>
            


    <a class="arrange arrange--middle send-to-friend" data-pop-uri="/send_to_friend/review/Lz9UtpXNOKvIDoMPDVdJMA" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-share icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_share" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Share review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle embed-review" data-pop-uri="/review_embed_modal/Lz9UtpXNOKvIDoMPDVdJMA" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-embed icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_embed" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Embed review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-compliment" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-compliment icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_compliment" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Compliment
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-pm" href="javascript:;" rel="Hayley D.">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-speech icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_speech" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Send message
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-add" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="39ukxvwXoEO7bJiZy3BxOw">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-following icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_following" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Follow Hayley D.
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-remove hidden" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="39ukxvwXoEO7bJiZy3BxOw">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-unfollow icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_unfollow" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Stop following Hayley D.
        </div>
    </a>

        </li>


    </ul>

        </div>
    </div>

        <div class="review-wrapper">
                <div class="review-content">
            <div class="biz-rating biz-rating-large clearfix">
        <div >
                    


    <div class="i-stars i-stars--regular-5 rating-large" title="5.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="5.0 star rating">
    </div>



        </div>
            <span class="rating-qualifier">
        11/9/2016
            <small class="bullet-before has-archived-review">
                <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-update icon--size-18 icon--warning">
    <svg class="icon_svg">
        <use xlink:href="#18x18_update" />
    </svg>
</span>
                <strong>Updated review</strong>
            </small>
    </span>

    </div>

        
                <p lang="en">Every time I come here it&#39;s so so good. This time I got a jasmine milk tea, 50% sweetness, with boba. <br><br>Staff was super nice, and my tea was ready super quick. Coming on the weekday is the way to go -- no line at all. On the weekends it takes around 30 min in line.</p> 
                        
        <ul class="photo-box-grid clearfix js-content-expandable lightbox-media-parent" data-ad-logging-csrf="d5914a75327491d026c1399caf993fa6fbc76f73485f25d094bb5df52f761a99" data-ad-logging-uri="/ad_acknowledgment" data-ga-path="media_lightbox/servlet:biz_details/type:biz" data-logging-csrf="4ac56838914c80cf7089cd149a39f5d6d938929e1ec91e2f42852d2116286e0c" data-logging-uri="/biz_photos/18TtLS_JtiS2OH30FLqNrw/log_views" data-media-count="1" data-media-url="/biz_photos/get_media_slice/18TtLS_JtiS2OH30FLqNrw?reviewid=Lz9UtpXNOKvIDoMPDVdJMA" data-starting-index="0">
                <li style="width: 348px; height: 348px;">
                        <div class="photo-box photo-box--interactive is-loading">
        
                <img data-async-src=https://s3-media2.fl.yelpcdn.com/bphoto/gh9ezSKoS4yr2EoHlRa5rA/348s.jpg alt="Photo of Boba Guys - San Francisco, CA, United States. Jasmine milk tea with boba. (50% sweetness)" class="photo-box-img no-js-hidden" height="348" src="https://s3-media2.fl.yelpcdn.com/assets/srv0/yelp_styleguide/978c1bee49d7/assets/img/1x1.png" width="348">

            <noscript>
                    <img alt="Photo of Boba Guys - San Francisco, CA, United States. Jasmine milk tea with boba. (50% sweetness)" class="photo-box-img" height="348" src="https://s3-media2.fl.yelpcdn.com/bphoto/gh9ezSKoS4yr2EoHlRa5rA/348s.jpg" width="348">

            </noscript>



                <div class="photo-box-overlay js-overlay">
                <div class="photo-box-overlay_caption">Jasmine milk tea with boba. (50% sweetness)</div>
        </div>


            <a class="biz-shim js-lightbox-media-link js-analytics-click" data-analytics-label="biz-photo"  href="/biz_photos/boba-guys-san-francisco-4?reviewid=Lz9UtpXNOKvIDoMPDVdJMA&amp;select=gh9ezSKoS4yr2EoHlRa5rA">
            <span class="offscreen">Jasmine milk tea with boba. (50% sweetness)</span>
    </a>

    </div>

                </li>

        </ul>

    </div>
    <div class="review-footer clearfix">
                    <div class="rateReview voting-feedback" data-review-id="Lz9UtpXNOKvIDoMPDVdJMA">
                    <p class="voting-intro voting-prompt">
        Was this review &hellip;?
    </p>
    <ul class="voting-buttons" data-csrf-token="c5f44b4ca2649aeb4492d827a797d61476922eef4584ff73370a63d021703fa8">
            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small useful js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="useful">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-useful-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_useful_outline" />
    </svg>
</span>    <span class="vote-type">Useful</span>
    <span class="count"></span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small funny js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="funny">
            <span aria-hidden="true" style="fill: #41a700; width: 18px; height: 18px;" class="icon icon--18-funny-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_funny_outline" />
    </svg>
</span>    <span class="vote-type">Funny</span>
    <span class="count"></span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small cool js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="cool">
            <span aria-hidden="true" style="fill: #0097ec; width: 18px; height: 18px;" class="icon icon--18-cool-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_cool_outline" />
    </svg>
</span>    <span class="vote-type">Cool</span>
    <span class="count"></span>
    </a>
    </li>

    </ul>

        </div>

    </div>
                <div class="previous-review clearfix">
            <div class="biz-rating biz-rating-large clearfix">
                


    <div class="i-stars i-stars--regular-5 rating-large" title="5.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="5.0 star rating">
    </div>



        <span class="rating-qualifier">
            5/2/2016
            <strong class="bullet-before has-previous-review">
                <small>Previous review</small>
            </strong>
        </span>
    </div>

                <span class="js-expandable-comment comment-truncated">
            <span class="js-content-toggleable">Always great. I got an iced 24oz coconut green milk tea with boba and 50% sweetness. Tastes fresh…</span>
            <span class="js-content-toggleable hidden">Always great. I got an iced 24oz coconut green milk tea with boba and 50% sweetness. Tastes fresh and the boba is perfect. PLEASE open a location in the sunset district! <br><br>The most recent time I went and got a strawberry matcha iced latte and it was really good! A little bit sweeter because they can&#39;t regulate the amount of sugar in this one, so if you want something sweet and on the heavier side then for sure get it!</span>
            <a href="javascript:;" class="read-more js-review-expander">Read more</a>
                
            <div class="review-footer js-content-toggleable hidden clearfix">
                            <div class="rateReview voting-feedback" data-review-id="0YQ9uvyDpQlD0udK5R0uTw">
                    <p class="voting-intro voting-prompt">
        Was this review &hellip;?
    </p>
    <ul class="voting-buttons" data-csrf-token="c5f44b4ca2649aeb4492d827a797d61476922eef4584ff73370a63d021703fa8">
            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small useful js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="useful">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-useful-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_useful_outline" />
    </svg>
</span>    <span class="vote-type">Useful</span>
    <span class="count">1</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small funny js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="funny">
            <span aria-hidden="true" style="fill: #41a700; width: 18px; height: 18px;" class="icon icon--18-funny-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_funny_outline" />
    </svg>
</span>    <span class="vote-type">Funny</span>
    <span class="count"></span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small cool js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="cool">
            <span aria-hidden="true" style="fill: #0097ec; width: 18px; height: 18px;" class="icon icon--18-cool-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_cool_outline" />
    </svg>
</span>    <span class="vote-type">Cool</span>
    <span class="count">1</span>
    </a>
    </li>

    </ul>

        </div>

                
            </div>
        </span>

    </div>

            <div class="previous-review clearfix">
            <div class="biz-rating biz-rating-large clearfix">
                


    <div class="i-stars i-stars--regular-5 rating-large" title="5.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="5.0 star rating">
    </div>



        <span class="rating-qualifier">
            3/31/2016
            <strong class="bullet-before has-previous-review">
                <small>Previous review</small>
            </strong>
        </span>
    </div>

                <span class="js-expandable-comment comment-truncated">
            <span class="js-content-toggleable">Always great. I got an iced 24oz coconut green milk tea with boba and 50% sweetness. Tastes fresh…</span>
            <span class="js-content-toggleable hidden">Always great. I got an iced 24oz coconut green milk tea with boba and 50% sweetness. Tastes fresh and the boba is perfect. PLEASE open a location in the sunset district!</span>
            <a href="javascript:;" class="read-more js-review-expander">Read more</a>
                            
        <ul class="photo-box-grid clearfix js-content-expandable lightbox-media-parent" data-ad-logging-csrf="d5914a75327491d026c1399caf993fa6fbc76f73485f25d094bb5df52f761a99" data-ad-logging-uri="/ad_acknowledgment" data-ga-path="media_lightbox/servlet:biz_details/type:biz" data-logging-csrf="4ac56838914c80cf7089cd149a39f5d6d938929e1ec91e2f42852d2116286e0c" data-logging-uri="/biz_photos/18TtLS_JtiS2OH30FLqNrw/log_views" data-media-count="1" data-media-url="/biz_photos/get_media_slice/18TtLS_JtiS2OH30FLqNrw?reviewid=kOcubvbUxAvH0zqja0sgdg" data-starting-index="0">
                <li style="width: 348px; height: 348px;">
                        <div class="photo-box photo-box--interactive is-loading">
        
                <img data-async-src=https://s3-media2.fl.yelpcdn.com/bphoto/cRxER6WIa_qpumlHjsoRqw/348s.jpg alt="Photo of Boba Guys - San Francisco, CA, United States. Coconut green milk tea with boba" class="photo-box-img no-js-hidden" height="348" src="https://s3-media2.fl.yelpcdn.com/assets/srv0/yelp_styleguide/978c1bee49d7/assets/img/1x1.png" width="348">

            <noscript>
                    <img alt="Photo of Boba Guys - San Francisco, CA, United States. Coconut green milk tea with boba" class="photo-box-img" height="348" src="https://s3-media2.fl.yelpcdn.com/bphoto/cRxER6WIa_qpumlHjsoRqw/348s.jpg" width="348">

            </noscript>



                <div class="photo-box-overlay js-overlay">
                <div class="photo-box-overlay_caption">Coconut green milk tea with boba</div>
        </div>


            <a class="biz-shim js-lightbox-media-link js-analytics-click" data-analytics-label="biz-photo"  href="/biz_photos/boba-guys-san-francisco-4?reviewid=kOcubvbUxAvH0zqja0sgdg&amp;select=cRxER6WIa_qpumlHjsoRqw">
            <span class="offscreen">Coconut green milk tea with boba</span>
    </a>

    </div>

                </li>

        </ul>

            <div class="review-footer js-content-toggleable hidden clearfix">
                            <div class="rateReview voting-feedback" data-review-id="kOcubvbUxAvH0zqja0sgdg">
                    <p class="voting-intro voting-prompt">
        Was this review &hellip;?
    </p>
    <ul class="voting-buttons" data-csrf-token="c5f44b4ca2649aeb4492d827a797d61476922eef4584ff73370a63d021703fa8">
            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small useful js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="useful">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-useful-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_useful_outline" />
    </svg>
</span>    <span class="vote-type">Useful</span>
    <span class="count">1</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small funny js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="funny">
            <span aria-hidden="true" style="fill: #41a700; width: 18px; height: 18px;" class="icon icon--18-funny-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_funny_outline" />
    </svg>
</span>    <span class="vote-type">Funny</span>
    <span class="count"></span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small cool js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="cool">
            <span aria-hidden="true" style="fill: #0097ec; width: 18px; height: 18px;" class="icon icon--18-cool-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_cool_outline" />
    </svg>
</span>    <span class="vote-type">Cool</span>
    <span class="count"></span>
    </a>
    </li>

    </ul>

        </div>

                
            </div>
        </span>

    </div>

            <div class="previous-review clearfix">
            <div class="biz-rating biz-rating-large clearfix">
                


    <div class="i-stars i-stars--regular-5 rating-large" title="5.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="5.0 star rating">
    </div>



        <span class="rating-qualifier">
            3/2/2016
            <strong class="bullet-before has-previous-review">
                <small>Previous review</small>
            </strong>
        </span>
    </div>

                <span class="js-expandable-comment comment-truncated">
            <span class="js-content-toggleable">Iced tried a lot of boba in SF and boba guys is my favorite!! I really wish there was one in the…</span>
            <span class="js-content-toggleable hidden">Iced tried a lot of boba in SF and boba guys is my favorite!! I really wish there was one in the sunset district because it&#39;s pretty far. <br><br>The first time I went I got a Thai iced tea with boba. Super good. The second time I went I got a coconut green milk tea with 50% sugar and that was really good too. <br><br>This place is super hip, and their design is cute :)</span>
            <a href="javascript:;" class="read-more js-review-expander">Read more</a>
                
            <div class="review-footer js-content-toggleable hidden clearfix">
                            <div class="rateReview voting-feedback" data-review-id="jjVU2OKWOecuF9bGOv32VA">
                    <p class="voting-intro voting-prompt">
        Was this review &hellip;?
    </p>
    <ul class="voting-buttons" data-csrf-token="c5f44b4ca2649aeb4492d827a797d61476922eef4584ff73370a63d021703fa8">
            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small useful js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="useful">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-useful-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_useful_outline" />
    </svg>
</span>    <span class="vote-type">Useful</span>
    <span class="count">2</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small funny js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="funny">
            <span aria-hidden="true" style="fill: #41a700; width: 18px; height: 18px;" class="icon icon--18-funny-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_funny_outline" />
    </svg>
</span>    <span class="vote-type">Funny</span>
    <span class="count"></span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small cool js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="cool">
            <span aria-hidden="true" style="fill: #0097ec; width: 18px; height: 18px;" class="icon icon--18-cool-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_cool_outline" />
    </svg>
</span>    <span class="vote-type">Cool</span>
    <span class="count">1</span>
    </a>
    </li>

    </ul>

        </div>

                
            </div>
        </span>

    </div>


    

        </div>
    </div>

        </li>
        <li >
                <div class="review review--with-sidebar" data-review-id="PtdfovPZBDtQY7uljVtqsg" data-signup-object="user_id:BBv8OzOwgIMOpnVoFN6u3w">
            <div class="review-sidebar">
        <div class="review-sidebar-content">
                <div class="ypassport media-block">
        <div class="media-avatar responsive-photo-box">
                        <div class="photo-box pb-60s" data-hovercard-id="MjT8Co12FE4VI88emshhOQ">
                <a href="/user_details?userid=BBv8OzOwgIMOpnVoFN6u3w" class="js-analytics-click" data-analytics-label="user-photo">
                <img alt="Nancy L." class="photo-box-img" height="60" src="https://s3-media4.fl.yelpcdn.com/photo/EQqWrUuZuAJM02MxXyQXaw/60s.jpg" width="60">

        </a>

    </div>



        </div>
        <div class="media-story">
                <ul class="user-passport-info">
        <li class="user-name">
                    <a class="user-display-name" href="/user_details?userid=BBv8OzOwgIMOpnVoFN6u3w" data-hovercard-id="MjT8Co12FE4VI88emshhOQ">Nancy L.</a>
        </li>
        <li class="user-location responsive-hidden-small">
            <b>Oakland, CA</b>
        </li>
    </ul>

            

    <ul class="user-passport-stats">
        <li class="friend-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-friends icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_friends" />
    </svg>
</span>
            <b>374</b> friends
        </li>
        <li class="review-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-review icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_review" />
    </svg>
</span>
            <b>136</b> reviews
        </li>
                <li class="is-elite responsive-small-display-inline-block">
            <a href="/elite">Elite ’16</a>
        </li>

    </ul>

        </div>
    </div>

                    <ul class="action-link-list action-link-list--small">
        
        <li>
            


    <a class="arrange arrange--middle send-to-friend" data-pop-uri="/send_to_friend/review/PtdfovPZBDtQY7uljVtqsg" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-share icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_share" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Share review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle embed-review" data-pop-uri="/review_embed_modal/PtdfovPZBDtQY7uljVtqsg" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-embed icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_embed" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Embed review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-compliment" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-compliment icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_compliment" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Compliment
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-pm" href="javascript:;" rel="Nancy L.">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-speech icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_speech" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Send message
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-add" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="BBv8OzOwgIMOpnVoFN6u3w">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-following icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_following" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Follow Nancy L.
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-remove hidden" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="BBv8OzOwgIMOpnVoFN6u3w">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-unfollow icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_unfollow" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Stop following Nancy L.
        </div>
    </a>

        </li>


    </ul>

        </div>
    </div>

        <div class="review-wrapper">
                <div class="review-content">
            <div class="biz-rating biz-rating-large clearfix">
        <div >
                    


    <div class="i-stars i-stars--regular-5 rating-large" title="5.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="5.0 star rating">
    </div>



        </div>
            <span class="rating-qualifier">
        10/28/2016
    </span>

    </div>

                        <ul class="review-tags">
                <li class="review-tags_item">

        <span >
            <span aria-hidden="true" style="fill: #0077bc; width: 18px; height: 18px;" class="icon icon--18-check-in icon--size-18 u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_check_in" />
    </svg>
</span>1 check-in
        </span>
    </li>

    </ul>


                <p lang="en">The line for this one is definitely not as long as the one in Union Square. Also, I have an appreciation for the bigger store so that you have room to stand when you&#39;re waiting for your drink. <br><br>Boba Guys drinks average between $4-5, which is a little more than I hope to pay, but it&#39;s for delicious good quality boba tea. They have a lot of options such as Hong Kong style milk tea, Hojicha and Matcha lattes.I&#39;ve heard great things about their Dirty Horchata, which I believe is Horchata with espresso on top. <br><br>The ambience here is great, the staff are friendly and the decor is very clean and modern. Would highly recommend this one over the one in Union Square!</p> 
            
    </div>
    <div class="review-footer clearfix">
                    <div class="rateReview voting-feedback" data-review-id="PtdfovPZBDtQY7uljVtqsg">
                    <p class="voting-intro voting-prompt">
        Was this review &hellip;?
    </p>
    <ul class="voting-buttons" data-csrf-token="c5f44b4ca2649aeb4492d827a797d61476922eef4584ff73370a63d021703fa8">
            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small useful js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="useful">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-useful-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_useful_outline" />
    </svg>
</span>    <span class="vote-type">Useful</span>
    <span class="count">1</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small funny js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="funny">
            <span aria-hidden="true" style="fill: #41a700; width: 18px; height: 18px;" class="icon icon--18-funny-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_funny_outline" />
    </svg>
</span>    <span class="vote-type">Funny</span>
    <span class="count">1</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small cool js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="cool">
            <span aria-hidden="true" style="fill: #0097ec; width: 18px; height: 18px;" class="icon icon--18-cool-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_cool_outline" />
    </svg>
</span>    <span class="vote-type">Cool</span>
    <span class="count">1</span>
    </a>
    </li>

    </ul>

        </div>

    </div>
    
    

        </div>
    </div>

        </li>
        <li >
                <div class="review review--with-sidebar" data-review-id="wUg6HUtbQF0Zh5BEQLAoyA" data-signup-object="user_id:4MJ7go3WJwIcak_17vWw9w">
            <div class="review-sidebar">
        <div class="review-sidebar-content">
                <div class="ypassport media-block">
        <div class="media-avatar responsive-photo-box">
                        <div class="photo-box pb-60s" data-hovercard-id="MDz2mBex3-rVYysuM4soFg">
                <a href="/user_details?userid=4MJ7go3WJwIcak_17vWw9w" class="js-analytics-click" data-analytics-label="user-photo">
                <img alt="Sarah C." class="photo-box-img" height="60" src="https://s3-media2.fl.yelpcdn.com/photo/S8bSke1NEitVEJTmdAElNQ/60s.jpg" width="60">

        </a>

    </div>



        </div>
        <div class="media-story">
                <ul class="user-passport-info">
        <li class="user-name">
                    <a class="user-display-name" href="/user_details?userid=4MJ7go3WJwIcak_17vWw9w" data-hovercard-id="MDz2mBex3-rVYysuM4soFg">Sarah C.</a>
        </li>
        <li class="user-location responsive-hidden-small">
            <b>Sacramento, CA</b>
        </li>
    </ul>

            

    <ul class="user-passport-stats">
        <li class="friend-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-friends icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_friends" />
    </svg>
</span>
            <b>236</b> friends
        </li>
        <li class="review-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-review icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_review" />
    </svg>
</span>
            <b>1295</b> reviews
        </li>
                <li class="is-elite responsive-small-display-inline-block">
            <a href="/elite">Elite ’16</a>
        </li>

    </ul>

        </div>
    </div>

                    <ul class="action-link-list action-link-list--small">
        
        <li>
            


    <a class="arrange arrange--middle send-to-friend" data-pop-uri="/send_to_friend/review/wUg6HUtbQF0Zh5BEQLAoyA" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-share icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_share" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Share review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle embed-review" data-pop-uri="/review_embed_modal/wUg6HUtbQF0Zh5BEQLAoyA" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-embed icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_embed" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Embed review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-compliment" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-compliment icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_compliment" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Compliment
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-pm" href="javascript:;" rel="Sarah C.">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-speech icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_speech" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Send message
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-add" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="4MJ7go3WJwIcak_17vWw9w">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-following icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_following" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Follow Sarah C.
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-remove hidden" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="4MJ7go3WJwIcak_17vWw9w">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-unfollow icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_unfollow" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Stop following Sarah C.
        </div>
    </a>

        </li>


    </ul>

        </div>
    </div>

        <div class="review-wrapper">
                <div class="review-content">
            <div class="biz-rating biz-rating-large clearfix">
        <div >
                    


    <div class="i-stars i-stars--regular-4 rating-large" title="4.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="4.0 star rating">
    </div>



        </div>
            <span class="rating-qualifier">
        11/27/2016
    </span>

    </div>

                        <ul class="review-tags">
                <li class="review-tags_item">

        <span >
            <span aria-hidden="true" style="fill: #0077bc; width: 18px; height: 18px;" class="icon icon--18-check-in icon--size-18 u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_check_in" />
    </svg>
</span>1 check-in
        </span>
    </li>

    </ul>


                <p lang="en">Boba guys are warming up to me. They always have a location where I am craving boba like in the Mission area. The line is kind of ridiculous and there are like no tables in many of the locations esp this one. I like how there is a good size menu but not overwhelming with 50 different boba drinks. You can basically customize your drink however you like (type of milk - almond, soy, regular, sugar level, ice level, size, and hot/cold.) I got a warm boba which satisfied my boba craving and also kept me warm on a cold day. A bit pricy but overall I would come back.</p> 
            
    </div>
    <div class="review-footer clearfix">
                    <div class="rateReview voting-feedback" data-review-id="wUg6HUtbQF0Zh5BEQLAoyA">
                    <p class="voting-intro voting-prompt">
        Was this review &hellip;?
    </p>
    <ul class="voting-buttons" data-csrf-token="c5f44b4ca2649aeb4492d827a797d61476922eef4584ff73370a63d021703fa8">
            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small useful js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="useful">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-useful-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_useful_outline" />
    </svg>
</span>    <span class="vote-type">Useful</span>
    <span class="count"></span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small funny js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="funny">
            <span aria-hidden="true" style="fill: #41a700; width: 18px; height: 18px;" class="icon icon--18-funny-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_funny_outline" />
    </svg>
</span>    <span class="vote-type">Funny</span>
    <span class="count"></span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small cool js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="cool">
            <span aria-hidden="true" style="fill: #0097ec; width: 18px; height: 18px;" class="icon icon--18-cool-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_cool_outline" />
    </svg>
</span>    <span class="vote-type">Cool</span>
    <span class="count"></span>
    </a>
    </li>

    </ul>

        </div>

    </div>
    
    

        </div>
    </div>

        </li>
        <li >
                <div class="review review--with-sidebar" data-review-id="gisYM8GD1lxXvh503IVblQ" data-signup-object="user_id:aL3fu1F8hn2JQ-93sW_gTA">
            <div class="review-sidebar">
        <div class="review-sidebar-content">
                <div class="ypassport media-block">
        <div class="media-avatar responsive-photo-box">
                        <div class="photo-box pb-60s" data-hovercard-id="EXtyK1Zyl9276JQvAnKSPA">
                <a href="/user_details?userid=aL3fu1F8hn2JQ-93sW_gTA" class="js-analytics-click" data-analytics-label="user-photo">
                <img alt="Melanie T." class="photo-box-img" height="60" src="https://s3-media3.fl.yelpcdn.com/photo/CBeyWWJiHQ7uaYbAvutOLQ/60s.jpg" width="60">

        </a>

    </div>



        </div>
        <div class="media-story">
                <ul class="user-passport-info">
        <li class="user-name">
                    <a class="user-display-name" href="/user_details?userid=aL3fu1F8hn2JQ-93sW_gTA" data-hovercard-id="EXtyK1Zyl9276JQvAnKSPA">Melanie T.</a>
        </li>
        <li class="user-location responsive-hidden-small">
            <b>San Francisco, CA</b>
        </li>
    </ul>

            

    <ul class="user-passport-stats">
        <li class="friend-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-friends icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_friends" />
    </svg>
</span>
            <b>89</b> friends
        </li>
        <li class="review-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-review icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_review" />
    </svg>
</span>
            <b>55</b> reviews
        </li>
                <li class="is-elite responsive-small-display-inline-block">
            <a href="/elite">Elite ’16</a>
        </li>

    </ul>

        </div>
    </div>

                    <ul class="action-link-list action-link-list--small">
        
        <li>
            


    <a class="arrange arrange--middle send-to-friend" data-pop-uri="/send_to_friend/review/gisYM8GD1lxXvh503IVblQ" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-share icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_share" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Share review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle embed-review" data-pop-uri="/review_embed_modal/gisYM8GD1lxXvh503IVblQ" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-embed icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_embed" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Embed review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-compliment" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-compliment icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_compliment" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Compliment
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-pm" href="javascript:;" rel="Melanie T.">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-speech icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_speech" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Send message
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-add" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="aL3fu1F8hn2JQ-93sW_gTA">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-following icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_following" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Follow Melanie T.
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-remove hidden" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="aL3fu1F8hn2JQ-93sW_gTA">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-unfollow icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_unfollow" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Stop following Melanie T.
        </div>
    </a>

        </li>


    </ul>

        </div>
    </div>

        <div class="review-wrapper">
                <div class="review-content">
            <div class="biz-rating biz-rating-large clearfix">
        <div >
                    


    <div class="i-stars i-stars--regular-5 rating-large" title="5.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="5.0 star rating">
    </div>



        </div>
            <span class="rating-qualifier">
        10/9/2016
    </span>

    </div>

        
                <p lang="en">Boba guys like a lot of the stores on Valencia, has great ingredients like Strauss milk and grade A tea. You really get what you pay for! <br><br>My favorites are the lychee milk tea, lavender-rose milk tea, and currently my most favorite Hojichaa (roasted milk tea). Yummm :). <br><br>Their Belgium waffles are so good too, when you bite into them they have pieces of sugar crystals and it tastes supa buttery+sweet. <br><br>It is a bit on the pricey side, but as I mentioned before, they have the best ingredients and you really can&#39;t complain if you want the best, right? <br><br>Shout out to the tall Asian guy and the boba guys team, keep doing your thaang!!</p> 
            
    </div>
    <div class="review-footer clearfix">
                    <div class="rateReview voting-feedback" data-review-id="gisYM8GD1lxXvh503IVblQ">
                    <p class="voting-intro voting-prompt">
        Was this review &hellip;?
    </p>
    <ul class="voting-buttons" data-csrf-token="c5f44b4ca2649aeb4492d827a797d61476922eef4584ff73370a63d021703fa8">
            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small useful js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="useful">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-useful-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_useful_outline" />
    </svg>
</span>    <span class="vote-type">Useful</span>
    <span class="count">2</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small funny js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="funny">
            <span aria-hidden="true" style="fill: #41a700; width: 18px; height: 18px;" class="icon icon--18-funny-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_funny_outline" />
    </svg>
</span>    <span class="vote-type">Funny</span>
    <span class="count">2</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small cool js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="cool">
            <span aria-hidden="true" style="fill: #0097ec; width: 18px; height: 18px;" class="icon icon--18-cool-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_cool_outline" />
    </svg>
</span>    <span class="vote-type">Cool</span>
    <span class="count">2</span>
    </a>
    </li>

    </ul>

        </div>

    </div>
    
    

        </div>
    </div>

        </li>
        <li >
                <div class="review review--with-sidebar" data-review-id="HGZaC-4ZbYkR1noaIoTYLg" data-signup-object="user_id:mDvkSBth03eZtn-NjsWPXg">
            <div class="review-sidebar">
        <div class="review-sidebar-content">
                <div class="ypassport media-block">
        <div class="media-avatar responsive-photo-box">
                        <div class="photo-box pb-60s" data-hovercard-id="S7RlJ3uUbwYaEtTYO8kHyg">
                <a href="/user_details?userid=mDvkSBth03eZtn-NjsWPXg" class="js-analytics-click" data-analytics-label="user-photo">
                <img alt="Ashley C." class="photo-box-img" height="60" src="https://s3-media2.fl.yelpcdn.com/photo/OX611av_-Z3TZmAeHY-CXg/60s.jpg" width="60">

        </a>

    </div>



        </div>
        <div class="media-story">
                <ul class="user-passport-info">
        <li class="user-name">
                    <a class="user-display-name" href="/user_details?userid=mDvkSBth03eZtn-NjsWPXg" data-hovercard-id="S7RlJ3uUbwYaEtTYO8kHyg">Ashley C.</a>
        </li>
        <li class="user-location responsive-hidden-small">
            <b>Sacramento, CA</b>
        </li>
    </ul>

            

    <ul class="user-passport-stats">
        <li class="friend-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-friends icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_friends" />
    </svg>
</span>
            <b>338</b> friends
        </li>
        <li class="review-count responsive-small-display-inline-block">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-review icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_review" />
    </svg>
</span>
            <b>563</b> reviews
        </li>
                <li class="is-elite responsive-small-display-inline-block">
            <a href="/elite">Elite ’16</a>
        </li>

    </ul>

        </div>
    </div>

                    <ul class="action-link-list action-link-list--small">
        
        <li>
            


    <a class="arrange arrange--middle send-to-friend" data-pop-uri="/send_to_friend/review/HGZaC-4ZbYkR1noaIoTYLg" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-share icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_share" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Share review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle embed-review" data-pop-uri="/review_embed_modal/HGZaC-4ZbYkR1noaIoTYLg" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-embed icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_embed" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Embed review
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-compliment" href="javascript:;" rel="">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-compliment icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_compliment" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Compliment
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle send-pm" href="javascript:;" rel="Ashley C.">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-speech icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_speech" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Send message
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-add" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="mDvkSBth03eZtn-NjsWPXg">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-following icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_following" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Follow Ashley C.
        </div>
    </a>

        </li>

        <li>
            


    <a class="arrange arrange--middle manage-following manage-following-remove hidden" data-csrf-token="8e495aad2b9b815b2cda0608f3da1198cb23c8be943ba20202452978e15757df" href="javascript:;" rel="mDvkSBth03eZtn-NjsWPXg">
        <div class="action-link_icon arrange_unit">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-unfollow icon--size-18 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#18x18_unfollow" />
    </svg>
</span>
        </div>
        <div class="action-link_label arrange_unit arrange_unit--fill">
            Stop following Ashley C.
        </div>
    </a>

        </li>


    </ul>

        </div>
    </div>

        <div class="review-wrapper">
                <div class="review-content">
            <div class="biz-rating biz-rating-large clearfix">
        <div >
                    


    <div class="i-stars i-stars--regular-5 rating-large" title="5.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="5.0 star rating">
    </div>



        </div>
            <span class="rating-qualifier">
        9/27/2016
            <small class="bullet-before has-archived-review">
                <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-update icon--size-18 icon--warning">
    <svg class="icon_svg">
        <use xlink:href="#18x18_update" />
    </svg>
</span>
                <strong>Updated review</strong>
            </small>
    </span>

    </div>

                        <ul class="review-tags">
                <li class="review-tags_item">

        <span >
            <span aria-hidden="true" style="fill: #0077bc; width: 18px; height: 18px;" class="icon icon--18-check-in icon--size-18 u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_check_in" />
    </svg>
</span>1 check-in
        </span>
    </li>

    </ul>

                <ul class="review-tags">
        <li class="review-tags_item">
            <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-list icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_list" />
    </svg>
</span>
            Listed in <a href="/list/bay-area-food-and-dessert-san-francisco" title="There&#39;s so many places in the Bay Area...so here&#39;s a list to keep track of where I&#39;ve gone so far!">Bay Area Food &amp; Dessert</a>
        </li>
    </ul>


                <p lang="en">I&#39;m sorry for not returning sooner, Boba Guys!! Make sure you check the specials listed next to the register, there are some really yummy options...I wanted them all! I decided on the Matchata - matcha plus horchata. It&#39;s really good, tastes a little more horchata than matcha but you can still taste all the flavors. I also tried a regular milk tea but the flavor is really strong, I like it! Not watery at all. I&#39;d definitely get either drink again but next time I&#39;ll have to go for that strawberry matcha!</p> 
            
    </div>
    <div class="review-footer clearfix">
                    <div class="rateReview voting-feedback" data-review-id="HGZaC-4ZbYkR1noaIoTYLg">
                    <p class="voting-intro voting-prompt">
        Was this review &hellip;?
    </p>
    <ul class="voting-buttons" data-csrf-token="c5f44b4ca2649aeb4492d827a797d61476922eef4584ff73370a63d021703fa8">
            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small useful js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="useful">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-useful-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_useful_outline" />
    </svg>
</span>    <span class="vote-type">Useful</span>
    <span class="count">6</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small funny js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="funny">
            <span aria-hidden="true" style="fill: #41a700; width: 18px; height: 18px;" class="icon icon--18-funny-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_funny_outline" />
    </svg>
</span>    <span class="vote-type">Funny</span>
    <span class="count">3</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small cool js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="cool">
            <span aria-hidden="true" style="fill: #0097ec; width: 18px; height: 18px;" class="icon icon--18-cool-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_cool_outline" />
    </svg>
</span>    <span class="vote-type">Cool</span>
    <span class="count">7</span>
    </a>
    </li>

    </ul>

        </div>

    </div>
                <div class="previous-review clearfix">
            <div class="biz-rating biz-rating-large clearfix">
                


    <div class="i-stars i-stars--regular-5 rating-large" title="5.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="5.0 star rating">
    </div>



        <span class="rating-qualifier">
            4/16/2014
            <strong class="bullet-before has-previous-review">
                <small>Previous review</small>
            </strong>
        </span>
    </div>

                <span class="js-expandable-comment comment-truncated">
            <span class="js-content-toggleable">Cute little boba shop! Space inside is very tight (be prepared to just pick up your drink and go!).…</span>
            <span class="js-content-toggleable hidden">Cute little boba shop! Space inside is very tight (be prepared to just pick up your drink and go!). Luckily when I went I was the only customer but couldn&#39;t stay inside anyway since we had our dog with us.  <br>The menu is pretty limited compared to many other boba places but they have a few unique drinks which makes the limited menu just fine. We ordered horchata milk teas which I was super excited about! We wanted one soy and one almond since there was an option at the bottom of the menu...only to be told that I couldn&#39;t order different milks after I had already paid. Stuck with the drinks anyway and I wasn&#39;t disappointed. It was super refreshing after a 15 min walk in the sun. I did realize that it was probably just horchata with boba in it, nothing special but it was still yummy.. <br>I hope to come back soon and try the matcha latte &amp; the Hong Kong style!</span>
            <a href="javascript:;" class="read-more js-review-expander">Read more</a>
                            
        <ul class="photo-box-grid clearfix js-content-expandable lightbox-media-parent" data-ad-logging-csrf="d5914a75327491d026c1399caf993fa6fbc76f73485f25d094bb5df52f761a99" data-ad-logging-uri="/ad_acknowledgment" data-ga-path="media_lightbox/servlet:biz_details/type:biz" data-logging-csrf="4ac56838914c80cf7089cd149a39f5d6d938929e1ec91e2f42852d2116286e0c" data-logging-uri="/biz_photos/18TtLS_JtiS2OH30FLqNrw/log_views" data-media-count="1" data-media-url="/biz_photos/get_media_slice/18TtLS_JtiS2OH30FLqNrw?reviewid=FBbq1ReAx8p2YMBad8knKQ" data-starting-index="0">
                <li style="width: 348px; height: 348px;">
                        <div class="photo-box photo-box--interactive is-loading">
        
                <img data-async-src=https://s3-media2.fl.yelpcdn.com/bphoto/qhBQr9N2145K5tAUHYFsww/348s.jpg alt="Photo of Boba Guys - San Francisco, CA, United States. Horchata boba! Does not come in almond or soy" class="photo-box-img no-js-hidden" height="348" src="https://s3-media2.fl.yelpcdn.com/assets/srv0/yelp_styleguide/978c1bee49d7/assets/img/1x1.png" width="348">

            <noscript>
                    <img alt="Photo of Boba Guys - San Francisco, CA, United States. Horchata boba! Does not come in almond or soy" class="photo-box-img" height="348" src="https://s3-media2.fl.yelpcdn.com/bphoto/qhBQr9N2145K5tAUHYFsww/348s.jpg" width="348">

            </noscript>



                <div class="photo-box-overlay js-overlay">
                <div class="photo-box-overlay_caption">Horchata boba! Does not come in almond or soy</div>
        </div>


            <a class="biz-shim js-lightbox-media-link js-analytics-click" data-analytics-label="biz-photo"  href="/biz_photos/boba-guys-san-francisco-4?reviewid=FBbq1ReAx8p2YMBad8knKQ&amp;select=qhBQr9N2145K5tAUHYFsww">
            <span class="offscreen">Horchata boba! Does not come in almond or soy</span>
    </a>

    </div>

                </li>

        </ul>

            <div class="review-footer js-content-toggleable hidden clearfix">
                            <div class="rateReview voting-feedback" data-review-id="FBbq1ReAx8p2YMBad8knKQ">
                    <p class="voting-intro voting-prompt">
        Was this review &hellip;?
    </p>
    <ul class="voting-buttons" data-csrf-token="c5f44b4ca2649aeb4492d827a797d61476922eef4584ff73370a63d021703fa8">
            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small useful js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="useful">
            <span aria-hidden="true" style="fill: #f15c00; width: 18px; height: 18px;" class="icon icon--18-useful-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_useful_outline" />
    </svg>
</span>    <span class="vote-type">Useful</span>
    <span class="count">2</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small funny js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="funny">
            <span aria-hidden="true" style="fill: #41a700; width: 18px; height: 18px;" class="icon icon--18-funny-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_funny_outline" />
    </svg>
</span>    <span class="vote-type">Funny</span>
    <span class="count">1</span>
    </a>
    </li>

            
    <li class="vote-item inline-block">

    <a class="ybtn ybtn--small cool js-analytics-click" data-analytics-label="ufc" href="javascript:;" rel="cool">
            <span aria-hidden="true" style="fill: #0097ec; width: 18px; height: 18px;" class="icon icon--18-cool-outline icon--size-18 icon--active-inverse button-content u-space-r-half">
    <svg class="icon_svg">
        <use xlink:href="#18x18_cool_outline" />
    </svg>
</span>    <span class="vote-type">Cool</span>
    <span class="count">1</span>
    </a>
    </li>

    </ul>

        </div>

                
            </div>
        </span>

    </div>


    

        </div>
    </div>

        </li>

    </ul>

        </div>
        <div class="review-pager">
            
        <div class="pagination-block">
            <div class="arrange arrange--stack arrange--baseline arrange--6">
                    <div class="page-of-pages arrange_unit arrange_unit--fill">
        Page 1 of 47
    </div>

                        <div class="pagination-links arrange_unit">
        <div class="arrange arrange--baseline">

                    <div class="arrange_unit page-option current">
                        <span class="pagination-links_anchor">1</span>
                    </div>
                    <div class="arrange_unit page-option">
                        <a class="available-number pagination-links_anchor" href="https://www.yelp.com/biz/boba-guys-san-francisco-4?start=20">
                            2
                        </a>
                    </div>
                    <div class="arrange_unit page-option">
                        <a class="available-number pagination-links_anchor" href="https://www.yelp.com/biz/boba-guys-san-francisco-4?start=40">
                            3
                        </a>
                    </div>
                    <div class="arrange_unit page-option">
                        <a class="available-number pagination-links_anchor" href="https://www.yelp.com/biz/boba-guys-san-francisco-4?start=60">
                            4
                        </a>
                    </div>
                    <div class="arrange_unit page-option">
                        <a class="available-number pagination-links_anchor" href="https://www.yelp.com/biz/boba-guys-san-francisco-4?start=80">
                            5
                        </a>
                    </div>
                    <div class="arrange_unit page-option">
                        <a class="available-number pagination-links_anchor" href="https://www.yelp.com/biz/boba-guys-san-francisco-4?start=100">
                            6
                        </a>
                    </div>
                    <div class="arrange_unit page-option">
                        <a class="available-number pagination-links_anchor" href="https://www.yelp.com/biz/boba-guys-san-francisco-4?start=120">
                            7
                        </a>
                    </div>
                    <div class="arrange_unit page-option">
                        <a class="available-number pagination-links_anchor" href="https://www.yelp.com/biz/boba-guys-san-francisco-4?start=140">
                            8
                        </a>
                    </div>
                    <div class="arrange_unit page-option">
                        <a class="available-number pagination-links_anchor" href="https://www.yelp.com/biz/boba-guys-san-francisco-4?start=160">
                            9
                        </a>
                    </div>

                <div class="arrange_unit">
                    <a class="u-decoration-none next pagination-links_anchor" href="https://www.yelp.com/biz/boba-guys-san-francisco-4?start=20">
                        <span class="pagination-label responsive-hidden-small pagination-links_anchor">Next</span>
                        <span aria-hidden="true" style="width: 24px; height: 24px;" class="icon icon--24-chevron-right icon--size-24 icon--currentColor">
    <svg class="icon_svg">
        <use xlink:href="#24x24_chevron_right" />
    </svg>
</span>
                    </a>
                </div>
        </div>
    </div>

            </div>
        </div>

        </div>
    </div>

                                <div class="not-recommended ysection">
            <a class="subtle-text inline-block js-expander-link" href="/not_recommended_reviews/boba-guys-san-francisco-4" rel="nofollow">
                    29 other reviews that are not currently recommended
            </a>
            <div class="not-recommended-reviews-drawer filtered-reviews-content js-expander-content hidden"></div>
        </div>

                        
                    <div class="ysection js-best-of-yelp-container best-of-yelp-container eight-col"></div>

                </div>
    </div>
    <div class="column column-beta sidebar">
                <div class="open-rail clearfix">
                    




                    
                        
                    


                        <h3 class="offscreen">Business info summary</h3>
        <div class="island summary">
            <ul class="iconed-list">
                        <li class="biz-hours iconed-list-item">
            <div class="iconed-list-avatar">
                    <span aria-hidden="true" style="width: 24px; height: 24px;" class="icon icon--24-clock icon--size-24 icon--error">
    <svg class="icon_svg">
        <use xlink:href="#24x24_clock" />
    </svg>
</span>
            </div>
            <div class="iconed-list-story">
                <dl class="short-def-list">
                    <dt class="attribute-key">Today</dt>
                    <dd>
                        <strong class="u-space-r-half"><span class="nowrap">12:00 pm</span> - <span class="nowrap">6:00 pm</span></strong>

                            <span class="nowrap extra closed">Closed now</span>
                    </dd>
                </dl>
            </div>
        </li>

                            <li class="menu-link-block iconed-list-item">
        <div class="iconed-list-avatar">
            <span aria-hidden="true" style="width: 24px; height: 24px;" class="icon icon--24-food icon--size-24 menu-icon">
    <svg class="icon_svg">
        <use xlink:href="#24x24_food" />
    </svg>
</span>
        </div>
        <div class="iconed-list-story js-add-url-tagging">
            <b>    <a class="menu-explore" href="/menu/boba-guys-san-francisco-4">Full menu</a>
</b>
        </div>
    </li>


                
                        <li class="iconed-list-item">
            <div class="iconed-list-avatar">
                    
        <span class="business-attribute price-range" data-remainder="$$$">$</span>

            </div>
            <div class="iconed-list-story">
                <dl class="short-def-list">
                    <dt class="attribute-key">Price range</dt>
                    <dd class="nowrap price-description">
                        Inexpensive
                    </dd>
                </dl>
            </div>
        </li>

                        <li class="iconed-list-item health-score">
            <div class="iconed-list-avatar">
                    <div class="score-block">
                        98
                    </div>
            </div>
            <div class="iconed-list-story">
                <div class="health-score-info">
                    <dl class="short-def-list">
                        <dt class="attribute-key">
                            <b><a href="/inspections/boba-guys-san-francisco-4">Health inspection</a></b>
                        </dt>
                            <dd class="nowrap health-score-description">
                                98 out of 100
                            </dd>
                    </dl>
                </div>
            </div>
        </li>

                

                
            </ul>
        </div>

                </div>
                <div class="bordered-rail">
                        <div class="ywidget biz-hours">
        <h3>
            Hours
        </h3>
                    <table class="table table-simple hours-table u-space-b1">
            <tbody>
                    <tr>
                        <th scope="row">Mon</th>
                        <td>
                            Closed
                        </td>
                        <td class="extra">
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">Tue</th>
                        <td>
                            <span class="nowrap">12:00 pm</span> - <span class="nowrap">9:00 pm</span>
                        </td>
                        <td class="extra">
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">Wed</th>
                        <td>
                            <span class="nowrap">12:00 pm</span> - <span class="nowrap">9:00 pm</span>
                        </td>
                        <td class="extra">
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">Thu</th>
                        <td>
                            <span class="nowrap">12:00 pm</span> - <span class="nowrap">9:00 pm</span>
                        </td>
                        <td class="extra">
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">Fri</th>
                        <td>
                            <span class="nowrap">12:00 pm</span> - <span class="nowrap">10:00 pm</span>
                        </td>
                        <td class="extra">
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">Sat</th>
                        <td>
                            <span class="nowrap">12:00 pm</span> - <span class="nowrap">10:00 pm</span>
                        </td>
                        <td class="extra">
                        </td>
                    </tr>
                    <tr>
                        <th scope="row">Sun</th>
                        <td>
                            <span class="nowrap">12:00 pm</span> - <span class="nowrap">6:00 pm</span>
                        </td>
                        <td class="extra">
                                <span class="nowrap closed">Closed now</span>
                        </td>
                    </tr>
            </tbody>
        </table>


                    <a href="/biz_attribute?biz_id=18TtLS_JtiS2OH30FLqNrw">
        <span aria-hidden="true" style="width: 14px; height: 14px;" class="icon icon--14-pencil icon--size-14 icon--currentColor link-more edit-info u-space-r1">
    <svg class="icon_svg">
        <use xlink:href="#14x14_pencil" />
    </svg>
</span>Edit business info
    </a>

    </div>

                            <div class="ywidget menu-preview">
            <h3 class="menu-preview-heading">
                <a href="/menu/boba-guys-san-francisco-4">Menu</a>
            </h3>
            <div class="menu-items def-list-dots">
                        <dl class="menu-item">
        <dt>
                <span><b><a href="/menu/boba-guys-san-francisco-4/item/jasmine">Jasmine</a></b></span>
        </dt>
            <dd>
                3.50
            </dd>
    </dl>

        <div class="menu-item-highlighted media-block media-block--12">
            <div class="media-avatar">
                    <div class="photo-box pb-60s">
                <a href="/menu/boba-guys-san-francisco-4/item/jasmine" >
                <img class="photo-box-img" height="60" src="https://s3-media2.fl.yelpcdn.com/bphoto/dQZgnulMOEZo_g0zWlyRlg/60s.jpg" width="60">

        </a>

    </div>

            </div>
            <div class="media-story">
                <b>Hayley D.</b> Every time I come here it&#39;s so so good. This time I got a jasmine milk tea, 50% sweetness, with…
            </div>
        </div>

                        <dl class="menu-item">
        <dt>
                <span><b><a href="/menu/boba-guys-san-francisco-4/item/horchata">Horchata</a></b></span>
        </dt>
            <dd>
                3.50
            </dd>
    </dl>


                        <dl class="menu-item">
        <dt>
                <span><b><a href="/menu/boba-guys-san-francisco-4/item/iced-matcha-latte">Iced Matcha Latte</a></b></span>
        </dt>
            <dd>
                3.95
            </dd>
    </dl>


            </div>
            <a class="menu-explore link-more" href="/menu/boba-guys-san-francisco-4">View the full menu</a>
        </div>

                            <div class="ywidget">
            <h3>More business info</h3>

            <ul class="ylist">
                        <li>
            <div class="short-def-list">

                        <dl>
                            <dt class="attribute-key">
                                Take-out
                            </dt>
                            <dd>
                                Yes
                            </dd>
                        </dl>

                        <dl>
                            <dt class="attribute-key">
                                Accepts Credit Cards
                            </dt>
                            <dd>
                                Yes
                            </dd>
                        </dl>

                        <dl>
                            <dt class="attribute-key">
                                Accepts Apple Pay
                            </dt>
                            <dd>
                                Yes
                            </dd>
                        </dl>

                        <dl>
                            <dt class="attribute-key">
                                Accepts Android Pay
                            </dt>
                            <dd>
                                No
                            </dd>
                        </dl>

                        <dl>
                            <dt class="attribute-key">
                                Parking
                            </dt>
                            <dd>
                                Street
                            </dd>
                        </dl>

                        <dl>
                            <dt class="attribute-key">
                                Bike Parking
                            </dt>
                            <dd>
                                Yes
                            </dd>
                        </dl>

                        <dl>
                            <dt class="attribute-key">
                                Wheelchair Accessible
                            </dt>
                            <dd>
                                Yes
                            </dd>
                        </dl>

                        <dl>
                            <dt class="attribute-key">
                                Outdoor Seating
                            </dt>
                            <dd>
                                Yes
                            </dd>
                        </dl>

                        <dl>
                            <dt class="attribute-key">
                                Wi-Fi
                            </dt>
                            <dd>
                                No
                            </dd>
                        </dl>

                        <dl>
                            <dt class="attribute-key">
                                Good for Working
                            </dt>
                            <dd>
                                No
                            </dd>
                        </dl>
            </div>
        </li>

            </ul>
        </div>


                    
        <div class="media-block first-to-review ywidget">
            <div class="media-avatar">
                <span aria-hidden="true" style="fill: #2a9c9f; width: 24px; height: 24px;" class="icon icon--24-first icon--size-24">
    <svg class="icon_svg">
        <use xlink:href="#24x24_first" />
    </svg>
</span>
                            <div class="photo-box pb-30s" data-hovercard-id="ou7qhB1C1txF4RxevEX9FQ">
                <a href="/user_details?userid=gAK99xBNP5VP45E4uHAPPQ" class="js-analytics-click" data-analytics-label="user-photo">
                <img alt="David G." class="photo-box-img" height="30" src="https://s3-media4.fl.yelpcdn.com/photo/Z2kRgYKJ1lwOYK864I5XSA/30s.jpg" width="30">

        </a>

    </div>



            </div>
            <div class="media-story">
                <div class="media-title">        <a class="user-display-name" href="/user_details?userid=gAK99xBNP5VP45E4uHAPPQ" data-hovercard-id="ou7qhB1C1txF4RxevEX9FQ">David G.</a></div>
                <a href="/biz/boba-guys-san-francisco-4?hrid=4vDhzzKbXwWvlvkQlpCp2w" class="disableable-link label" data-review-id="4vDhzzKbXwWvlvkQlpCp2w">
                    First to review
                </a>
            </div>
        </div>

                            <div class="ywidget js-from-biz-owner">
            <h3>From the business</h3>
            <p>
                            High-quality bubble milk teas made with next-level quality ingredients like organic milk, homemade syrup, and homemade almond jelly. Home of the original Horchata Boba and Tea …

            </p>

            <a class="link-more" href="javascript:;">
                Learn more about Boba Guys
                <span class="offscreen">, Opens a popup</span>
            </a>

            <div class="hidden from-biz-owner-wrapper">
                    <div class="from-biz-owner-content">
                <h3>Specialties</h3>
        <p>
            High-quality bubble milk teas made with next-level quality ingredients like organic milk, homemade syrup, and homemade almond jelly. Home of the original Horchata Boba and Tea Frescas.
        </p>

                <h3>History</h3>
            <p>
                    Established in 2011.
            </p>

            <p>
                We started Boba Guys as a way to share the milk tea we remember from our childhood... done our way. No powders. Straus organic milk. Homemade syrup.
            </p>

                <h3>Meet the Business Owner</h3>

        <div class="meet-business-owner">
                <div class="ypassport ypassport-slim media-block">
        <div class="media-avatar">
                        <div class="photo-box pb-30s">
                <a href="https://s3-media4.fl.yelpcdn.com/buphoto/3IdLUUuWfQjYlIxrUuFRRQ/o.jpg" >
                <img alt="Boba G." class="photo-box-img" height="30" src="https://s3-media3.fl.yelpcdn.com/buphoto/3IdLUUuWfQjYlIxrUuFRRQ/30s.jpg" width="30">

        </a>

    </div>



        </div>
            <div class="media-story">
        <div class="media-title">
            <span class="user-display-name">
                        Boba G.

            </span>
                    <div class="business-owner-role">
            Business Owner
        </div>

        </div>
    </div>

    </div>

        </div>
        <p>
            Our mission is to bridge cultures and change the way people think about boba and tea. We are known for having one of the world&#39;s highest quality milk teas. We don&#39;t use any powders or manufactured sweeteners in our drinks. We use Straus Family organic milk, housemade syrup, premium loose leaf teas, and Grade A balls. (We just like saying that.)<br><br>We hope you join us in our journey. Read about us on our columns in GOOD Magazine or Huffington Post.
        </p>

        
    </div>

            </div>

            <div class="hidden flag-from-biz-owner">
                    <a href="/flag_content?flag_id=18TtLS_JtiS2OH30FLqNrw&amp;flag_type=about_this_biz&amp;previous_url=%2Fbiz%2Fboba-guys-san-francisco-4" data-pop-uri="/flag_content?flag_id=18TtLS_JtiS2OH30FLqNrw&amp;flag_type=about_this_biz&amp;previous_url=%2Fbiz%2Fboba-guys-san-francisco-4" class="chiclet-link chiclet-link--flag show-tooltip">
        <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-flag icon--size-18">
    <svg class="icon_svg">
        <use xlink:href="#18x18_flag" />
    </svg>
</span>
        <span class="tooltip-wrapper">
            <span class="tooltip">Report</span>
        </span>
    </a>

            </div>
        </div>



                                <div class="ywidget related-businesses js-related-businesses">
            <h3>People also viewed</h3>
            <ul class="ylist">
                    <li>
                            <div class="media-block media-block--12 biz-listing-medium js-related-business">
        <div class="media-avatar">
                            <div class="photo-box pb-60s">
                <a href="/biz/boba-guys-san-francisco-6?page_src=related_bizes" class="js-analytics-click" data-analytics-label="biz-photo">
                <img alt="Boba Guys" class="photo-box-img" height="60" src="https://s3-media3.fl.yelpcdn.com/bphoto/zXljVRny6AFRKx0x4i79BA/60s.jpg" width="60">

        </a>

    </div>




        </div>
        <div class="media-story">
            <div class="media-title clearfix">
                            <a class="biz-name js-analytics-click" data-analytics-label="biz-name" href="/biz/boba-guys-san-francisco-6?page_src=related_bizes" data-hovercard-id="v6SOeQJQ2pTLlLAgPz3abw" ><span >Boba Guys</span></a>


            </div>

            
                        <div class="biz-rating biz-rating-medium clearfix">
                


    <div class="i-stars i-stars--small-4 rating" title="4.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="4.0 star rating">
    </div>


                <span class="review-count rating-qualifier">
            948 reviews
    </span>

        </div>




            <q>
                We got the Strawberry Jasmine Tea Fresca and Matcha Latte.
            </q>
        </div>
    </div>

                    </li>
                    <li>
                            <div class="media-block media-block--12 biz-listing-medium js-related-business">
        <div class="media-avatar">
                            <div class="photo-box pb-60s">
                <a href="/biz/little-sweet-san-francisco-10?page_src=related_bizes" class="js-analytics-click" data-analytics-label="biz-photo">
                <img alt="Little Sweet" class="photo-box-img" height="60" src="https://s3-media2.fl.yelpcdn.com/bphoto/M1zp2R-1eN7UlhOm9JELBQ/60s.jpg" width="60">

        </a>

    </div>




        </div>
        <div class="media-story">
            <div class="media-title clearfix">
                            <a class="biz-name js-analytics-click" data-analytics-label="biz-name" href="/biz/little-sweet-san-francisco-10?page_src=related_bizes" data-hovercard-id="tC6wWa8jGtwj9gIyFSNelA" ><span >Little Sweet</span></a>


            </div>

            
                        <div class="biz-rating biz-rating-medium clearfix">
                


    <div class="i-stars i-stars--small-4 rating" title="4.0 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="4.0 star rating">
    </div>


                <span class="review-count rating-qualifier">
            276 reviews
    </span>

        </div>




            <q>
                It&#39;s on par, if not better, than ShareTea or Purple Kow.
            </q>
        </div>
    </div>

                    </li>
                    <li>
                            <div class="media-block media-block--12 biz-listing-medium js-related-business">
        <div class="media-avatar">
                            <div class="photo-box pb-60s">
                <a href="/biz/plentea-san-francisco?page_src=related_bizes" class="js-analytics-click" data-analytics-label="biz-photo">
                <img alt="Plentea" class="photo-box-img" height="60" src="https://s3-media3.fl.yelpcdn.com/bphoto/jtHM-zksc1sIxfxbLa1I9A/60s.jpg" width="60">

        </a>

    </div>




        </div>
        <div class="media-story">
            <div class="media-title clearfix">
                            <a class="biz-name js-analytics-click" data-analytics-label="biz-name" href="/biz/plentea-san-francisco?page_src=related_bizes" data-hovercard-id="FIR-ESupB_4beqpGEXGE4Q" ><span >Plentea</span></a>


            </div>

            
                        <div class="biz-rating biz-rating-medium clearfix">
                


    <div class="i-stars i-stars--small-3-half rating" title="3.5 star rating">
        <img class="offscreen" height="303" src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png" width="84" alt="3.5 star rating">
    </div>


                <span class="review-count rating-qualifier">
            1459 reviews
    </span>

        </div>




            <q>
                Its also a bonus that we get to keep their beautiful glass bottles.
            </q>
        </div>
    </div>

                    </li>
            </ul>
        </div>


                            <div class="ywidget">
            <h3>
                    Lists including Boba Guys
            </h3>
                <ul class="ylist favorites-list">
            <li>
                    <div class="media-block media-block--12">
        <div class="media-avatar">
                    <div class="photo-box pb-60s">
                <a href="/list/bubble-tea-elk-grove" >
                <img alt="Helen H." class="photo-box-img" height="60" src="https://s3-media3.fl.yelpcdn.com/photo/Am9IuNlEXJ-JvAP9pjASOg/60s.jpg" width="60">

        </a>

    </div>


        </div>
        <div class="media-story">
            <div class="media-title">
                    <a href="/list/bubble-tea-elk-grove">
        Bubble Tea
    </a>

            </div>
                <span class="list-description">
                    &#34;Do not be afraid of failure. Sometimes it is okay to suck balls.&#34; -- …
                </span>
                <small class="u-block list-item-count">
                        <span class="u-text-subtle">
        40 businesses
    </span>

                </small>
        </div>
    </div>

            </li>
            <li>
                    <div class="media-block media-block--12">
        <div class="media-avatar">
                    <div class="photo-box pb-60s">
                <a href="/list/boba-pearls-bubble-tea-oh-my-san-mateo" >
                <img alt="Jodi H." class="photo-box-img" height="60" src="https://s3-media2.fl.yelpcdn.com/photo/9TFEhM7mCm4JsmF7cKRvCw/60s.jpg" width="60">

        </a>

    </div>


        </div>
        <div class="media-story">
            <div class="media-title">
                    <a href="/list/boba-pearls-bubble-tea-oh-my-san-mateo">
        Boba, pearls, bubble tea, oh my!
    </a>

            </div>
                <span class="list-description">
                    Whether you&#39;re from Socal and call it boba, or Norcal and call it pear…
                </span>
                <small class="u-block list-item-count">
                        <span class="u-text-subtle">
        38 businesses
    </span>

                </small>
        </div>
    </div>

            </li>
            <li>
                    <div class="media-block media-block--12">
        <div class="media-avatar">
                    <div class="photo-box pb-60s">
                <a href="/list/boba-all-day-and-all-night-oakland" >
                <img alt="Jen C." class="photo-box-img" height="60" src="https://s3-media2.fl.yelpcdn.com/photo/_wnaTN966aISrbFEh7Zj6w/60s.jpg" width="60">

        </a>

    </div>


        </div>
        <div class="media-story">
            <div class="media-title">
                    <a href="/list/boba-all-day-and-all-night-oakland">
        Boba All Day &amp; All Night
    </a>

            </div>
                <span class="list-description">
                    I can&#39;t go a week let alone two days without having boba #addiction
                </span>
                <small class="u-block list-item-count">
                        <span class="u-text-subtle">
        11 businesses
    </span>

                </small>
        </div>
    </div>

            </li>
    </ul>
    <a class="link-more link-more-favorites" href="/list_search?location=San+Francisco%2C+CA&amp;q=Coffee+%26+Tea&amp;sort=relevance">More Lists</a>

        </div>


                        <div class="ywidget nearby-links">
        <h3>Browse nearby</h3>
        <ul class="ylist">
            <li>
                <a class="arrange arrange--6" href="/search?find_desc=Restaurants&amp;find_loc=3491+19th+St%2C+San+Francisco%2C+CA+94110">
                    <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-food icon--size-18 icon--currentColor arrange_unit">
    <svg class="icon_svg">
        <use xlink:href="#18x18_food" />
    </svg>
</span>
                    <span class="arrange_unit arrange_unit--fill">Restaurants</span>
                </a>
            </li>
            <li>
                <a class="arrange arrange--6" href="/search?find_desc=Nightlife&amp;find_loc=3491+19th+St%2C+San+Francisco%2C+CA+94110">
                    <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-nightlife icon--size-18 icon--currentColor arrange_unit">
    <svg class="icon_svg">
        <use xlink:href="#18x18_nightlife" />
    </svg>
</span>
                    <span class="arrange_unit arrange_unit--fill">Nightlife</span>
                </a>
            </li>
            <li>
                <a class="arrange arrange--6" href="/search?find_desc=Shopping&amp;find_loc=3491+19th+St%2C+San+Francisco%2C+CA+94110">
                    <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-shopping icon--size-18 icon--currentColor arrange_unit">
    <svg class="icon_svg">
        <use xlink:href="#18x18_shopping" />
    </svg>
</span>
                    <span class="arrange_unit arrange_unit--fill">Shopping</span>
                </a>
            </li>
            <li>
                <a class="arrange arrange--6" href="/search?find_loc=3491+19th+St%2C+San+Francisco%2C+CA+94110">
                    <span aria-hidden="true" style="width: 18px; height: 18px;" class="icon icon--18-overflow icon--size-18 icon--currentColor arrange_unit">
    <svg class="icon_svg">
        <use xlink:href="#18x18_overflow" />
    </svg>
</span>
                    <span class="arrange_unit arrange_unit--fill">Show all</span>
                </a>
            </li>
        </ul>
    </div>




                    
        <div class="ywidget related-searches">
            <h3>People found Boba Guys by searching for…</h3>
            <ul class="ylist">
                    <li>
                            <a href="/search?find_desc=Alcoholic+Boba&amp;find_loc=San+Francisco%2C+CA">Alcoholic Boba San Francisco</a>
                    </li>
                    <li>
                            <a href="/search?find_desc=Kaya+Toast&amp;find_loc=San+Francisco%2C+CA">Kaya Toast San Francisco</a>
                    </li>
                    <li>
                            <a href="/search?find_desc=Boba+Late+Night&amp;find_loc=San+Francisco%2C+CA">Boba Late Night San Francisco</a>
                    </li>
            </ul>
        </div>


                    

                </div>
    </div>
    </div>
        
        
    </div>

    

        
        
        
        
        
        

    
    
    
    
    
            
    
    
    
    
        


    
        

        


    

        



        
    

        



    



            <img height="1" width="1" alt="" style="display:none" src="https://www.facebook.com/tr?id=1432291440371688&amp;ev=NoScript&amp;cd%5Bcategory%5D%5B%5D=coffee&amp;cd%5Bcategory%5D%5B%5D=bubbletea" />


        <div id="rating-details-modal-content" class="hidden" data-monthly-ratings="{&#34;2016&#34;: [[0, 3.71875], [1, 4.16], [2, 4.260869565217392], [3, 4.066666666666666], [4, 4.238095238095238], [5, 4.0344827586206895], [6, 3.793103448275862], [7, 3.8333333333333335], [8, 4.090909090909091], [9, 3.75], [10, 4.214285714285714], [11, 4.3]], &#34;2013&#34;: [[5, 3.9], [6, 4.083333333333333], [7, 3.230769230769231], [8, 3.466666666666667], [9, 2.7222222222222223], [10, 4.230769230769231], [11, 3.272727272727273]], &#34;2014&#34;: [[0, 3.857142857142857], [1, 4.363636363636363], [2, 3.3333333333333335], [3, 3.625], [4, 3.8333333333333335], [5, 4.181818181818182], [6, 3.9393939393939394], [7, 3.4705882352941178], [8, 3.5357142857142856], [9, 3.7586206896551726], [10, 3.7142857142857144], [11, 3.875]], &#34;2015&#34;: [[0, 4.3], [1, 3.6842105263157894], [2, 3.6296296296296298], [3, 4.071428571428571], [4, 3.6666666666666665], [5, 3.5], [6, 3.735294117647059], [7, 3.8095238095238093], [8, 3.7142857142857144], [9, 3.6818181818181817], [10, 3.7142857142857144], [11, 3.8]]}">
    <div class="modal_head">
            <h2>Rating Details</h2>
    </div>

    <div class="modal_body">
                <div class="rating-details-graph-block ysection">
                    <div class="arrange arrange--middle section-header">
                        <p class="arrange_unit arrange_unit--fill">
                            <strong>Monthly Trend</strong>
                        </p>
                        <div class="arrange_unit">
                                


        <div class="tab-nav-container">
            <ul class="tab-nav js-tab-nav">

                        <li class="tab-nav_item">
                                





    <a class="tab-link js-tab-link tab-link--nav js-tab-link--nav is-selected" data-year="2016" href="javascript:;">
            <span class="tab-link_label" title="2016">2016</span>
    </a>

                        </li>

                        <li class="tab-nav_item">
                                





    <a class="tab-link js-tab-link tab-link--nav js-tab-link--nav" data-year="2015" href="javascript:;">
            <span class="tab-link_label" title="2015">2015</span>
    </a>

                        </li>

                        <li class="tab-nav_item">
                                





    <a class="tab-link js-tab-link tab-link--nav js-tab-link--nav" data-year="2014" href="javascript:;">
            <span class="tab-link_label" title="2014">2014</span>
    </a>

                        </li>

                        <li class="tab-nav_item tab-nav_item--last">
                                





    <a class="tab-link js-tab-link tab-link--nav js-tab-link--nav" data-year="2013" href="javascript:;">
            <span class="tab-link_label" title="2013">2013</span>
    </a>

                        </li>
            </ul>
        </div>


                        </div>
                    </div>
                    <div class="monthly-avg-graph-container graph-container u-hide-overflow">
                        <div class="monthly-avg-graph-placeholder graph-placeholder"></div>
                    </div>
                    <small class="u-block u-space-t1">
                        Understand how a business’ rating changes month-to-month. <a href="https://www.yelp-support.com/article/How-is-the-Monthly-Trend-of-a-business-s-rating-calculated?l=en_US">Learn more</a>.
                    </small>
                </div>

                <div class="section-header"><h4>Overall Rating</h4></div>
                <p class="rating-details-ratings-info">Yelping since 2013 with 924 reviews</p>

                <table class="histogram histogram--alternating histogram--large">

            <tr class="histogram_row histogram_row--1">
                <th scope="row" class="histogram_label nowrap">
                    5 stars
                </th>
                <td>
                    <table>
                        <tr>
                            <td style="width: 91%;">
                                    <div class="histogram_bar"></div>
                            </td>
                            <td class="histogram_count">289</td>
                        </tr>
                    </table>
                </td>
            </tr>

            <tr class="histogram_row histogram_row--2">
                <th scope="row" class="histogram_label nowrap">
                    4 stars
                </th>
                <td>
                    <table>
                        <tr>
                            <td style="width: 100%;">
                                    <div class="histogram_bar"></div>
                            </td>
                            <td class="histogram_count">319</td>
                        </tr>
                    </table>
                </td>
            </tr>

            <tr class="histogram_row histogram_row--3">
                <th scope="row" class="histogram_label nowrap">
                    3 stars
                </th>
                <td>
                    <table>
                        <tr>
                            <td style="width: 62%;">
                                    <div class="histogram_bar"></div>
                            </td>
                            <td class="histogram_count">198</td>
                        </tr>
                    </table>
                </td>
            </tr>

            <tr class="histogram_row histogram_row--4">
                <th scope="row" class="histogram_label nowrap">
                    2 stars
                </th>
                <td>
                    <table>
                        <tr>
                            <td style="width: 24%;">
                                    <div class="histogram_bar"></div>
                            </td>
                            <td class="histogram_count">78</td>
                        </tr>
                    </table>
                </td>
            </tr>

            <tr class="histogram_row histogram_row--5">
                <th scope="row" class="histogram_label nowrap">
                    1 star
                </th>
                <td>
                    <table>
                        <tr>
                            <td style="width: 13%;">
                                    <div class="histogram_bar"></div>
                            </td>
                            <td class="histogram_count">40</td>
                        </tr>
                    </table>
                </td>
            </tr>
    </table>


            <small>We calculate the overall star rating using only reviews that our automated software currently recommends. <a href="/faq#what_are_recommended_reviews">Learn more</a>.</small>
    </div>
    </div>

    

    

    

        <script>
            (function() {
                var main = null;

                var main=function(b,a,c){adroll_adv_id="BHPKS4B4ONEJJMGH4QCJZR";adroll_pix_id="QB5JPFIKRZDSBOZSULG4YB";adroll_user_identifier=b;adroll_email=a;(function(){var d=function(){if(document.readyState&&!/loaded|complete/.test(document.readyState)){setTimeout(d,10);return}if(!window.__adroll_loaded){__adroll_loaded=true;setTimeout(d,50);return}var f=document.createElement("script");var e="https://s.adroll.com";f.setAttribute("async","true");f.type="text/javascript";f.src=e+"/j/roundtrip.js";((document.getElementsByTagName("head")||[null])[0]||document.getElementsByTagName("script")[0].parentNode).appendChild(f)
};if(window.addEventListener){window.addEventListener("load",d,false)}else{window.attachEvent("onload",d)}}());adroll_custom_data=c};

                if (main === null) {
                    throw 'invalid inline script, missing main declaration.';
                }
                main("39914266A81287E0",null,{"city": "San Francisco", "state": "CA", "category_aliases": "coffee,bubbletea", "biz_id": "18TtLS_JtiS2OH30FLqNrw", "latitude": 37.7599926, "biz_name": "Boba Guys", "city_state": "San Francisco, CA", "longitude": -122.421119, "geoquad": 6389743});
            })();
    </script>

                </div>
            </div>

    </div>


            <!-- google_ad_section_start(weight=ignore) -->
<!-- <a href="/biz/outlook-autumn-market-fundamental-catwalk-flimsy-roost-legibility-individualism-grocer-predestination-8">yelp</a> -->
    <div class="main-content-wrap main-content-wrap--separated">
        <div class="content-container">
            <div class="main-footer webview-hidden">
    <div class="main-footer_section main-footer_menu arrange arrange--equal arrange--30 arrange--stack-small u-sm-space-b0">
                    <div class="main-footer_item responsive-hidden-small">
            <div class="footer-menu responsive-hidden-small">
        <h3 class="footer-menu_header">About</h3>
        <ul class="footer-menu_list">
                <li class="footer-menu_item">
                    <a href="/about">About Yelp</a>
                </li>
                <li class="footer-menu_item">
                    <a href="http://eat24.com/">Order Food on Eat24</a>
                </li>
                <li class="footer-menu_item">
                    <a href="/careers/home">Careers</a>
                </li>
                <li class="footer-menu_item">
                    <a href="/press">Press</a>
                </li>
                <li class="footer-menu_item">
                    <a href="http://yelp-ir.com/">Investor Relations</a>
                </li>
                <li class="footer-menu_item">
                    <a href="/guidelines">Content Guidelines</a>
                </li>
                <li class="footer-menu_item">
                    <a href="/static?country=US&amp;p=tos">Terms of Service</a>
                </li>
                <li class="footer-menu_item">
                    <a href="/tos/privacy_policy">Privacy Policy</a>
                </li>
                <li class="footer-menu_item">
                    <a href="/static?locale=en_US&amp;p=privacy#third-parties">Ad Choices</a>
                </li>
        </ul>
    </div>

    </div>

                    <div class="main-footer_item responsive-hidden-small">
            <div class="footer-menu responsive-hidden-small">
        <h3 class="footer-menu_header">Discover</h3>
        <ul class="footer-menu_list">
                <li class="footer-menu_item">
                    <a href="/local_yelp">The Local Yelp</a>
                </li>
                <li class="footer-menu_item">
                    <a href="https://officialblog.yelp.com/">Yelp Blog</a>
                </li>
                <li class="footer-menu_item">
                    <a href="http://www.yelp-support.com/?l=en_US">Support</a>
                </li>
                <li class="footer-menu_item">
                    <a href="/yelpmobile?source=footer">Yelp Mobile</a>
                </li>
                <li class="footer-menu_item">
                    <a href="/developers?country=US">Developers</a>
                </li>
                <li class="footer-menu_item">
                    <a href="/rss">RSS</a>
                </li>
        </ul>
    </div>

    </div>

                    <div class="main-footer_item responsive-hidden-small">
            <div class="footer-menu responsive-hidden-small">
        <h3 class="footer-menu_header">Yelp for Business Owners</h3>
        <ul class="footer-menu_list">
                <li class="footer-menu_item">
                    <a href="https://biz.yelp.com/?utm_campaign=claim_business&amp;utm_content=claim_footer_link&amp;utm_medium=www&amp;utm_source=footer">Claim your Business Page</a>
                </li>
                <li class="footer-menu_item">
                    <a href="/advertise">Advertise on Yelp</a>
                </li>
                <li class="footer-menu_item">
                    <a href="http://eat24.com/join">Online Ordering from Eat24</a>
                </li>
                <li class="footer-menu_item">
                    <a href="https://www.yelpreservations.com/">Yelp Reservations</a>
                </li>
                <li class="footer-menu_item">
                    <a href="https://biz.yelp.com/support/case_studies">Business Success Stories</a>
                </li>
                <li class="footer-menu_item">
                    <a href="http://www.yelp-support.com/Yelp_for_Business_Owners?l=en_US">Business Support</a>
                </li>
                <li class="footer-menu_item">
                    <a href="https://www.yelpblog.com/section/business">Yelp Blog for Business Owners</a>
                </li>
        </ul>
    </div>

    </div>

                    <div class="main-footer_item">
        <div class="footer-menu languages-menu">
            <div class="footer-menu_section footer-language">
                <h3 class="footer-menu_header responsive-hidden-small">Languages</h3>
                

    <div class="dropdown js-dropdown dropdown--hover dropdown--boxed-on-mobile dropdown--separate-groups dropdown--restricted">
        

    <div class="dropdown_toggle js-dropdown-toggle" aria-haspopup="true" role="button" tabindex="-1">
        <a
            class="dropdown_toggle-action"
                href="javascript:;"
                data-dropdown-prefix="English"
        >
            <span class="dropdown_toggle-text js-dropdown-toggle-text" data-dropdown-initial-text=""></span>
            <span aria-hidden="true" style="width: 14px; height: 14px;" class="icon icon--14-triangle-down icon--size-14 icon--currentColor u-triangle-direction-down dropdown_arrow">
    <svg class="icon_svg">
        <use xlink:href="#14x14_triangle_down" />
    </svg>
</span>
        </a>
    </div>

            <div class="dropdown_menu js-dropdown-menu">
        <div class="dropdown_menu-inner">
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://ms.yelp.my/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                Bahasa Malaysia (Malaysia)
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.cz/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                Čeština (Česká republika)
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.dk/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                Dansk (Danmark)
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.de/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                Deutsch (Deutschland)
        </span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://de.yelp.ch/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                Deutsch (Schweiz)
        </span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.at/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                Deutsch (Österreich)
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.com.au/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                English (Australia)
        </span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://en.yelp.be/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                English (Belgium)
        </span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.ca/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                English (Canada)
        </span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://en.yelp.com.hk/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                English (Hong Kong)
        </span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://en.yelp.my/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                English (Malaysia)
        </span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://nz.yelp.com/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                English (New Zealand)
        </span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://en.yelp.com.ph/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                English (Philippines)
        </span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.ie/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                English (Republic of Ireland)
        </span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.com.sg/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                English (Singapore)
        </span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://en.yelp.ch/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                English (Switzerland)
        </span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.co.uk/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                English (United Kingdom)
        </span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.com/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                English (United States)
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.com.ar/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                Español (Argentina)
        </span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.cl/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                Español (Chile)
        </span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.es/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                Español (España)
        </span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.com.mx/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                Español (México)
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://fil.yelp.com.ph/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                Filipino (Pilipinas)
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://fr.yelp.be/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                Français (Belgique)
        </span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://fr.yelp.ca/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                Français (Canada)
        </span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.fr/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                Français (France)
        </span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://fr.yelp.ch/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                Français (Suisse)
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.it/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                Italiano (Italia)
        </span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://it.yelp.ch/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                Italiano (Svizzera)
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://nl.yelp.be/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                Nederlands (België)
        </span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.nl/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                Nederlands (Nederland)
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.no/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                Norsk (Norge)
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.pl/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                Polski (Polska)
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.com.br/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                Português (Brasil)
        </span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.pt/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                Português (Portugal)
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://fi.yelp.fi/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                Suomi (Suomi)
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://sv.yelp.fi/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                Svenska (Finland)
        </span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.se/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                Svenska (Sverige)
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.com.tr/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                Türkçe (Türkiye)
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.co.jp/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                日本語 (日本)
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.com.tw/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                繁體中文 (台灣)
        </span>
    </a>

                        </li>
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://zh.yelp.com.hk/biz/boba-guys-san-francisco-4" rel="nofollow" role="menuitem">
        <span class="dropdown_label">
                繁體中文 (香港)
        </span>
    </a>

                        </li>
                </ul>
        </div>
    </div>

    </div>

            </div>
            <div class="footer-menu_section footer-country">
                <h3 class="footer-menu_header responsive-hidden-small">Countries</h3>
                

    <div class="dropdown js-dropdown dropdown--hover dropdown--boxed-on-mobile dropdown--restricted">
        

    <div class="dropdown_toggle js-dropdown-toggle" aria-haspopup="true" role="button" tabindex="-1">
        <a
            class="dropdown_toggle-action"
                href="javascript:;"
                data-dropdown-prefix="United States"
        >
            <span class="dropdown_toggle-text js-dropdown-toggle-text" data-dropdown-initial-text=""></span>
            <span aria-hidden="true" style="width: 14px; height: 14px;" class="icon icon--14-triangle-down icon--size-14 icon--currentColor u-triangle-direction-down dropdown_arrow">
    <svg class="icon_svg">
        <use xlink:href="#14x14_triangle_down" />
    </svg>
</span>
        </a>
    </div>

            <div class="dropdown_menu js-dropdown-menu">
        <div class="dropdown_menu-inner">
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.com.ar/" role="menuitem">
        <span class="dropdown_label">
                Argentina
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.com.au/" role="menuitem">
        <span class="dropdown_label">
                Australia
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.at/" role="menuitem">
        <span class="dropdown_label">
                Austria
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://en.yelp.be/" role="menuitem">
        <span class="dropdown_label">
                Belgium
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.com.br/" role="menuitem">
        <span class="dropdown_label">
                Brazil
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.ca/" role="menuitem">
        <span class="dropdown_label">
                Canada
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.cl/" role="menuitem">
        <span class="dropdown_label">
                Chile
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.cz/" role="menuitem">
        <span class="dropdown_label">
                Czech Republic
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.dk/" role="menuitem">
        <span class="dropdown_label">
                Denmark
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://fi.yelp.fi/" role="menuitem">
        <span class="dropdown_label">
                Finland
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.fr/" role="menuitem">
        <span class="dropdown_label">
                France
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.de/" role="menuitem">
        <span class="dropdown_label">
                Germany
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://en.yelp.com.hk/" role="menuitem">
        <span class="dropdown_label">
                Hong Kong
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.it/" role="menuitem">
        <span class="dropdown_label">
                Italy
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.co.jp/" role="menuitem">
        <span class="dropdown_label">
                Japan
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://en.yelp.my/" role="menuitem">
        <span class="dropdown_label">
                Malaysia
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.com.mx/" role="menuitem">
        <span class="dropdown_label">
                Mexico
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://nz.yelp.com/" role="menuitem">
        <span class="dropdown_label">
                New Zealand
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.no/" role="menuitem">
        <span class="dropdown_label">
                Norway
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://en.yelp.com.ph/" role="menuitem">
        <span class="dropdown_label">
                Philippines
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.pl/" role="menuitem">
        <span class="dropdown_label">
                Poland
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.pt/" role="menuitem">
        <span class="dropdown_label">
                Portugal
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.ie/" role="menuitem">
        <span class="dropdown_label">
                Republic of Ireland
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.com.sg/" role="menuitem">
        <span class="dropdown_label">
                Singapore
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.es/" role="menuitem">
        <span class="dropdown_label">
                Spain
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.se/" role="menuitem">
        <span class="dropdown_label">
                Sweden
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://en.yelp.ch/" role="menuitem">
        <span class="dropdown_label">
                Switzerland
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.com.tw/" role="menuitem">
        <span class="dropdown_label">
                Taiwan
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.nl/" role="menuitem">
        <span class="dropdown_label">
                The Netherlands
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.com.tr/" role="menuitem">
        <span class="dropdown_label">
                Turkey
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.co.uk/" role="menuitem">
        <span class="dropdown_label">
                United Kingdom
        </span>
    </a>

                        </li>
                </ul>
                <ul class="dropdown_menu-group" role="menu" aria-hidden="false">
                        <li class="dropdown_item" role="presentation">
                                    <a class="dropdown_link js-dropdown-link" href="https://www.yelp.com/" role="menuitem">
        <span class="dropdown_label">
                United States
        </span>
    </a>

                        </li>
                </ul>
        </div>
    </div>

    </div>

            </div>
        </div>
    </div>

                
    </div>

                                    <div class="main-footer_section lesser-text responsive-hidden-small">
            <div class="footer-menu footer-menu--inline footer-menu--bordered footer-menu--separated footer-menu--directory">
                <span class="footer-menu_header">Site Map</span>
                <ul class="footer-menu_list">
                        <li class="footer-menu_item"><a href="/atlanta">Atlanta</a></li>
                        <li class="footer-menu_item"><a href="/austin">Austin</a></li>
                        <li class="footer-menu_item"><a href="/boston">Boston</a></li>
                        <li class="footer-menu_item"><a href="/chicago">Chicago</a></li>
                        <li class="footer-menu_item"><a href="/dallas">Dallas</a></li>
                        <li class="footer-menu_item"><a href="/denver">Denver</a></li>
                        <li class="footer-menu_item"><a href="/detroit">Detroit</a></li>
                        <li class="footer-menu_item"><a href="/honolulu">Honolulu</a></li>
                        <li class="footer-menu_item"><a href="/houston">Houston</a></li>
                        <li class="footer-menu_item"><a href="/la">Los Angeles</a></li>
                        <li class="footer-menu_item"><a href="/miami">Miami</a></li>
                        <li class="footer-menu_item"><a href="/minneapolis">Minneapolis</a></li>
                        <li class="footer-menu_item"><a href="/nyc">New York</a></li>
                        <li class="footer-menu_item"><a href="/philadelphia">Philadelphia</a></li>
                        <li class="footer-menu_item"><a href="/portland">Portland</a></li>
                        <li class="footer-menu_item"><a href="/sacramento">Sacramento</a></li>
                        <li class="footer-menu_item"><a href="/san-diego">San Diego</a></li>
                        <li class="footer-menu_item"><a href="/sf">San Francisco</a></li>
                        <li class="footer-menu_item"><a href="/san-jose">San Jose</a></li>
                        <li class="footer-menu_item"><a href="/seattle">Seattle</a></li>
                        <li class="footer-menu_item"><a href="/dc">Washington, DC</a></li>
                        <li class="footer-menu_item"><a href="/locations">More Cities</a></li>
                </ul>
            </div>
        </div>

            
                <div class="main-footer_mobile-links responsive-visible-small-block hidden-non-responsive-block">
        <ul class="footer-menu--inline u-text-centered">
                <li class="footer-menu_item">
                    <a href="/about">About</a>
                </li>
                <li class="footer-menu_item">
                    <a href="https://officialblog.yelp.com/">Blog</a>
                </li>
                <li class="footer-menu_item">
                    <a href="http://www.yelp-support.com/?l=en_US">Support</a>
                </li>
                <li class="footer-menu_item">
                    <a href="/static?country=US&amp;p=tos">Terms</a>
                </li>
        </ul>
    </div>

                <div class="main-footer_city-landscape-img responsive-visible-large-block" role="presentation"></div>

                <small class="main-footer_copyright">
            Copyright © 2004–2016 Yelp Inc. Yelp, <img src="https://s3-media2.fl.yelpcdn.com/assets/srv0/yelp_styleguide/9d213bfb766e/assets/img/logos/logo_tiny.png" alt="Yelp logo" class="main-footer_logo-copyright" srcset="https://s3-media4.fl.yelpcdn.com/assets/srv0/yelp_styleguide/c771cf549fdc/assets/img/logos/logo_tiny@2x.png 2x">, <img src="https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_styleguide/86ec59fef415/assets/img/logos/burst_tiny.png" alt="Yelp burst" class="main-footer_logo-burst" srcset="https://s3-media4.fl.yelpcdn.com/assets/srv0/yelp_styleguide/7da20975cdc2/assets/img/logos/burst_tiny@2x.png 2x"> and related marks are registered trademarks of Yelp.
    </small>

                <!--Source: Freebase (https://www.freebase.com/), licensed under CC-BY (https://creativecommons.org/licenses/by/2.5/)-->


            </div>
        </div>
    </div>
<!-- google_ad_section_end -->

            <div style="display: none;" id="page-popups">
            </div>

                    
        
        

        </div> 

        

    <script>            yConfig = {"bingMapsUrl": "https://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=7.0\u0026mkt=en-US\u0026s=1\u0026onscriptload=", "cookies": {"ADMIN_SEARCH_USERDATA_RADIUS": "udr", "RECENT_LOCATIONS": "recentlocations", "SEARCH_PREFS": "searchPrefs", "JS_TRACK": "js_track", "YUV": "yuv", "DEBUG": "debug", "SELECTED_ACTIVITY_FEED": "fd", "SIGNUP_TRACK": "strack", "EXPR_OVERRIDE": "expr", "COOKIE_INFO": "cim", "LOCATION": "location", "APP_PITCH_CLOSED": "ap", "ADMIN_CM_SCOREBOARD_SETTINGS": "acms", "SEARCH_SUGGEST_INFO": "search_suggest", "ADMIN_BUSINESS_ATTRIBUTE_CHANGESET_UTILS_PREFS": "bap", "ADMIN_SEARCH_USERDATA_LOCATION": "udl", "HIDE_BROWSER_BAR": "hidebrowserbar", "UPGRADES_IN_ARREARS": "uia", "USED_LOCALE_SELECTOR": "used_locale_selector", "PRIVACY_POLICY_NOTICE": "ppn", "DISMISSIBLE_MESSAGE_COOKIE": "dm", "SUGGEST_COOKIE": "ssi", "ADMIN_SEARCH_USERDATA": "ud", "MESSAGE_SENDER_PASSED_CAPTCHA": "mspc", "QUANTCAST": "qntcst", "AD_CLICKS": "adc"}, "webviewFlow": null, "enabledSitRepChannels": {"vertical_search_platform": true, "biz_map_view": true, "call_to_action": true, "vertical_search_reservation": true, "biz_services": true, "frontend_performance": true, "ytp_session_events": true, "biz_directions": true}, "isWebviewRequest": false, "uniqueRequestId": "f013a60e1f47b5ba", "googleMapsUrl": "//maps.googleapis.com/maps/api/js?client=gme-yelp\u0026language=en\u0026sensor=false", "cdn": {"hostnamePattern": {"s3": "s3-media%s.fl.yelpcdn.com", "yelp": "media%s.fl.yelpcdn.com"}, "shardCount": 4}, "yelpcodeTemplateVersion": "08688b325c", "isLoggedIn": false, "imageUrls": {"mapMarkers": "https://s3-media1.fl.yelpcdn.com/assets/2/www/img/61a4c5ed6fcc/map/map_markers_sprite.png", "stars": "https://s3-media1.fl.yelpcdn.com/assets/srv0/yelp_design_web/8a6fc2d74183/assets/img/stars/stars.png"}, "mapMarkerSerial": "20160801", "uaInfo": {"device": {"family": "Other"}, "os": {"major": null, "patch_minor": null, "minor": null, "family": "Other", "patch": null}, "string": "Scrappy-LinkExpanding 1.0 (+https://github.com/blakeembrey/node-scrappy)", "user_agent": {"major": null, "minor": null, "family": "Other", "patch": null}, "attributes": {}}, "isSitRepEnabled": true, "comscore": {"c15": "", "c3": "", "c2": 7130511, "c1": 2, "c6": "", "c5": "", "c4": ""}, "enableHighVolumeGAEvents": false, "webviewInfo": {}, "vendorExternalURLs": {}, "cookieDomain": ".www.yelp.com", "recaptchaPublicKey": "6Le5OSYTAAAAADy8seTrWT0eqpS795iV32Gm9Ag1", "isLive": true, "bingMapsKey": "AjhDhG82AEA_I4CdC-0o2DTDxg1Ojh0AZdcp_o-IbNuJGlb5fMMrig728eetoW8S", "isClientErrorsEnabled": false, "googlePlacesUrl": "//maps.googleapis.com/maps/api/js?key=AIzaSyByT6TXVL4jSf0MrzRwg0eG66A8-P4r0ps\u0026language=en\u0026libraries=places"};
</script>
        
        
        
        
        <noscript><img src="https://sb.scorecardresearch.com/p?cj=1&amp;c15=&amp;c3=&amp;c2=7130511&amp;c1=2&amp;c6=&amp;c5=&amp;c4="></noscript>
        

            <script>
            (function() {
                var main = null;

                var main=(function(){function a(c,b){window._qevents=window._qevents||[];window._qevents.push({qacct:b});window.yDFP.quantcast={};window.yDFP.quantcast.cookieName=c;window.yDFP.quantcast.adTagName="qncst_segs";window.yDFP.quantcast.getTargetingData=function(){var g=new RegExp(window.yDFP.quantcast.cookieName+"=([^;]*)");var f=document.cookie.match(g);if(f){var e=decodeURIComponent(f[1]);var d=e.split(",");return{key:window.yDFP.quantcast.adTagName,value:d}}else{return null}};if(!!window.googletag&&!!window.googletag.cmd){window.googletag.cmd.push(function(){var d=window.yDFP.quantcast.getTargetingData();
if(d){window.googletag.pubads().setTargeting(d.key,d.value)}})}}window.yDFP=window.yDFP||{};window.yDFP.initQuantcast=a;return a})();

                if (main === null) {
                    throw 'invalid inline script, missing main declaration.';
                }
                main("qntcst","p-M4yfUTCPeS3vn");
            })();
    </script>
                <noscript>
        <img style="display: none;" src="https://pixel.quantserve.com/pixel/p-M4yfUTCPeS3vn.gif" border="0" height="1" width="1" alt="Quantcast"/>
    </noscript>

            

        <script>
            window.yPerfTimings.push(["ASYNC_JS:load_jquery:start", (new Date()).getTime()]);
            </script><script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script><script>if(document.readyState === 'interactive') jQuery.ready();
            window.yPerfTimings.push(["ASYNC_JS:load_jquery:end", (new Date()).getTime()]);
            window.yPerfTimings.push(["ASYNC_JS:load_modules:start", (new Date()).getTime()]);
            
        yConfig = window.yConfig || {};
        yConfig.vendorExternalURLs = yConfig.vendorExternalURLs || {};
        </script><script src="https://s3-media1.fl.yelpcdn.com/assets/2/www/js/390cabd3e191/assets/module_tmp_third_party-en_US.min.js"></script><script src="https://s3-media4.fl.yelpcdn.com/assets/2/www/js/e988fc3dd882/assets/module_core-en_US.min.js"></script><script>
                yConfig.vendorExternalURLs["plugin-detect"]=['https://s3-media4.fl.yelpcdn.com/assets/2/www/js/bfd62b330c7a/assets/vendor_external/plugin-detect-0.6.3.min.js']
                
                yConfig.vendorExternalURLs["fast-click"]=['https://s3-media1.fl.yelpcdn.com/assets/2/www/js/960df06ce458/assets/vendor_external/fastclick.min.js']
                yelp.www.init.initGoogleAnalytics({"domain": "yelp.com", "dimensions": {"www": {"rating": [114, 4.0], "txn_growth.popular_items_for_vertical_search_experiment": [57, "enabled_very_popular_restaurant"], "www_biz_details_claim_status": [109, "link_only"], "internal_linking_v1": [148, "inactive_status_quo_0"], "traffic_biz_title_hold_out_experiment": [135, "no_cohort"], "txn_growth_search_answers_reservations": [45, "status_quo"], "auto_enable_pickup": [26, "disabled"], "traffic_biz_title_request_a_quote_experiment_v2": [106, "no_cohort"], "txn_growth.www.delivery_attributes_biz_page": [84, "enabled"], "page_depth": [41, 0], "auto_enable_with_separated_search": [32, "enabled"], "biz_num_photos": [9, "100+"], "txn_growth.www.reservation_button_color_experiment": [104, "status_quo"], "ytp_order_confirmation_page": [143, "enabled"], "traffic_review_wall_experiment": [31, "no_cohort"], "txn_growth.platform_wilson_score_exponent_v2": [63, "exponent_is_strong"], "biz_tl_category": [11, "coffee, bubbletea"], "list_details_service": [116, "enabled"], "price_range": [113, 1], "remove_platform_category_filter": [30, "status_quo"], "txn_growth.www.recovery_experience_results_experiment": [124, "show_2"], "referrer": [64, "none"], "mtb_weekly_growth_1": [85, "mtb_composer_enhancements-status_quo-mtb_request_quotes_from_other_businesses-enabled-not_request_a_quote-not_homeservices-en_US"], "mtb_weekly_growth_2": [101, "ad.request_a_quote_advertisement_desktop-False"], "www_app_pitch_experiment_slots": [111, "status_quo"], "txn_growth.platform_ctr_score_exponent_v2": [61, "status_quo"], "biz_claimed": [7, "True"], "txn_growth.in_panel_platform_delivery_promoted_filter": [87, "status_quo"], "traffic_biz_details_review_highlights_experiment_v1": [150, "inactive_status_quo_0"], "review_count_experiment_v2": [159, "inactive_disabled_no_cohort_sq_01"], "traffic_biz_photo_title_experiment_v1": [74, "inactive_verbose_2"], "www_biz_details_claim_status_v3": [152, "biz_badge_learn_more"], "is_paying_business": [117, "False"], "integration": [14, ""], "login_use_new_flow": [78, "enabled"], "embeddable_reviews": [98, "enabled"], "ad.www_show_platform_low_intent_search_actions": [88, "delivery_action"], "txn_growth_search_answers_food": [40, "status_quo"], "biz_review_count": [10, "100+"], "i18n_email_opt_in_experiment_de": [157, "email_opt_in"], "i18n.no_visible_reviews.reviews": [102, "no_cohort"], "reservation_logged_out_flow_experiment": [72, "optional_login"], "biz_keywords_density_experiment": [22, "03_enabled"], "txn_growth.platform_distance_score_curve_v3": [66, "status_quo"], "category_paths_to_root": [94, "[['coffee', 'food'], ['bubbletea', 'food']]"], "reservation_provider": [146, null], "txn_growth.distinct_platform_pickup_filter": [86, "status_quo"], "biz_closed": [8, "False"], "ytp_eat24_yelp_style_to_iframe": [136, "status_quo"], "distil": [53, 1], "internal_ip": [27, "False"], "txn_growth_filter_act_like_auto_enable": [54, "status_quo"], "traffic_transactions_v3_experiment_eligible_treatment": [154, "conditions"], "pinterest_share_on_biz_photo": [80, "status_quo"], "account_level": [1, "anon"], "next_biz_card_on_search": [97, "status_quo"], "content_country": [15, "US"], "www_fixed_header_v2": [13, "status_quo"], "txn_growth.www.spa_and_salon_instant_booking_experiment": [19, "status_quo"], "full_url": [34, "/biz/boba-guys-san-francisco-4"], "distil_js_enabled": [138, true], "is_business_RAQ_enabled": [69, "disabled"], "www_biz_details_claim_teasers": [132, "logged_out_text_only_claim_teaser_in_showcase_container"], "platform_pickup_filter": [20, "enabled"], "platform_verticals": [38, "none"], "biz_tt_last_review": [12, "6"], "photos_new_js_flow": [25, "enabled"], "traffic_biz_title_v6_transactions_experiment_v3": [46, "no_cohort"], "next_biz_card_on_lists": [96, "enabled"], "txn_growth_free_delivery_filter_expansion": [35, "enabled"], "pagelet_mode_www_biz_details": [24, "allow_async"], "contractor_license_data_widget": [110, "no_cohort"], "txn_growth.platform_distance_score_exponent_v2": [56, "status_quo"], "business_features_raq": [160, "disabled"], "ytp_delivery_landing": [125, "enabled"], "is_biz_user": [129, "False"], "www_search_snippets_in_sync_with_ads": [112, "status_quo_8"], "viewport_tracking": [29, null], "transaction_growth_featured_people_also_viewed": [77, "status_quo"], "pagelet_mode_www_home": [23, "allow_async"], "hierarchy_breadcrumbs": [82, "False"], "txn_growth_show_widget_on_non_platform_biz": [76, "status_quo"], "dead_end_separated_search": [18, "enabled"], "promote_ads_to_non_advertiser_on_biz_details_impression_shown": [145, "False"], "meta_description_case": [79, "review"], "www_signup_redesign": [92, "status_quo"], "www_asymetrica": [119, "status_quo"], "review_actions_dropdown": [2, "disabled"], "lower_promoted_delivery_threshold": [58, "reduced_to_fifteen"], "txn_growth.platform_attr_score_exponent_v2": [60, "exponent_is_very_weak"], "photo_has_caption": [93, null], "biz_chain": [75, "Boba Guys"], "ytp_start_orders_cta_btn_color_exp": [65, "green_button"], "txn_growth.www.delivery_estimate_change_to_estimated_arrival": [95, "enabled"], "txn_growth_suggest_boost_delivery_searches": [33, "status_quo"], "biz_user_is_owner_of_biz": [128, "False"]}, "global": {"rating": [27, 4.0], "biz_closed": [4, "False"], "distil": [12, 1], "internal_ip": [18, "False"], "biz_tt_last_review": [8, "6"], "price_range": [23, 1], "account_level": [1, "anon"], "is_paying_business": [20, "False"], "content_country": [11, "US"], "integration": [17, ""], "biz_num_photos": [5, "100+"], "full_url": [15, "/biz/boba-guys-san-francisco-4"], "distil_js_enabled": [13, true], "meta_description_case": [21, "review"], "biz_tl_category": [7, "coffee, bubbletea"], "biz_review_count": [6, "100+"], "platform_verticals": [22, "none"], "reservation_provider": [33, null], "biz_chain": [2, "Boba Guys"], "referrer": [28, "none"], "category_paths_to_root": [10, "[['coffee', 'food'], ['bubbletea', 'food']]"], "biz_claimed": [3, "True"]}}, "enable_high_volume_events": false, "trackers": {"www": "UA-30501-24", "global": "UA-30501-1"}, "js_dimensions": {"www": {"platform_order_type": [127, null], "js_pixel_ratio": [16, null], "js_vertical_search_type": [39, null]}, "global": {}}, "clientID": "39914266A81287E0", "metrics": {"www": {"mtb-reply-rate-shown": [4, null], "mtb-response-time-shown": [1, null]}, "global": {}}}, {}, null, false);
yelp.www.init.initSearchSuggest("#find_desc", ".find-decorator", "#dropperText_Mast", true);
yelp.www.init.initAccountMenu("#topbar-account-item");
yelp.www.init.initTimeOnPageAnalytics();
yelp.init.initAdAcknowledgment("/ad_acknowledgment", "d5914a75327491d026c1399caf993fa6fbc76f73485f25d094bb5df52f761a99");
yelp.common.init.adVisibilityTracker("/ad_visibility", "1104d61651cae5025a452ae187188b49de6fbc7fc10cf625142d551e92512b1e");
yelp.init.initDelegatedDropdowns();
yelp.init.attachGhostHovercard("qype", "    \u003cdiv id=\"qype-ghost-user-hovercard\"\u003e\n        \u003cdiv class=\"whatsthis-hovercard\"\u003e\n            \u003ch3\u003eWhat's This?\u003c/h3\u003e\n            \u003cp\u003eThis user has arrived from Qype, a company acquired by Yelp in 2012. We have integrated the two sites to bring you one great local experience.\u003c/p\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n");
yelp.init.attachGhostHovercard("rk", "    \u003cdiv id=\"rk-ghost-user-hovercard\"\u003e\n        \u003cdiv class=\"whatsthis-hovercard\"\u003e\n            \u003ch3\u003eWhat's This?\u003c/h3\u003e\n            \u003cp\u003eThis user has arrived from Restaurant-Kritik.de, a company acquired by Yelp in 2014. We have integrated the two sites to bring you one great local experience.\u003c/p\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n");
yelp.init.attachGhostHovercard("cityvox", "    \u003cdiv id=\"cityvox-ghost-user-hovercard\"\u003e\n        \u003cdiv class=\"whatsthis-hovercard\"\u003e\n            \u003ch3\u003eWhat's This?\u003c/h3\u003e\n            \u003cp\u003eThis user has arrived from Cityvox, a company acquired by Yelp in 2014. We have integrated the two sites to bring you one great local experience.\u003c/p\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n");
yelp.www.init.initAsyncImageLoader();
yelp.pages.init();
yelp.www.init.facebook("97534753161", "//connect.facebook.net/en_US/sdk.js", "v2.3", "v2", ["email", "user_birthday"], ["publish_actions"], ["publish_actions", "user_friends"]);
yelp_display_ads.init.quantcast();
</script><script src="https://s3-media1.fl.yelpcdn.com/assets/2/www/js/ab3089b14d64/assets/module_biz_details-en_US.min.js"></script><script>
                yConfig.vendorExternalURLs["jquery-flot"]=['https://s3-media4.fl.yelpcdn.com/assets/2/www/js/af411e8c182d/assets/vendor_external/jquery.flot.min.js','https://s3-media1.fl.yelpcdn.com/assets/2/www/js/7b2209ac9517/assets/vendor_external/jquery.flot.time.min.js','https://s3-media4.fl.yelpcdn.com/assets/2/www/js/5b0eb1180972/assets/vendor_external/jquery.flot.pie.min.js']
                yelp.www.init.biz_details.initBookmark(false, "/bookmark/remove_biz_confirm", "ee53f1949094272814e0a0b88b082839177de44e63760b6e4de2b36c14084441", "515ec330f5e0525279f5bbdc07e882058508fd8178d2ca2087c635abf13ee621", "53e8db774a1a68abcd50ad2e41707f00a4015796de488aa215868216e0411da3", "18TtLS_JtiS2OH30FLqNrw");
yelp.www.init.biz_details.sendToFriend("09a0d634e8ffba2e2032dbbf3d219e07c02447bca70cfd4491be9b409f0a4c8f");
yelp.www.init.biz_details.reservations("659a23765d0109ce6b6052e40321c8f44fcdfd9f1325b3a3fe106277dd583b66", "18TtLS_JtiS2OH30FLqNrw", false, true);
yelp.www.init.biz_details.initEditCategory(true);
yelp.www.init.biz_details.initPlatform("BIZ_DETAILS", true);
yelp.www.init.biz_details.initPositionWithScroll();
yelp.www.init.biz_details.boyModule("/biz/boba-guys-san-francisco-4/best_of_yelp/");
yelp.www.init.biz_details.fromBusinessOwner();
yelp.www.init.biz_details.reviewWall();
yelp.www.init.biz_details.platformBannerGAInit();
yelp.www.init.biz_details.reviewFeedController("/biz/boba-guys-san-francisco-4/review_feed/", "/biz/boba-guys-san-francisco-4/review_feed_auto_fetch/", "/biz/boba-guys-san-francisco-4/review_highlight_feed/", null, 3, 8, "20130924", null);
yelp.www.init.biz_details.initMapLightbox();
yelp.www.init.biz_details.initConsumerAlert();
yelp.www.init.biz_details.initDealExpander();
yelp.www.init.biz_details.initBizPhotoMetrics();
yelp.www.init.biz_details.mapSitRepLogger("18TtLS_JtiS2OH30FLqNrw");
yelp.www.init.biz_details.initShowcaseMediaLightboxTrigger();
yelp.www.init.biz_details.initMessageTheBusiness("/message_the_business/18TtLS_JtiS2OH30FLqNrw/popup_form");
yelp.www.init.biz_details.initCoachmark();
yelp.www.init.biz_details.initPlatformPopup("/transaction_platform/start_order/18TtLS_JtiS2OH30FLqNrw");
yelp.www.init.biz_details.initClaimStatusHover(true);
yelp.www.init.biz_details.initAdClicksStorage({"business": null, "campaign": null, "timestamp": null});
yelp.www.init.biz_details.initAdClicksStorageReader(".js-add-url-tagging a", "18TtLS_JtiS2OH30FLqNrw");
yelp.www.init.biz_details.initNotRecommendedDrawer("/not_recommended_reviews/preview?biz_id=18TtLS_JtiS2OH30FLqNrw");
yelp.www.init.biz_details.relatedBusinesses();
yelp.www.init.biz_details.initRatingDetails();

            var end = new Date().getTime();
            window.yPerfTimings.push(["ASYNC_JS:load_modules:end", end]);
            window.yPerfTimings.push(["JS_TIMING:modules_executed:end", end]);
            </script><script src="//sb.scorecardresearch.com/beacon.js"></script><script>
                if (window.COMSCORE && window.COMSCORE['beacon']) {
                    window.COMSCORE['beacon']({'c15': '', 'c3': '', 'c2': 7130511, 'c1': 2, 'c6': '', 'c5': '', 'c4': ''});
                }
                </script>

            <script>
            (function() {
                var main = null;

                var main=function(){if(["iPhone","iPod","iPad"].indexOf(navigator.platform)===-1||!window.requestAnimationFrame){return}window.bannerDetectionInitialScroll=window.bannerDetectionInitialScroll||window.scrollY||-100;requestAnimationFrame(function(){window.scrollTo(0,-100);requestAnimationFrame(function(){window.scrollBy(0,1);requestAnimationFrame(function(){window.userHasYelpApp=!window.scrollY;window.scrollTo(0,window.bannerDetectionInitialScroll)})})})};

                if (main === null) {
                    throw 'invalid inline script, missing main declaration.';
                }
                main();
            })();
    </script>
        <script>
            (function() {
                var main = null;

                var main=function loadSpice(g){var j=0;var k=1;var h=2;var e="0";var i="1";var l=function(){if(document.querySelector){return document.querySelector(".delay-spice")}var m=document.getElementsByTagName("div");var p=m.length;var o=new RegExp("(^|\\s)delay-spice(\\s|$)");for(var n=0;n<p;++n){if(o.test(m[n].className)){return m[n]}}return null};function d(){return(window._gaUserPrefs&&window._gaUserPrefs["ioo"]&&typeof(window._gaUserPrefs["ioo"])==="function"&&window._gaUserPrefs["ioo"]()===true||false)?"1":"0"
}function f(o,n){var p;if(n===j){p=["/ad_sp","ice?","r=",g]}else{p=["/sp","ice?","r=",g];if(n===h){p.push("&log_ad_spice=1")}}p.push("&pagevis="+o);p.push("&gablock="+d());var m=new Image();m.src=p.join("")}function b(m){if(l()){f(m,k);c(m)}else{f(m,h)}}function c(m){if(l()){window.setTimeout(function(){c(m)},500)}else{f(m,j)}}if(!document.webkitHidden){b(e)}else{var a=false;document.addEventListener("webkitvisibilitychange",function(){if(document.webkitHidden||a){return}a=true;b(i)})}};

                if (main === null) {
                    throw 'invalid inline script, missing main declaration.';
                }
                main("f013a60e1f47b5ba");
            })();
    </script>

                <script>
            (function() {
                var main = null;

                var main=function(){var a=new Image(1,1);a.onerror=a.onload=function(){a.onerror=a.onload=null};a.src=["//secure-us.imrworldwide.com/cgi-bin/m?ci=us-804377h&cg=0&cc=1&si=",escape(window.location.href),"&rp=",escape(document.referrer),"&ts=compact&rnd=",(new Date()).getTime()].join("")};

                if (main === null) {
                    throw 'invalid inline script, missing main declaration.';
                }
                main();
            })();
    </script>
        <noscript>
                <img src="//secure-us.imrworldwide.com/cgi-bin/m?ci=us-804377h&amp;cg=0&amp;cc=1&amp;ts=noscript" width="1" height="1" alt="">
        </noscript>


    <script>            yConfig.csrf = {"SitRep": "544d8ab3df5f981db95919199be4c93ee020d8ca7173460fec7632f5df3a5287", "FacebookTokenRefresh": "eef6d91f10d4c05c5b7255ee3eb25b22d52a1db1f84649c8b04157b637194881"};
</script>

    <script>                window.yPerfTimings.push(["body:end", (new Date()).getTime()]);
</script>


        <div id="ttdUniversalPixelTag290e816a69e9439f960a9588bc2ffb54" style="display:none">
            <script src="https://js.adsrvr.org/up_loader.1.1.0.js" type="text/javascript"></script>
            <script>
            (function() {
                var main = null;

                var main=function(){(function(b){if(typeof TTDUniversalPixelApi==="function"){var a=new TTDUniversalPixelApi();a.init("igcouad",["mvh4ai1"],"https://insight.adsrvr.org/track/up","ttdUniversalPixelTag290e816a69e9439f960a9588bc2ffb54")}})(this)};

                if (main === null) {
                    throw 'invalid inline script, missing main declaration.';
                }
                main();
            })();
    </script>
        </div>

        <noscript>
            <img height="1" width="1" style="display:none" src="https://www.facebook.com/tr?id=102029836881428&ev=PageView&noscript=1"/>
        </noscript>
    </body>
</html>","rawHeaders":["Date","Mon, 05 Dec 2016 06:25:24 GMT","Content-Type","text/html; charset=UTF-8","Transfer-Encoding","chunked","Connection","close","Vary","Accept-Encoding","Cache-Control","private","Set-Cookie","bse=c6c43f4a7b6e70c08b1aebb6e7e89b49; Domain=.yelp.com; Path=/; HttpOnly","Vary","Accept-Encoding,User-Agent","X-Content-Type-Options","nosniff","X-Mode","ro","X-Node","www_all","X-Node","10-64-101-254-uswest1aprod","X-Proxied","10-64-0-38-uswest1aprod","X-XSS-Protection","1; report=https://www.yelp.com/xss_protection_report","X-Zipkin-Id","90c6e5f92bbc1940","Content-Encoding","gzip","Server","cloudflare-nginx","CF-RAY","30c56ba70c4c53ae-LAX","Age","529"],"url":"https://www.yelp.com/biz/boba-guys-san-francisco-4","status":200,"statusText":"OK","varyHeaders":[["Accept-Encoding",null]]},"ttl":null,"stored":1480969621760}