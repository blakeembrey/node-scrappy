{"item":{"body":"","rawHeaders":["Cache-Control","max-age=546","Content-Encoding","gzip","Content-Type","text/html; charset=utf-8","Expires","Mon, 05 Dec 2016 06:30:20 UTC","Last-Modified","Mon, 05 Dec 2016 06:12:08 UTC","Server","nginx","Content-Length","8040","Vary","Accept-Encoding","X-Frame-Options","SAMEORIGIN","X-Frame-Options","SAMEORIGIN","Date","Mon, 05 Dec 2016 06:26:17 GMT","Connection","close","Set-Cookie","ealocale=en-us; expires=Mon, 31-Dec-2038 23:59:59 GMT; path=/; domain=.battlefield.com","X-Frame-Options","SAMEORIGIN","Age","532"],"url":"https://www.battlefield.com/buy/battlefield-1","status":200,"statusText":"OK","varyHeaders":[["Accept-Encoding",null]]},"ttl":null,"stored":1480969627208}