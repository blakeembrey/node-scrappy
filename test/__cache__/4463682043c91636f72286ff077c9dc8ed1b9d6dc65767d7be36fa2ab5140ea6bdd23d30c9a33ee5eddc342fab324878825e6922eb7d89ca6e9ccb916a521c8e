{"item":{"body":"





<!DOCTYPE html>
<html>
    <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# article: http://ogp.me/ns/article#">
        <title>
            
                Buy Battlefield 1 – Battlefield Official Site
            
        </title>
        <base href="/" >
        <meta charset="utf-8" />
        <meta http-equiv="x-ua-compatible" content="ie=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />
        <meta name="description" content="Buy Battlefield 1 on Xbox One, PlayStation 4, or Origin for PC. " />
        







    

    
        <link rel="alternate" href="https://www.battlefield.com/cs-cz/buy/battlefield-1" hreflang="cz"/>
    

    
        <link rel="alternate" href="https://www.battlefield.com/de-de/buy/battlefield-1" hreflang="de"/>
    

    
        <link rel="alternate" href="https://www.battlefield.com/en-au/buy/battlefield-1" hreflang="en-au"/>
    

    
        <link rel="alternate" href="https://www.battlefield.com/en-gb/buy/battlefield-1" hreflang="en-gb"/>
    

    
        <link rel="alternate" href="https://www.battlefield.com/es-es/buy/battlefield-1" hreflang="es-es"/>
    

    
        <link rel="alternate" href="https://www.battlefield.com/es-mx/buy/battlefield-1" hreflang="es-mx"/>
    

    
        <link rel="alternate" href="https://www.battlefield.com/fr-fr/buy/battlefield-1" hreflang="fr"/>
    

    
        <link rel="alternate" href="https://www.battlefield.com/it-it/buy/battlefield-1" hreflang="it"/>
    

    
        <link rel="alternate" href="https://www.battlefield.com/ja-jp/buy/battlefield-1" hreflang="ja"/>
    

    
        <link rel="alternate" href="https://www.battlefield.com/ko-kr/buy/battlefield-1" hreflang="ko"/>
    

    
        <link rel="alternate" href="https://www.battlefield.com/nl-nl/buy/battlefield-1" hreflang="nl"/>
    

    
        <link rel="alternate" href="https://www.battlefield.com/pl-pl/buy/battlefield-1" hreflang="pl"/>
    

    
        <link rel="alternate" href="https://www.battlefield.com/pt-br/buy/battlefield-1" hreflang="pt"/>
    

    
        <link rel="alternate" href="https://www.battlefield.com/ru-ru/buy/battlefield-1" hreflang="ru"/>
    

    
        <link rel="alternate" href="https://www.battlefield.com/tr-tr/buy/battlefield-1" hreflang="tr"/>
    

    
        <link rel="alternate" href="https://www.battlefield.com/zh-tw/buy/battlefield-1" hreflang="zh"/>
    

    
        <link rel="alternate" href="https://www.battlefield.com/ar-sa/buy/battlefield-1" hreflang="ar-sa"/>
    


        
        
            
                <meta name="apple-itunes-app" content="app-id=505311207" />
            
        
        <link rel="apple-touch-icon-precomposed" sizes="152x152" href="/assets/dist/images/apple-touch-icon-152x152.png" />
        <link rel="apple-touch-icon-precomposed" sizes="144x144" href="/assets/dist/images/apple-touch-icon-144x144.png" />
        <link rel="apple-touch-icon-precomposed" sizes="120x120" href="/assets/dist/images/apple-touch-icon-120x120.png" />
        <link rel="apple-touch-icon-precomposed" sizes="114x114" href="/assets/dist/images/apple-touch-icon-114x114.png" />
        <link rel="apple-touch-icon-precomposed" sizes="72x72" href="/assets/dist/images/apple-touch-icon-72x72.png" />
        <link rel="apple-touch-icon-precomposed" sizes="57x57" href="/assets/dist/images/apple-touch-icon-57x57.png" />
        <link rel="icon" type="image/x-icon" href="/assets/dist/images/favicon.ico" />

        
            <link rel="canonical" href="https://www.battlefield.com/buy/battlefield-1 " />
        

        
            

<meta property="og:url" content="https://www.battlefield.com/buy/battlefield-1" />
<meta property="og:site_name" content="Battlefield" />
<meta property="og:type" content="article" />

    <meta property="og:title" content="Buy Battlefield 1 – Battlefield Official Site" />
    <meta name="twitter:title" content="Buy Battlefield 1 – Battlefield Official Site" />
    <meta name="twitter:card" content="summary_large_image" />


    <meta property="og:description" content="Buy Battlefield 1 on Xbox One, PlayStation 4, or Origin for PC. " />
    <meta name="twitter:description" content="Buy Battlefield 1 on Xbox One, PlayStation 4, or Origin for PC. " />


    <meta property="og:image" content="http://media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/_global_/_jcr_content/ccm/componentwrapper_1/components/opengraph/ogImage.img.jpg" />
    <meta name="twitter:image" content="http://media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/_global_/_jcr_content/ccm/componentwrapper_1/components/opengraph/ogImage.img.jpg" />


    <meta name="twitter:site" content="@battlefield" />
    <meta name="twitter:creator" content="@battlefield" />


        
        <script>
            try {
                document.domain = 'battlefield.com';
            } catch(e) {
                console.error('Unable to set document domain');
            }

            window.BF = window.BF || {};

            
                window.BF.loadUserWidgetImmediately = true;
            

            BF.globals = {
                locale: "en_US",
                codeRedemptionLink: 'https://checkout.preprod.origin.com/lb-ui/redeemcode/startRedeemCode',
                codeRedemptionHash: 'content'
            };
        </script>
        <script src="/assets/dist/bf-helpers.min.js"></script>
        <script src="/assets/vendor/webcomponentsjs/webcomponents.min.js"></script>
        <script src="/assets/vendor/picturefill/dist/picturefill.min.js"></script>
        <link rel="import" href="//pl.ea.com/release/1.8.0/elements/ea-elements.html" />
        <script src="/assets/vendor/clipboard/dist/clipboard.min.js"></script>
        <link rel="import" href="/assets/dist/elements/battlefield-elements.html" />
        <link rel="stylesheet" href="/assets/dist/styles.min.css" />
        <script src="https://use.typekit.net/iru2fii.js"></script>
        <script>try{Typekit.load({ async: true });}catch(e){}</script>
        
            
                <script src="//companion-api.battlefield.com/companion/init.js"></script>
                <script type="text/javascript">
                    if (window.SC && window.SC.setPulseLocale) {
                        window.SC.setPulseLocale('en-us');
                    }
                </script>
            
        
        
            <script type="text/javascript" src='//tags.tiqcdn.com/utag/ea/battlefield-web/prod/utag.js' async></script>
        
        <style is="custom-style">
        :root {
            --ea-brand-color: #f17f1a;
            --ea-brand-light-gradient: #ff9933;
            --ea-brand-dark-gradient: #de6f00;
            --ea-theme-secondary-font-family: "purista-web", sans-serif;
            
        }
        </style>
    </head>
    <body unresolved class="bf-locale--en">
        
            

<nav is="ea-local-nav"
    
        home-text = "Battlefield"
        home-tooltip = "Battlefield"
        home-link = "/"
    
    
        logo-image="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/_global_/_jcr_content/ccm/componentwrapper/components/localnav/logoImage.img.png
"
    
    
    
        theme = "light"
    
    
        shelf-type = "band"
    
    
        open-drawer-text = "Menu"
    
    
        open-drawer-tooltip = "Open Menu"
    
    
        close-drawer-text = "Close"
    
    
        close-drawer-tooltip = "Close Menu"
    
    
    
    
        mini
    
>
    
        
            <a
                is="ea-link"
                class="eapl-local-nav__shelf-link"
                href="/companion"
                title="Career"
            >Career</a>
        
            <a
                is="ea-link"
                class="eapl-local-nav__shelf-link"
                href="/games"
                title="Games"
            >Games</a>
        
            <a
                is="ea-link"
                class="eapl-local-nav__shelf-link"
                href="/news"
                title="News"
            >News</a>
        
            <a
                is="ea-link"
                class="eapl-local-nav__shelf-link"
                href="/community/insider"
                title="Insider"
            >Insider</a>
        
            <a
                is="ea-link"
                class="eapl-local-nav__shelf-link"
                href="https://forums.battlefield.com"
                title="Forum"
            >Forum</a>
        
            <a
                is="ea-link"
                class="eapl-local-nav__shelf-link"
                href="/buy/battlefield-1"
                title="Buy"
            >Buy</a>
        
    
    
    
        
            




    <ea-local-nav-drawer-sub-nav
        toggle-text="Games"
        toggle-tooltip="Games"
    >
    
        
            




    <a
        is="ea-link"
        class="eapl-local-nav__drawer-sub-link"
        href="/games/battlefield-1/"
        title="Battlefield 1">
        Battlefield 1
    </a>


        
        
    
        
            




    <a
        is="ea-link"
        class="eapl-local-nav__drawer-sub-link"
        href="/games/battlefield-hardline"
        title="Battlefield Hardline">
        Battlefield Hardline
    </a>


        
        
    
        
            




    <a
        is="ea-link"
        class="eapl-local-nav__drawer-sub-link"
        href="/games/battlefield-4"
        title="Battlefield 4">
        Battlefield 4
    </a>


        
        
    
        
            




    <a
        is="ea-link"
        class="eapl-local-nav__drawer-sub-link"
        href="/games"
        title="All Battlefield">
        All Battlefield
    </a>


        
        
    
    </ea-local-nav-drawer-sub-nav>



        
            




    <ea-local-nav-drawer-sub-nav
        toggle-text="News"
        toggle-tooltip="News"
    >
    
        
            




    <a
        is="ea-link"
        class="eapl-local-nav__drawer-sub-link"
        href="/news"
        title="All news">
        All News
    </a>


        
        
    
    </ea-local-nav-drawer-sub-nav>



        
            




    <a
        is="ea-link"
        class="eapl-local-nav__drawer-link"
        href="/community/insider"
        title="Insider"
    >Insider</a>



        
            




    <a
        is="ea-link"
        class="eapl-local-nav__drawer-link"
        href="https://forums.battlefield.com"
        title="Forums"
    >Forums</a>



        
            




    <a
        is="ea-link"
        class="eapl-local-nav__drawer-link"
        href="/companion"
        title="Companion"
    >Companion</a>



        
    
    




    

<ea-container
    
>
    <ea-tile
        
        
        
            media="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/_global_/_jcr_content/ccm/componentwrapper/components/localnav/featuredProduct/tile/image.img.png
"
        
        
        
        
    >
        
        
        
        
            <img src="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/_global_/_jcr_content/ccm/componentwrapper/components/localnav/featuredProduct/tile/image.img.png
" alt="" />
        
        
            <dl is="ea-quantitative-data">
                





            </dl>
        
        <ea-tile-copy>
        
        </ea-tile-copy>
        
        
            




    

<a
    is="ea-cta"
    
        type="standard"
    
    
        href="/buy/battlefield-1"
    
    
        title="BUY"
    
    
        icon="arrow"
    
    
    
        fill-color="none"
    
    
        text-color="light"
    
    
    
    
    
        intent="buy"
    
    
    
>
    
        BUY
    
</a>




        
    </ea-tile>
</ea-container>




</nav>

        

        
            
                <bf-player-widget
                    login-link="/login?postAuthUri=/buy/battlefield-1&locale=en_US"
                    logout-link="/logout"
                    login-label="Sign In"
                    logout-label="Sign Out"
                    settings-label="Settings"
                    settings-link="/companion/settings"
                    
                        help-label="Help &amp; About"
                        help-link="/companion/home/more/help"
                    
                    
                        friends-label="Friends"
                        friends-link="/companion/friends"
                    
                    environment="//companion-api.battlefield.com"
                    api-url="/service/auth.json">
                </bf-player-widget>
            
        
        <div class="root">
            
                
<bf-secondary-nav
    
        dropdown-label="GAMES"
    
    
>
    
    
    
        <div class="bf-secondary-nav__dropdown-label">
            <div class="bf-secondary-nav__desktop-label">BATTLEFIELD 1</div>
            <div class="bf-secondary-nav__mobile-label">
                 GAMES 
                </div>
            <iron-icon icon="ea-action-16:chevron" class="bf-secondary-nav__chevron-icon"></iron-icon>
        </div>
        <ul class="bf-secondary-nav__dropdown-list">
            
                <li class="bf-secondary-nav__dropdown-link__container">




    <a
        is="ea-link"
        class="eapl-local-nav__drawer-sub-link"
        href=""
        title="BATTLEFIELD 1">
        BATTLEFIELD 1
    </a>

</li>
            
                <li class="bf-secondary-nav__dropdown-link__container">




    <a
        is="ea-link"
        class="eapl-local-nav__drawer-sub-link"
        href="/buy/battlefield-hardline"
        title="BATTLEFIELD HARDLINE">
        BATTLEFIELD HARDLINE
    </a>

</li>
            
                <li class="bf-secondary-nav__dropdown-link__container">




    <a
        is="ea-link"
        class="eapl-local-nav__drawer-sub-link"
        href="/buy/battlefield-4"
        title="BATTLEFIELD 4">
        BATTLEFIELD 4
    </a>

</li>
            
        </ul>
    
    
    
        <ul class="bf-secondary-nav__featured-list">
            
                <li class="bf-secondary-nav__featured-link__container">
                
                    <a
                        class="bf-secondary-nav__link bf-secondary-nav__link-drawer"
                        href="/games/battlefield-1"
                        title="Overview">
                            OVERVIEW
                            

                     </a>
                    
                
                </li>
            
                <li class="bf-secondary-nav__featured-link__container">
                
                    <a
                        class="bf-secondary-nav__link bf-secondary-nav__link-drawer"
                        href="/games/battlefield-1"
                        title="FEATURES">
                            FEATURES
                            
                                <iron-icon icon="ea-action-16:chevron" class="bf-secondary-nav__chevron-icon"></iron-icon>
                            

                     </a>
                    
                        <div class="bf-secondary-nav__trigger">
                            <svg class="bf-secondary-nav__minus-icon"
                                x="0px"
                                y="0px"
                                viewBox="0 0 16 16"
                                style="enable-background:new 0 0 16 16;"
                            >
                                <path
                                    class="style-scope ea-site-nav"
                                    d="M15,7L1,7C0.4,7,0,7.4,0,8c0,0.6,0.4,1,1,1h14c0.6,0,1-0.4,1-1C16,7.4,15.6,7,15,7z">
                                </path>
                            </svg>
                            <svg
                                class="bf-secondary-nav__plus-icon"
                                x="0px"
                                y="0px"
                                viewBox="0 0 16 16"
                                style="enable-background : new 0 0 16 16 ;"
                            >
                                <path
                                    class="style-scope ea-site-nav"
                                    d="M15,7L9,7V1c0-0.6-0.4-1-1-1C7.4,0,7,0.4,7,1v6L1,7C0.4,7,0,7.4,0,8c0,0.6,0.4,1,1,1h6v6c0,0.6,0.4,1,1,1 c0.6,0,1-0.4,1-1V9h6c0.6,0,1-0.4,1-1C16,7.4,15.6,7,15,7z">
                                </path>
                            </svg>
                        </div>
                        <ul class="bf-secondary-nav__sub-links-list">
                        
                            <li class="bf-secondary-nav__sub-link__container">
                                <a
                                    class="bf-secondary-nav__link"
                                    href="/games/battlefield-1/weapons"
                                    title="WEAPONS">WEAPONS</a>
                            </li>
                        
                            <li class="bf-secondary-nav__sub-link__container">
                                <a
                                    class="bf-secondary-nav__link"
                                    href="/games/battlefield-1/vehicles"
                                    title="VEHICLES">VEHICLES</a>
                            </li>
                        
                            <li class="bf-secondary-nav__sub-link__container">
                                <a
                                    class="bf-secondary-nav__link"
                                    href="/games/battlefield-1/classes"
                                    title="CLASSES">CLASSES</a>
                            </li>
                        
                            <li class="bf-secondary-nav__sub-link__container">
                                <a
                                    class="bf-secondary-nav__link"
                                    href="/games/battlefield-1/maps"
                                    title="MAPS">MAPS</a>
                            </li>
                        
                            <li class="bf-secondary-nav__sub-link__container">
                                <a
                                    class="bf-secondary-nav__link"
                                    href="/games/battlefield-1/modes"
                                    title="MODES">MODES</a>
                            </li>
                        
                            <li class="bf-secondary-nav__sub-link__container">
                                <a
                                    class="bf-secondary-nav__link"
                                    href="/games/battlefield-1/tech"
                                    title="SPECS">SPECS</a>
                            </li>
                        
                            <li class="bf-secondary-nav__sub-link__container">
                                <a
                                    class="bf-secondary-nav__link"
                                    href="/games/battlefield-1/singleplayer"
                                    title="SINGLE PLAYER">SINGLE PLAYER</a>
                            </li>
                        
                            <li class="bf-secondary-nav__sub-link__container">
                                <a
                                    class="bf-secondary-nav__link"
                                    href="/games/battlefield-1/battlepack"
                                    title="BATTLEPACK">BATTLEPACK</a>
                            </li>
                        
                        </ul>
                    
                
                </li>
            
                <li class="bf-secondary-nav__featured-link__container">
                
                    <a
                        class="bf-secondary-nav__link bf-secondary-nav__link-drawer"
                        href="/games/battlefield-1/premium"
                        title="PREMIUM">
                            PREMIUM
                            

                     </a>
                    
                
                </li>
            
                <li class="bf-secondary-nav__featured-link__container">
                
                    <a
                        class="bf-secondary-nav__link bf-secondary-nav__link-drawer"
                        href="/games/battlefield-1/tips"
                        title="TIPS">
                            TIPS
                            

                     </a>
                    
                
                </li>
            
                <li class="bf-secondary-nav__featured-link__container">
                
                    <a
                        class="bf-secondary-nav__link bf-secondary-nav__link-drawer"
                        href="/buy/battlefield-1"
                        title="BUY">
                            BUY
                            

                     </a>
                    
                
                </li>
            
        </ul>
    
</bf-secondary-nav>

            
            




    

    <bf-background-image
        smallest="//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/backgroundimage/image/xsmall.img.jpg"
        small="//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/backgroundimage/image/small.img.jpg"
        medium="//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/backgroundimage/image/medium.img.jpg"
        large="//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/backgroundimage/image/large.img.jpg"
        largest="//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/backgroundimage/image/xlarge.img.jpg"
        
            fixed
        >
    </bf-background-image>



    
<ea-section
    
        type="railed"
    
    
        layout="100"
    
    
        background-color="none"
    
    
        background-overflow="hidden"
    
    
        spacing-top="none"
    
    
        spacing-bottom="none"
    
    
        background-image-smallest="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/section/backgroundImage/xsmall.img.jpg
"
        background-image-small="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/section/backgroundImage/small.img.jpg
"
        background-image-medium="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/section/backgroundImage/medium.img.jpg
"
        background-image-large="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/section/backgroundImage/large.img.jpg
"
        background-image-largest="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/section/backgroundImage/xlarge.img.jpg
"
    
>
    




    
<ea-section-column
    
        indent-left="1"
    
    
        indent-right="1"
    
    
        text-align="center"
    
>
    




    

    <style>
    .mind-the-gap-poq6jm {
        height: 120px;
    }

    @media only screen and (min-width: 768px) {
        .mind-the-gap-poq6jm {
            height: 160px;
        }
    }

    @media only screen and (min-width: 1024px) {
        .mind-the-gap-poq6jm {
            height: 280px;
        }
    }

    @media only screen and (min-width: 1360px) {
        .mind-the-gap-poq6jm {
            height: 340px;
        }
    }
    </style>

    <div class="mind-the-gap-poq6jm"></div>



    

<ea-text
    

    
        text-color="light"
    
    >
    <h3 class="eapl-tout__title d3 d3-light style-scope ea-tout">Battlefield 1 Premium Pass</h3>

</ea-text>



    

<ea-text
    

    
        text-color="light"
    
    >
    <p style="font-size: 20px; line-height: 26px; margin-top: 22px;">Get early access to new Battlefield 1 maps in expansions like They Shall Not Pass (March 2017) with Battlefield 1 Premium Pass.**</p>

</ea-text>



    

    <style>
    .mind-the-gap-red870 {
        height: 16px;
    }

    @media only screen and (min-width: 768px) {
        .mind-the-gap-red870 {
            height: 24px;
        }
    }

    @media only screen and (min-width: 1024px) {
        .mind-the-gap-red870 {
            height: 24px;
        }
    }

    @media only screen and (min-width: 1360px) {
        .mind-the-gap-red870 {
            height: 24px;
        }
    }
    </style>

    <div class="mind-the-gap-red870"></div>



    
<bf-cta-liner alignment="center">
    




    

<a
    is="ea-cta"
    
        type="image"
    
    
        href="https://www.microsoft.com/store/p/battlefield-1-premium-pass/bp1fnb50905n"
    
    
    
        icon="none"
    
    
    
        fill-color="brand"
    
    
        text-color="light"
    
    
        target="_blank"
    
    
    
        image="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/section/columns/column/content/ctaliner/ctas/cta/image.img.png
"
        alt=""
    
    
        intent="buy"
    
    
    
>
    
        Xbox One
    
</a>



    

<a
    is="ea-cta"
    
        type="image"
    
    
        href="http://smarturl.it/BF1-premium"
    
    
    
        icon="none"
    
    
    
        fill-color="brand"
    
    
        text-color="light"
    
    
        target="_blank"
    
    
    
        image="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/section/columns/column/content/ctaliner/ctas/cta_0/image.img.png
"
        alt=""
    
    
        intent="buy"
    
    
    
>
    
        PS4
    
</a>



    

<a
    is="ea-cta"
    
        type="image"
    
    
        href="https://www.origin.com/store/battlefield/battlefield-1/addon/battlefield-1-premium-pass?gra=VUEtMjgwNzIyOTEtMQ==&amp;_ga=1.139857783.572282051.1479813911"
    
    
    
        icon="none"
    
    
    
        fill-color="brand"
    
    
        text-color="light"
    
    
        target="_blank"
    
    
    
        image="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/section/columns/column/content/ctaliner/ctas/cta_1/image.img.png
"
        alt=""
    
    
        intent="buy"
    
    
    
>
    
        Origin
    
</a>




</bf-cta-liner>

    

    <style>
    .mind-the-gap-2v3f3l {
        height: 40px;
    }

    @media only screen and (min-width: 768px) {
        .mind-the-gap-2v3f3l {
            height: 48px;
        }
    }

    @media only screen and (min-width: 1024px) {
        .mind-the-gap-2v3f3l {
            height: 56px;
        }
    }

    @media only screen and (min-width: 1360px) {
        .mind-the-gap-2v3f3l {
            height: 64px;
        }
    }
    </style>

    <div class="mind-the-gap-2v3f3l"></div>



    

<a
    is="ea-cta"
    
        type="standard"
    
    
        href="https://www.battlefield.com/games/battlefield-1/premium"
    
    
    
        icon="none"
    
    
    
        fill-color="none"
    
    
        text-color="light"
    
    
    
    
    
        intent="navigation"
    
    
    
>
    
        Learn about Premium
    
</a>



    

    <style>
    .mind-the-gap-fd90yy {
        height: 24px;
    }

    @media only screen and (min-width: 768px) {
        .mind-the-gap-fd90yy {
            height: 32px;
        }
    }

    @media only screen and (min-width: 1024px) {
        .mind-the-gap-fd90yy {
            height: 40px;
        }
    }

    @media only screen and (min-width: 1360px) {
        .mind-the-gap-fd90yy {
            height: 40px;
        }
    }
    </style>

    <div class="mind-the-gap-fd90yy"></div>




</ea-section-column>



</ea-section>


    
<script type="text/javascript" src="//www.origin.com/store/odc/odcapi/odc.api.min.js"></script>
<div class="body-inner buy-page" data-plugin="buyPage">
    <div class="buy-page_listings">
        




    







<bf-product
    offer-id=""
    master-title="battlefield-1/pc-download/base-game/deluxe-edition"
    
        learn-more
        learn-more-label="See More"
        learn-more-fill-color="none"
        learn-more-text-color="light"
        learn-more-class="product__description--hidden"
    
    locale="en-us"
    host="https://www.origin.com"
    store-front-url="https://api1.origin.com/ecommerce2/ipToStoreFront"
    
        offer-data
    
    
        default-text="Visit the Microsoft®  Store for pricing"
    
    
        section-text="BUY AND PLAY NOW ON PS4 AND ORIGIN"
    
    
        default-title="On XBOX One"
    
    
        default-boxart="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/buy_0/buyProducts/product_1/retailers/retailer/boxArt.img.jpg
"
    
    >
        
    <div class="retailer_cta">

<a href="https://www.microsoft.com/store/p/battlefield-1-deluxe-edition/bt5gn1w0cbpw" class="retailer__cta"
    
        target="_blank"
    
    text-color=""
    type="standard"
    
>
    <div class="retailer__cta-content"
        style="
             background-color: #3EAB2C;
            
        "
    >
    <span> </span>
    
        <img src="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/buy_0/buyProducts/product_1/retailers/retailer/ctaImage.img.png
" />
    
    </div>
</a>

</div>

        <div class="products_ggg">
            <ul class="product__retailers-list">
                
                    <li class="retailer__link-item"
                        
                          data-text-title="On PlayStation® 4"
                        
                        
                          data-box-art="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/buy_0/buyProducts/product_1/retailers/retailer_0/boxArt.img.jpg
"
                        
                        
                          data-pricing-text="Visit the PlayStation® Store for pricing."
                        
                        >
                        
                            

<a href="http://smarturl.it/BFT-PS4-PO-DED" class="retailer__cta"
    
        target="_blank"
    
    text-color="light"
    type="standard"
    
>
    <div class="retailer__cta-content"
        style="
             background-color: transparent;
             border: 2px solid white;
        "
    >
    <span> </span>
    
        <img src="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/buy_0/buyProducts/product_1/retailers/retailer_0/ctaImage.img.png
" />
    
    </div>
</a>


                        
                    </li>
                
                    <li class="retailer__link-item"
                        
                          data-text-title="PC Download on Origin"
                        
                        
                          data-box-art="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/buy_0/buyProducts/product_1/retailers/retailer_1/boxArt.img.jpg
"
                        
                        
                        >
                        
                            

<a href="https://www.origin.com/store/battlefield/battlefield-1/deluxe-edition" class="retailer__cta"
    
        target="_blank"
    
    text-color="light"
    type="standard"
    
        data-ga-data="{&quot;sku&quot;: &quot;Origin.OFR.50.0000404&quot;}"
    
>
    <div class="retailer__cta-content"
        style="
             background-color: transparent;
             border: 2px solid white;
        "
    >
    <span> </span>
    
        <img src="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/buy_0/buyProducts/product_1/retailers/retailer_1/ctaImage.img.png
" />
    
    </div>
</a>


                        
                    </li>
                
            </ul>
            
        </div>
        
    
        <a is="ea-cta" fill-color="none" text-color="light" class="learn_more">See More</a>
    

</bf-product>


    







<bf-product
    offer-id=""
    master-title="battlefield-1/pc-download/base-game/standard-edition"
    
        learn-more
        learn-more-label="See More"
        learn-more-fill-color="none"
        learn-more-text-color="light"
        learn-more-class="product__description--hidden"
    
    locale="en-us"
    host="https://www.origin.com"
    store-front-url="https://api1.origin.com/ecommerce2/ipToStoreFront"
    
        offer-data
    
    
        default-text="Visit the Microsoft®  Store for pricing"
    
    
        section-text="BUY AND PLAY NOW ON PS4 AND ORIGIN"
    
    
        default-title="On XBOX One"
    
    
        default-boxart="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/buy_0/buyProducts/product/retailers/retailer/boxArt.img.jpg
"
    
    >
        
    <div class="retailer_cta">

<a href="https://store.xbox.com/Xbox-One/Bundle/Battlefield-1-Standard-Edition/284a4b52-d219-403c-bc59-23b3ade77dd2?emcid=EAFranchise2016" class="retailer__cta"
    
        target="_blank"
    
    text-color=""
    type="standard"
    
>
    <div class="retailer__cta-content"
        style="
             background-color: #3EAB2C;
            
        "
    >
    <span> </span>
    
        <img src="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/buy_0/buyProducts/product/retailers/retailer/ctaImage.img.png
" />
    
    </div>
</a>

</div>

        <div class="products_ggg">
            <ul class="product__retailers-list">
                
                    <li class="retailer__link-item"
                        
                          data-text-title="On PlayStation® 4"
                        
                        
                          data-box-art="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/buy_0/buyProducts/product/retailers/retailer_0/boxArt.img.jpg
"
                        
                        
                          data-pricing-text="Visit The PlayStation® Store For Pricing."
                        
                        >
                        
                            

<a href="http://smarturl.it/BFT-PS4-PO-STD" class="retailer__cta"
    
        target="_blank"
    
    text-color="light"
    type="standard"
    
>
    <div class="retailer__cta-content"
        style="
             background-color: transparent;
             border: 2px solid white;
        "
    >
    <span> </span>
    
        <img src="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/buy_0/buyProducts/product/retailers/retailer_0/ctaImage.img.png
" />
    
    </div>
</a>


                        
                    </li>
                
                    <li class="retailer__link-item"
                        
                          data-text-title="PC Download on Origin"
                        
                        
                          data-box-art="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/buy_0/buyProducts/product/retailers/retailer_1/boxArt.img.jpg
"
                        
                        
                        >
                        
                            

<a href="https://www.origin.com/store/battlefield/battlefield-1/standard-edition" class="retailer__cta"
    
        target="_blank"
    
    text-color="light"
    type="standard"
    
>
    <div class="retailer__cta-content"
        style="
             background-color: transparent;
             border: 2px solid white;
        "
    >
    <span> </span>
    
        <img src="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/buy_0/buyProducts/product/retailers/retailer_1/ctaImage.img.png
" />
    
    </div>
</a>


                        
                    </li>
                
            </ul>
            
        </div>
        
    
        <a is="ea-cta" fill-color="none" text-color="light" class="learn_more">See More</a>
    

</bf-product>


    







<bf-product
    offer-id=""
    master-title="battlefield-1/pc-download/base-game/ultimate-edition"
    
        learn-more
        learn-more-label="See More"
        learn-more-fill-color="none"
        learn-more-text-color="light"
        learn-more-class="product__description--hidden"
    
    locale="en-us"
    host="https://www.origin.com"
    store-front-url="https://api1.origin.com/ecommerce2/ipToStoreFront"
    
        offer-data
    
    
        default-text="Visit the Microsoft®  Store for pricing"
    
    
        section-text="BUY AND PLAY NOW ON PS4 AND ORIGIN"
    
    
        default-title="On XBOX One"
    
    
        default-boxart="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/buy_0/buyProducts/product_0/retailers/retailer/boxArt.img.jpg
"
    
    >
        
    <div class="retailer_cta">

<a href="https://www.microsoft.com/store/p/battlefield-1-ultimate-edition/br2h94xgwqfr" class="retailer__cta"
    
        target="_blank"
    
    text-color=""
    type="standard"
    
>
    <div class="retailer__cta-content"
        style="
             background-color: #3EAB2C;
            
        "
    >
    <span> </span>
    
        <img src="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/buy_0/buyProducts/product_0/retailers/retailer/ctaImage.img.png
" />
    
    </div>
</a>

</div>

        <div class="products_ggg">
            <ul class="product__retailers-list">
                
                    <li class="retailer__link-item"
                        
                          data-text-title="On PlayStation® 4"
                        
                        
                          data-box-art="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/buy_0/buyProducts/product_0/retailers/retailer_0/boxArt.img.jpg
"
                        
                        
                          data-pricing-text="Visit the PlayStation® Store for pricing."
                        
                        >
                        
                            

<a href="http://smarturl.it/BFT-PS4-PO-UED" class="retailer__cta"
    
        target="_blank"
    
    text-color="light"
    type="standard"
    
>
    <div class="retailer__cta-content"
        style="
             background-color: transparent;
             border: 2px solid white;
        "
    >
    <span> </span>
    
        <img src="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/buy_0/buyProducts/product_0/retailers/retailer_0/ctaImage.img.png
" />
    
    </div>
</a>


                        
                    </li>
                
                    <li class="retailer__link-item"
                        
                          data-text-title="PC Download on Origin"
                        
                        
                          data-box-art="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/buy_0/buyProducts/product_0/retailers/retailer_1/boxArt.img.jpg
"
                        
                        
                        >
                        
                            

<a href="https://www.origin.com/store/battlefield/battlefield-1/ultimate-edition" class="retailer__cta"
    
        target="_blank"
    
    text-color="light"
    type="standard"
    
        data-ga-data="{&quot;sku&quot;: &quot;Origin.OFR.50.0000404&quot;}"
    
>
    <div class="retailer__cta-content"
        style="
             background-color: transparent;
             border: 2px solid white;
        "
    >
    <span> </span>
    
        <img src="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/buy/battlefield-1/_jcr_content/par/buy_0/buyProducts/product_0/retailers/retailer_1/ctaImage.img.png
" />
    
    </div>
</a>


                        
                    </li>
                
            </ul>
            
        </div>
        
    
        <a is="ea-cta" fill-color="none" text-color="light" class="learn_more">See More</a>
    

</bf-product>



    </div>
</div>


            
                

<footer
    is="ea-local-footer"
    theme="light"
>
    <ea-local-links
        title-text="Battlefield"
        text-color="light"
    >
    
        
            <a
                is="ea-link"
                href="/games"
                title="Games"
            >Games</a>
        
            <a
                is="ea-link"
                href="/news"
                title="News"
            >News</a>
        
            <a
                is="ea-link"
                href="/community/insider"
                title="Insider"
            >Insider</a>
        
            <a
                is="ea-link"
                href="/buy/battlefield-1"
                title="Buy"
            >Buy</a>
        
    
    </ea-local-links>

    <ea-social-links
        text-color="light"
        title-text="Join The Conversation"
        social-icon-color="brand"
    >
    
        
            <a
                is="ea-social-link"
                href="https://www.facebook.com/battlefield"
                social-network="facebook"
                title="Facebook"
                
            ></a>
        
            <a
                is="ea-social-link"
                href="https://twitter.com/Battlefield"
                social-network="twitter"
                title="Twitter"
                
            ></a>
        
            <a
                is="ea-social-link"
                href="https://plus.google.com/+Battlefield"
                social-network="gplus"
                title="Google+"
                
            ></a>
        
            <a
                is="ea-social-link"
                href="https://www.youtube.com/Battlefield"
                social-network="youtube"
                title="YouTube"
                
            ></a>
        
            <a
                is="ea-social-link"
                href="https://www.instagram.com/battlefield/"
                social-network="instagram"
                title="Instagram"
                
            ></a>
        
            <a
                is="ea-social-link"
                href="https://www.twitch.tv/battlefield"
                social-network="twitch"
                title="Twitch"
                
            ></a>
        
    
    </ea-social-links>

    
        <ea-studio-links>
            




    

<a
    is="ea-studio-link"
    href="http://www.dice.se/"
    title="DICE"
    
        image-smallest="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/_global_/_jcr_content/ccm/componentwrapper_2/components/localfooter/studioLinks/studiolink/logo/xsmall.img.png
"
        image-small="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/_global_/_jcr_content/ccm/componentwrapper_2/components/localfooter/studioLinks/studiolink/logo/small.img.png
"
        image-medium="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/_global_/_jcr_content/ccm/componentwrapper_2/components/localfooter/studioLinks/studiolink/logo/medium.img.png
"
        image-large="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/_global_/_jcr_content/ccm/componentwrapper_2/components/localfooter/studioLinks/studiolink/logo/large.img.png
"
        image-largest="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/_global_/_jcr_content/ccm/componentwrapper_2/components/localfooter/studioLinks/studiolink/logo/xlarge.img.png
"
        image-alt=""
    
></a>

    

<a
    is="ea-studio-link"
    href="http://uprise.se/"
    title="UPRISE"
    
        image-smallest="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/_global_/_jcr_content/ccm/componentwrapper_2/components/localfooter/studioLinks/studiolink_0/logo/xsmall.img.png
"
        image-small="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/_global_/_jcr_content/ccm/componentwrapper_2/components/localfooter/studioLinks/studiolink_0/logo/small.img.png
"
        image-medium="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/_global_/_jcr_content/ccm/componentwrapper_2/components/localfooter/studioLinks/studiolink_0/logo/medium.img.png
"
        image-large="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/_global_/_jcr_content/ccm/componentwrapper_2/components/localfooter/studioLinks/studiolink_0/logo/large.img.png
"
        image-largest="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/_global_/_jcr_content/ccm/componentwrapper_2/components/localfooter/studioLinks/studiolink_0/logo/xlarge.img.png
"
        image-alt=""
    
></a>

    

<a
    is="ea-studio-link"
    href="http://www.frostbite.com/"
    title="Frostbite"
    
        image-smallest="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/_global_/_jcr_content/ccm/componentwrapper_2/components/localfooter/studioLinks/studiolink_1/logo/xsmall.img.png
"
        image-small="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/_global_/_jcr_content/ccm/componentwrapper_2/components/localfooter/studioLinks/studiolink_1/logo/small.img.png
"
        image-medium="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/_global_/_jcr_content/ccm/componentwrapper_2/components/localfooter/studioLinks/studiolink_1/logo/medium.img.png
"
        image-large="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/_global_/_jcr_content/ccm/componentwrapper_2/components/localfooter/studioLinks/studiolink_1/logo/large.img.png
"
        image-largest="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/_global_/_jcr_content/ccm/componentwrapper_2/components/localfooter/studioLinks/studiolink_1/logo/xlarge.img.png
"
        image-alt=""
    
></a>


        </ea-studio-links>
    
    
        <ea-rating-links>
            




    

<a
    is="ea-rating-link"
    href="http://www.esrb.org"
    title="ESRB"
    
        image-smallest="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/_global_/_jcr_content/ccm/componentwrapper_2/components/localfooter/ratingLinks/ratinglink/image/xsmall.img.jpg
"
        image-small="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/_global_/_jcr_content/ccm/componentwrapper_2/components/localfooter/ratingLinks/ratinglink/image/small.img.jpg
"
        image-medium="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/_global_/_jcr_content/ccm/componentwrapper_2/components/localfooter/ratingLinks/ratinglink/image/medium.img.jpg
"
        image-large="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/_global_/_jcr_content/ccm/componentwrapper_2/components/localfooter/ratingLinks/ratinglink/image/large.img.jpg
"
        image-largest="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/_global_/_jcr_content/ccm/componentwrapper_2/components/localfooter/ratingLinks/ratinglink/image/xlarge.img.jpg
"
        image-alt=""
    
></a>


        </ea-rating-links>
    
    
        <ea-legal-disclaimer-text>
            <p style="font-family: tahoma, arial, helvetica, sans-serif; font-size: 12px;">NO WEAPON, VEHICLE OR GEAR MANUFACTURER IS AFFILIATED WITH OR HAS SPONSORED OR ENDORSED THIS GAME.</p>

        </ea-legal-disclaimer-text>
    
</footer>
            
            
                

<footer
    is="ea-network-footer"
    theme="light"
    

    
        logo-image="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/_global_/_jcr_content/ccm/componentwrapper_4/components/networkfooter/logoImage.img.png
"
        logo-tooltip=""
    

    
        logo-link-url="https://www.ea.com"
        logo-link-text="EA"
        logo-link-tooltip="EA"
    
>
    
        <ea-network-links
            text-color="light"
        >
        
            <a
                is="ea-link"
                href="https://www.ea.com/games"
                title="Browse Games"
            >Browse Games</a>
        
            <a
                is="ea-link"
                href="https://www.ea.com/news"
                title="Latest News"
            >Latest News</a>
        
            <a
                is="ea-link"
                href="https://help.ea.com"
                title="Help Center"
            >Help Center</a>
        
            <a
                is="ea-link"
                href="https://www.ea.com/about"
                title="About Us"
            >About Us</a>
        
        </ea-network-links>
    

    



<ea-locale-selector
    theme="light"
    value="en-us"
    
    >
    
        <ea-locale-selector-option value="en-us">UNITED STATES</ea-locale-selector-option>
    
        <ea-locale-selector-option value="de-de">DEUTSCHLAND</ea-locale-selector-option>
    
        <ea-locale-selector-option value="en-gb">UNITED KINGDOM</ea-locale-selector-option>
    
        <ea-locale-selector-option value="en-au">AUSTRALIA</ea-locale-selector-option>
    
        <ea-locale-selector-option value="fr-fr">FRANCE</ea-locale-selector-option>
    
        <ea-locale-selector-option value="cs-cz">ČESKÁ REPUBLIKA</ea-locale-selector-option>
    
        <ea-locale-selector-option value="nl-nl">NEDERLAND</ea-locale-selector-option>
    
        <ea-locale-selector-option value="pl-pl">POLSKA</ea-locale-selector-option>
    
        <ea-locale-selector-option value="es-es">ESPAÑA</ea-locale-selector-option>
    
        <ea-locale-selector-option value="ru-ru">РОССИЯ</ea-locale-selector-option>
    
        <ea-locale-selector-option value="ja-jp">日本</ea-locale-selector-option>
    
        <ea-locale-selector-option value="ko-kr">대한민국</ea-locale-selector-option>
    
        <ea-locale-selector-option value="pt-br">BRASIL</ea-locale-selector-option>
    
        <ea-locale-selector-option value="es-mx">MÉXICO</ea-locale-selector-option>
    
        <ea-locale-selector-option value="it-it">ITALIA</ea-locale-selector-option>
    
        <ea-locale-selector-option value="zh-tw">台灣</ea-locale-selector-option>
    
        <ea-locale-selector-option value="tr-tr">TÜRKÇE</ea-locale-selector-option>
    
        <ea-locale-selector-option value="ar-sa">الشرق الأوسط</ea-locale-selector-option>
    
</ea-locale-selector>

    <ea-network-legal
        copyright-text="© 2016 Electronic Arts, Inc."
        text-color="light"
    >
    
        
            <a
                is="ea-link"
                href="https://www.ea.com/legal"
                title="Legal"
            >Legal</a>
        
            <a
                is="ea-link"
                href="https://www.ea.com/1/service-updates"
                title="Online Service Updates"
            >Online Service Updates</a>
        
            <a
                is="ea-link"
                href="https://tos.ea.com/legalapp/WEBTERMS/US/en/PC/"
                title="User Agreement - NEW"
            >User Agreement - NEW</a>
        
            <a
                is="ea-link"
                href="http://tos.ea.com/legalapp/WEBPRIVACY/US/en/PC/"
                title="NEW Privacy &amp; Cookie Policy - NEW"
            >Privacy &amp; Cookie Policy - NEW</a>
        
    
    </ea-network-legal>

    



<ea-truste
    message="Cookies help us deliver our services and provide personalized experiences. By using this website, you agree to our use of cookies. You can change your preferences at any time."
    preferences-text="Cookie Preferences"
    domain="ea.com"
    
        logo-image="

//media-www-battlefieldwebcore.spark.ea.com/content/battlefield-portal/en_US/_global_/_jcr_content/ccm/componentwrapper_4/components/networkfooter/truste/logo.img.png
"
        logo-tooltip=""
    
    
        link-url="https://privacy.truste.com/privacy-seal/validation?rid=7d587a12-773f-4bf9-a209-d18047ee5f05"
        link-text="TRUSTe"
        link-tooltip="TRUSTe"
    
></ea-truste>

</footer>

            
        </div>
        
            
<bf-agegate
    birthdate-label="Enter your birthdate."
    birthdate-error-msg="Invalid Birthdate. Please enter a valid date."
    year-placeholder="yyyy"
    month-placeholder="mm"
    day-placeholder="dd"
    localstorage-key="EA_Agegate"
    
        min-age="18"
    
    submit-label="SUBMIT"
    signin-message="Want to join the battle? We need some info first."
    signin-link-url=" "
    signin-link-label=""
    country-error-msg="Invalid Country. Please Select A Valid Option."
    age-error-msg="You are not eligible to view this content. "
>
    
        <div class="bf-agegate__country-container">
            <label class="h4 bf-agegate__label">Select Country</label>
            <select id="bf-agegate__country" class="b3 bf-agegate__select">
                <option value selected disabled>Please Select</option>
                




    
<option value="us" data-age="17">UNITED STATES</option>

    
<option value="de" data-age="18">DEUTSCHLAND</option>

    
<option value="gb" data-age="18">UNITED KINGDOM</option>

    
<option value="au" data-age="18">AUSTRALIA</option>

    
<option value="fr" data-age="18">FRANCE</option>

    
<option value="cz" data-age="18">ČESKÁ REPUBLIKA</option>

    
<option value="nl" data-age="18">NEDERLAND</option>

    
<option value="pl" data-age="18">POLSKA</option>

    
<option value="es" data-age="18">ESPAÑA</option>

    
<option value="ru" data-age="18">РОССИЯ</option>

    
<option value="jp" data-age="18">日本</option>

    
<option value="kr" data-age="18">대한민국</option>

    
<option value="br" data-age="18">BRASIL</option>

    
<option value="mx" data-age="18">MÉXICO</option>

    
<option value="it" data-age="18">ITALIA</option>

    
<option value="tw" data-age="18">台灣</option>

    
<option value="tr" data-age="18">TÜRKÇE</option>


                <option value="Another Country" data-age="18">Another Country</option>
            </select>
        </div>
    
    
    <div class="cta-parent">
        <a is="ea-cta"
        type="standard"
        text-color="light"
        fill-color="dark">SUBMIT</a>
    </div>
</bf-agegate>

<ea-modal
    modal
    
        id="battlefieldagegate"
    
    
        theme="dark"
    
>
    




    
<ea-age-gate
    id="battlefieldagegate"
    
        age="18"
    
    
        error="You Are Not Eligible To Participate"
    
    
        message="Want To Join The Battle? We Need Some Info First."
    
>
    
        


<ea-date-field
  
    type="date"
  
  
    name="Enter Your Birthdate"
  
  
  
  
    text-color="light"
  
  
    month-placeholder="MM"
  
  
    day-placeholder="DD"
  
  
    year-placeholder="YYYY"
  
  
    label-text="Enter Your Birthdate"
  
  
>
</ea-date-field>
    
    
        


<ea-submit
  
    value-text="Submit"
  
  
    text-color="light"
  
  
  
>

</ea-submit>
    
</ea-age-gate>


</ea-modal>


        
        <script async src="/assets/vendor/es6-promise/es6-promise.min.js"></script>
        <script async src="/assets/vendor/fetch/fetch.js"></script>
        <script src="/assets/vendor/underscore/underscore-min.js"></script>
        <script src="/assets/vendor/rd.parallax/dist/scripts/rd.parallax.js"></script>
        <script src="/assets/vendor/hoverintent/dist/hoverintent.min.js"></script>
        <script async src="/assets/dist/bf.min.js"></script>
    </body>
</html>

","rawHeaders":["Cache-Control","max-age=606","Content-Encoding","gzip","Content-Type","text/html; charset=utf-8","Expires","Mon, 19 Dec 2016 02:02:27 UTC","Last-Modified","Mon, 19 Dec 2016 01:42:15 UTC","Server","nginx","Content-Length","9843","Vary","Accept-Encoding","X-Frame-Options","SAMEORIGIN","X-Frame-Options","SAMEORIGIN","Date","Mon, 19 Dec 2016 01:55:22 GMT","Connection","close","Set-Cookie","ealocale=en-us; expires=Mon, 31-Dec-2038 23:59:59 GMT; path=/; domain=.battlefield.com","X-Frame-Options","SAMEORIGIN"],"url":"https://www.battlefield.com/buy/battlefield-1","status":200,"statusText":"OK","varyHeaders":[["Accept-Encoding",null]]},"ttl":null,"stored":1482112523035}