{"item":{"body":"<!DOCTYPE html>
<html lang="en" xmlns:fb="http://www.facebook.com/2008/fbml" xmlns:og="http://opengraphprotocol.org/schema/" >
	<head prefix="og: http://ogp.me/ns# flixstertomatoes: http://ogp.me/ns/apps/flixstertomatoes#">
    <script src="//cdn.optimizely.com/js/594670329.js"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1">

    <meta name="google-site-verification" content="VPPXtECgUUeuATBacnqnCm4ydGO99reF-xgNklSbNbc" />

    <meta name="msvalidate.01" content="034F16304017CA7DCF45D43850915323" />

    <link href="https://staticv2-4.rottentomatoes.com/static/images/iphone/apple-touch-icon.png" rel="apple-touch-icon" />
    <link href="https://staticv2-4.rottentomatoes.com/static/images/icons/favicon.ico" rel="shortcut icon" type="image/x-icon" />
    <link href="https://staticv2-4.rottentomatoes.com/static/styles/css/rt_main.css" rel="stylesheet" />

    <script type="application/ld+json" id="jsonLdSchema">{"@context":"http://schema.org","@type":"Movie","name":"Inception","description":null,"productionCompany":{"@type":"Organization","name":"Warner Bros. Pictures"},"contentRating":"PG13","dateModified":"2016-12-18T04:19:30-08:00","dateCreated":"2009-03-08T12:48:40-07:00","sameAs":null,"url":null,"datePublished":2010,"aggregateRating":{"@type":"AggregateRating","ratingValue":86,"bestRating":"100","worstRating":"0","reviewCount":331,"name":"Tomatometer","description":"The Tomatometer rating – based on the published opinions of hundreds of film and television critics – is a trusted measurement of movie and TV programming quality for millions of moviegoers. It represents the percentage of professional critic reviews that are positive for a given film or television show."},"image":"https://resizing.flixster.com/SpabWFGVKOQeLfXi_1rlDEHv5DE=/5339x3559/v1.bjs4MjU3NTE7ajsxNzE5OTsxMjAwOzUzMzk7MzU1OQ","actors":[{"@type":"Person","sameAs":"/celebrity/leonardo_di_caprio","name":"Leonardo DiCaprio","image":"https://resizing.flixster.com/BBtUQbQO8HswFNzyyvP0YHxxRLA=/454x652/v1.cjsxOTQyNTtqOzE3MTkwOzEyMDA7NDU0OzY1Mg"},{"@type":"Person","sameAs":"/celebrity/joseph_gordonlevitt","name":"Joseph Gordon-Levitt","image":"https://resizing.flixster.com/SMqN0OXBm55GexnQSwkNGO_sQ6A=/851x1280/v1.bjs3OTIyNzk7ajsxNzE5OTsxMjAwOzg1MTsxMjgw"},{"@type":"Person","sameAs":"/celebrity/ellen_page","name":"Ellen Page","image":"https://resizing.flixster.com/XvEuCqci7RtUpAobwvvK257ocH0=/275x230/v1.cjs0MDg5NztqOzE3MTkwOzEyMDA7Mjc1OzIzMA"},{"@type":"Person","sameAs":"/celebrity/tom_hardy","name":"Tom Hardy","image":"https://resizing.flixster.com/9VYu6uacarwTFxeVvAyaLqxmotI=/220x196/v1.cjs0NTQ5NDtqOzE3MTkwOzEyMDA7MjIwOzE5Ng"},{"@type":"Person","sameAs":"/celebrity/ken_watanabe","name":"Ken Watanabe","image":"https://resizing.flixster.com/-Fb2D1a68a3K_LGgxWZnL-9bjw8=/275x230/v1.cjs0MDQ4NztqOzE3MTkwOzEyMDA7Mjc1OzIzMA"},{"@type":"Person","sameAs":"/celebrity/dileep-rao","name":"Dileep Rao","image":"https://resizing.flixster.com/Czx2hY28cv0fR6MzPoJAKK_aubE=/2160x1620/v1.bjs4NjQwODtqOzE3MTkxOzEyMDA7MjE2MDsxNjIw"},{"@type":"Person","sameAs":"/celebrity/cillian_murphy","name":"Cillian Murphy","image":"https://resizing.flixster.com/2dNQgroSR8asXmDf3hzBAv3bGbo=/273x389/v1.cDsxMTE4NDkwODtqOzE3Mjc0OzEyMDA7MjczOzM4OQ"},{"@type":"Person","sameAs":"/celebrity/tom_berenger","name":"Tom Berenger","image":"https://resizing.flixster.com/ryyPyh-MZbxOwq9yftikg5NqUrA=/435x652/v1.cjsxNzU1NztqOzE3MTkwOzEyMDA7NDM1OzY1Mg"},{"@type":"Person","sameAs":"/celebrity/marion_cotillard","name":"Marion Cotillard","image":"https://resizing.flixster.com/YRFA5Er-_RJN5Pb1yE3I1UycsD0=/275x230/v1.cjs0MDY4NztqOzE3MTkwOzEyMDA7Mjc1OzIzMA"},{"@type":"Person","sameAs":"/celebrity/pete_postlethwaite","name":"Pete Postlethwaite","image":"https://resizing.flixster.com/UKkF7QD-Ut29_McDYeA--PvcCCE=/1280x1920/v1.bjs3OTkzMjk7ajsxNzE5OTsxMjAwOzEyODA7MTkyMA"},{"@type":"Person","sameAs":"/celebrity/michael_caine","name":"Michael Caine","image":"https://resizing.flixster.com/4eaI_KfugSV5J44enm56yfsio_U=/480x720/v1.bjs3OTk2NzQ7ajsxNzE5OTsxMjAwOzQ4MDs3MjA"},{"@type":"Person","sameAs":"/celebrity/lukas_haas","name":"Lukas Haas","image":"https://resizing.flixster.com/4mahO21O_bTP4A76_T5PPPmMmrE=/1890x1890/v1.cjs0ODIyNztqOzE3MTkwOzEyMDA7MTg5MDsxODkw"},{"@type":"Person","sameAs":"/celebrity/tai_li_lee","name":"Tai-Li Lee"},{"@type":"Person","sameAs":"/celebrity/claire_geare","name":"Claire Geare","image":"https://resizing.flixster.com/4f3FQgRt090iltEjtLKCCvMipy0=/2048x1152/v1.bjs5NTY0ODQ7ajsxNzIwMTsxMjAwOzIwNDg7MTE1Mg"},{"@type":"Person","sameAs":"/celebrity/magnus_nolan","name":"Magnus Nolan"},{"@type":"Person","sameAs":"/celebrity/taylor-geare","name":"Taylor Geare"},{"@type":"Person","sameAs":"/celebrity/johnathan_geare","name":"Johnathan Geare"},{"@type":"Person","sameAs":"/celebrity/jonathan_geare","name":"Jonathan Geare"},{"@type":"Person","sameAs":"/celebrity/tohoru_masamune","name":"Tohoru Masamune","image":"https://resizing.flixster.com/2tio4qqY6E1JrSefD5jCSylO92w=/376x564/v1.bjs3Nzc0MjE7ajsxNzE5ODsxMjAwOzM3Njs1NjQ"},{"@type":"Person","sameAs":"/celebrity/yuji_okumoto","name":"Yuji Okumoto","image":"https://resizing.flixster.com/z3rRIsDUOmfnued01d_eLXFDqpA=/540x720/v1.bjs3OTgzOTM7ajsxNzE5OTsxMjAwOzU0MDs3MjA"},{"@type":"Person","sameAs":"/celebrity/earl_cameron","name":"Earl Cameron","image":"https://resizing.flixster.com/g9wzEaP9fhSusxfa3S2HSOFpi58=/300x450/v1.bjs3OTI3NjU7ajsxNzE5OTsxMjAwOzMwMDs0NTA"},{"@type":"Person","sameAs":"/celebrity/ryan_hayward","name":"Ryan Hayward"},{"@type":"Person","sameAs":"/celebrity/miranda_nolan","name":"Miranda Nolan"},{"@type":"Person","sameAs":"/celebrity/russ_fega","name":"Russ Fega"},{"@type":"Person","sameAs":"/celebrity/tim-kelleher","name":"Tim Kelleher","image":"https://resizing.flixster.com/_j5K_Hs7dSyg_mSuASJYDJbqt1U=/831x1108/v1.bjs1MTIxMzE7ajsxNzE5NTsxMjAwOzgzMTsxMTA4"},{"@type":"Person","sameAs":"/celebrity/talulah_riley","name":"Talulah Riley","image":"https://resizing.flixster.com/fADzSDY9fr9OQhFDsT0sHTla-RY=/300x450/v1.bjs3NTQ2NTM7ajsxNzE5ODsxMjAwOzMwMDs0NTA"},{"@type":"Person","sameAs":"/celebrity/nicolas_clerc","name":"Nicolas Clerc"},{"@type":"Person","sameAs":"/celebrity/coralie_dedykere","name":"Coralie Dedykere"},{"@type":"Person","sameAs":"/celebrity/silvie_laguna","name":"Silvie Laguna","image":"https://resizing.flixster.com/ZQnCKf_pQHV61XLbQeW6dyEKKS8=/300x450/v1.bjs3ODQwOTg7ajsxNzE5OTsxMjAwOzMwMDs0NTA"},{"@type":"Person","sameAs":"/celebrity/virgile_bramly","name":"Virgile Bramly","image":"https://resizing.flixster.com/3wHovZRfd4zf1gj9SCDih-GQ_6U=/375x500/v1.bjs3NTI4OTk7ajsxNzE5ODsxMjAwOzM3NTs1MDA"},{"@type":"Person","sameAs":"/celebrity/jeanmichel_dagory","name":"Jean-Michel Dagory"},{"@type":"Person","sameAs":"/celebrity/helena_cullinan","name":"Helena Cullinan"},{"@type":"Person","sameAs":"/celebrity/mark_fleischmann","name":"Mark Fleischmann"},{"@type":"Person","sameAs":"/celebrity/shelley_lang","name":"Shelley Lang"},{"@type":"Person","sameAs":"/celebrity/adam_cole","name":"Adam Cole"},{"@type":"Person","sameAs":"/celebrity/1036105-jack_murray","name":"Jack Murray","image":"https://resizing.flixster.com/AkvPUFlC-p5DtjOaq1ZFdeAYfjQ=/270x241/v1.cjs0NTUwNTtqOzE3MTkwOzEyMDA7MjcwOzI0MQ"},{"@type":"Person","sameAs":"/celebrity/kraig_thornber","name":"Kraig Thornber"},{"@type":"Person","sameAs":"/celebrity/angela_nathenson","name":"Angela Nathenson"},{"@type":"Person","sameAs":"/celebrity/natasha_beaumont","name":"Natasha Beaumont"},{"@type":"Person","sameAs":"/celebrity/mark_raducci","name":"Mark Raducci"},{"@type":"Person","sameAs":"/celebrity/marc_raducci","name":"Marc Raducci"},{"@type":"Person","sameAs":"/celebrity/carl_gilliard","name":"Carl Gilliard"},{"@type":"Person","sameAs":"/celebrity/jill_maddrell","name":"Jill Maddrell"},{"@type":"Person","sameAs":"/celebrity/alex_lombard","name":"Alex Lombard"},{"@type":"Person","sameAs":"/celebrity/nicole_pulliam","name":"Nicole Pulliam","image":"https://resizing.flixster.com/CHMWJD24Z_jL1ANZnwS9FQnPsmQ=/540x720/v1.bjs3NjEzNTE7ajsxNzE5ODsxMjAwOzU0MDs3MjA"},{"@type":"Person","sameAs":"/celebrity/peter_basham","name":"Peter Basham"},{"@type":"Person","sameAs":"/celebrity/michael_gaston","name":"Michael Gaston","image":"https://resizing.flixster.com/7boiOYy6Qp2nQ3Rtov2P8SdeqgQ=/220x196/v1.cjs0MzM5MjtqOzE3MTkwOzEyMDA7MjIwOzE5Ng"},{"@type":"Person","sameAs":"/celebrity/felix_scott","name":"Felix Scott","image":"https://resizing.flixster.com/ddFIWHWyCGhkFh_4Clj0lZWQgyw=/480x428/v1.cjs0NTE0OTtqOzE3MTkwOzEyMDA7NDgwOzQyOA"},{"@type":"Person","sameAs":"/celebrity/1177522-andrew_pleavin","name":"Andrew Pleavin","image":"https://resizing.flixster.com/RLCjMJLZMInsq7ejV35B7EgoKYo=/682x1023/v1.bjs1MjE0ODM7ajsxNzE5NjsxMjAwOzY4MjsxMDIz"},{"@type":"Person","sameAs":"/celebrity/lisa_reynolds","name":"Lisa Reynolds"},{"@type":"Person","sameAs":"/celebrity/jason_tendell","name":"Jason Tendell"},{"@type":"Person","sameAs":"/celebrity/jack_gilroy","name":"Jack Gilroy"},{"@type":"Person","sameAs":"/celebrity/shannon-welles","name":"Shannon Welles"}],"character":["Cobb","Arthur","Ariadne","Eames","Saito","Yusuf","Robert Fischer Jr.","Browning","Mal","Maurice Fischer","Miles","Nash","Tadashi","Phillipa (3 years)","James (20 months)","Phillipa (5 years)","James (3 years)","James (3 years)","Japanese Security Guard","Saito's Attendant","Elderly Bald Man","Lawyer","Flight Attendant","Cab Driver","Thin Man","Blonde","Bridge Sub Con","Bridge Sub Con","Bridge Sub Con","Bridge Sub Con","Bridge Sub Con","Penrose Sub Con","Penrose Sub Con","Penrose Sub Con","Bar Sub Con","Bar Sub Con","Bar Sub Con","Bar Sub Con","Bar Sub Con","Lobby Sub Con","Lobby Sub Con","Lobby Sub Con","Lobby Sub Con","Lobby Sub Con","Lobby Sub Con","Fischer's Jet Captain","Immigration Officer","Businessman","Businessman","Private Nurse","Fischer's Driver","Old Cobb","Old Mal"],"director":[{"@type":"Person","sameAs":"/celebrity/christopher_nolan","name":"Christopher Nolan","image":"https://resizing.flixster.com/OUVnvz_cfZ2b5yBTpT7NShjjasQ=/275x230/v1.cjs0MDgwNztqOzE3MTkwOzEyMDA7Mjc1OzIzMA"}],"author":[{"@type":"Person","sameAs":"/celebrity/christopher_nolan","name":"Christopher Nolan","image":"https://resizing.flixster.com/OUVnvz_cfZ2b5yBTpT7NShjjasQ=/275x230/v1.cjs0MDgwNztqOzE3MTkwOzEyMDA7Mjc1OzIzMA"}],"genre":["Action & Adventure","Drama","Mystery & Suspense","Science Fiction & Fantasy"],"review":[{"@type":"Review","reviewBody":"A spectacular fantasy thriller based on Nolan's own original screenplay, Inception is the smartest CGI head-trip since The Matrix.","url":"http://www.cnn.com/2010/SHOWBIZ/Movies/07/15/inception.review/","dateCreated":"2015-07-20T11:12:59-07:00","author":{"@type":"Person","url":"/critic/tom-charity","name":"Tom Charity"},"reviewRating":{"@type":"Rating","bestRating":"1","worstRating":"-1","ratingValue":1},"publisher":{"@type":"Organization","name":"CNN.com","url":"/source-93"}},{"@type":"Review","reviewBody":"It's just grade-A filmmaking.","url":null,"dateCreated":"2015-07-20T11:11:13-07:00","author":{"@type":"Person","url":"/critic/stephen-whitty","name":"Stephen Whitty"},"reviewRating":{"@type":"Rating","bestRating":"1","worstRating":"-1","ratingValue":1},"publisher":{"@type":"Organization","name":"Newark Star-Ledger","url":"/source-1374"}},{"@type":"Review","reviewBody":"A heist film of thrilling, almost delirious complexity.","url":"http://www.newsday.com/entertainment/movies/inception-close-to-a-sci-fi-masterpiece-1.2105296","dateCreated":"2015-07-20T08:18:24-07:00","author":{"@type":"Person","url":"/critic/rafer-guzman","name":"Rafer Guzman"},"reviewRating":{"@type":"Rating","bestRating":"1","worstRating":"-1","ratingValue":1},"publisher":{"@type":"Organization","name":"Newsday","url":"/source-338"}},{"@type":"Review","reviewBody":"Even as you tick off the film's overload of references, though -- a Matrix here, a James Bond there -- the amazing effects and Cobb's quest carry you along.","url":"http://www.newsweek.com/inception-christopher-nolans-dreamy-new-movie-74219","dateCreated":"2015-07-20T08:16:08-07:00","author":{"@type":"Person","url":"/critic/caryn-james","name":"Caryn James"},"reviewRating":{"@type":"Rating","bestRating":"1","worstRating":"-1","ratingValue":1},"publisher":{"@type":"Organization","name":"Newsweek","url":"/source-339"}},{"@type":"Review","reviewBody":"An astonishment, an engineering feat, and, finally, a folly.","url":"http://www.newyorker.com/arts/critics/cinema/2010/07/26/100726crci_cinema_denby","dateCreated":"2010-07-19T00:04:59-07:00","author":{"@type":"Person","url":"/critic/david-denby","name":"David Denby"},"reviewRating":{"@type":"Rating","bestRating":"1","worstRating":"-1","ratingValue":-1},"publisher":{"@type":"Organization","name":"New Yorker","url":"/source-924"}},{"@type":"Review","reviewBody":"It's only the latest indication that Christopher Nolan might be the slyest narrative tactician making movies today.","url":"http://www.chron.com/disp/story.mpl/ent/movies/mobile/7108633.html","dateCreated":"2010-07-16T03:25:40-07:00","author":{"@type":"Person","url":"/critic/amy-biancolli","name":"Amy Biancolli"},"reviewRating":{"@type":"Rating","bestRating":"1","worstRating":"-1","ratingValue":1},"publisher":{"@type":"Organization","name":"Houston Chronicle","url":"/source-219"}},{"@type":"Review","reviewBody":"This is a brainy, brawny popcorn pleaser at its best. And one not easily forgotten.","url":"http://www.toledoblade.com/Movies/2010/07/16/Dream-of-a-movie-8216-Inception-best-summer-film-in-years.html","dateCreated":"2016-06-27T09:10:13-07:00","author":{"@type":"Person","url":"/critic/kirk-baird","name":"Kirk Baird"},"reviewRating":{"@type":"Rating","bestRating":"1","worstRating":"-1","ratingValue":1},"publisher":{"@type":"Organization","name":"Toledo Blade","url":"/source-2478"}},{"@type":"Review","reviewBody":"The main tension of the story is a constant vuvuzela-like interruption in the suspension of disbelief.","url":"http://www.straight.com/article-334302/vancouver/inception","dateCreated":"2016-06-27T08:50:32-07:00","author":{"@type":"Person","url":"/critic/ron-yamauchi","name":"Ron Yamauchi"},"reviewRating":{"@type":"Rating","bestRating":"1","worstRating":"-1","ratingValue":-1},"publisher":{"@type":"Organization","name":"Georgia Straight","url":"/source-1524"}},{"@type":"Review","reviewBody":"If nothing else, this big brain-teaser of a movie is a great conversation piece.","url":"http://www.fwweekly.com/2010/07/14/inception-puts-you-in-a-sleeper-hold/","dateCreated":"2016-06-22T04:52:36-07:00","author":{"@type":"Person","url":"/critic/kristian-m-lin","name":"Kristian M. Lin"},"reviewRating":{"@type":"Rating","bestRating":"1","worstRating":"-1","ratingValue":1},"publisher":{"@type":"Organization","name":"Fort Worth Weekly","url":"/source-2430"}},{"@type":"Review","reviewBody":"Invention runs lower once we're on those snowy slopes, and the hard narrative punch keeps disintegrating into a floating cloud of pixels. But what a display they make.","url":"http://www.theguardian.com/film/2010/jul/15/inception-review","dateCreated":"2015-07-20T11:09:59-07:00","author":{"@type":"Person","url":"/critic/peter-bradshaw","name":"Peter Bradshaw"},"reviewRating":{"@type":"Rating","bestRating":"1","worstRating":"-1","ratingValue":1},"publisher":{"@type":"Organization","name":"Guardian","url":"/source-205"}},{"@type":"Review","reviewBody":"The film's imaginative freefall is ruinously anchored to a bogus sense of deep feeling.","url":"http://www.independent.co.uk/arts-entertainment/films/reviews/inception-christopher-nolan-148-mins-12a-2029050.html","dateCreated":"2015-07-20T11:08:43-07:00","author":{"@type":"Person","url":"/critic/jonathan-romney","name":"Jonathan Romney"},"reviewRating":{"@type":"Rating","bestRating":"1","worstRating":"-1","ratingValue":-1},"publisher":{"@type":"Organization","name":"Independent on Sunday","url":"/source-1767"}},{"@type":"Review","reviewBody":"Nolan is so eager to make the movie work as an action blockbuster that he sacrifices storytelling to set pieces. Still, what set pieces.","url":"http://www.sevendaysvt.com/vermont/inception/Content?oid=2140878","dateCreated":"2015-07-20T11:05:48-07:00","author":{"@type":"Person","url":"/critic/margot-harrison","name":"Margot Harrison"},"reviewRating":{"@type":"Rating","bestRating":"1","worstRating":"-1","ratingValue":1},"publisher":{"@type":"Organization","name":"Seven Days","url":"/source-2240"}},{"@type":"Review","reviewBody":"Like Memento, the most intellectually demanding of Nolan's previous films, Inception demands and rewards our total attention as well as our emotional engagement.","url":"http://www.theguardian.com/film/2010/jul/18/inception-film-review-philip-french","dateCreated":"2015-07-20T11:04:52-07:00","author":{"@type":"Person","url":"/critic/philip-french","name":"Philip French"},"reviewRating":{"@type":"Rating","bestRating":"1","worstRating":"-1","ratingValue":1},"publisher":{"@type":"Organization","name":"Observer (UK)","url":"/source-1768"}},{"@type":"Review","reviewBody":"It's a brain-bender, all right. One of the more audacious narrative experiments since his own Memento, writer-director Nolan's seventh feature is every bit as intelligent as it is gripping.","url":"http://www.hindustantimes.com/movie-reviews/review-inception/article1-573813.aspx","dateCreated":"2015-07-20T11:03:59-07:00","author":{"@type":"Person","url":"/critic/rashid-irani","name":"Rashid Irani"},"reviewRating":{"@type":"Rating","bestRating":"1","worstRating":"-1","ratingValue":1},"publisher":{"@type":"Organization","name":"Hindustan Times","url":"/source-1146"}},{"@type":"Review","reviewBody":"Inception is as lucid and heartfelt as summer blockbusters get these days.","url":"http://www.theartsdesk.com/film/inception","dateCreated":"2015-07-20T11:02:03-07:00","author":{"@type":"Person","url":"/critic/nick-hasted","name":"Nick Hasted"},"reviewRating":{"@type":"Rating","bestRating":"1","worstRating":"-1","ratingValue":1},"publisher":{"@type":"Organization","name":"The Arts Desk","url":"/source-2602"}},{"@type":"Review","reviewBody":"Nolan does here for the heist film what he did for the comic book movie in his 2008 hit The Dark Knight. He layers a fantasy premise with provocative ideas and serious intent.","url":"http://www.winnipegfreepress.com/arts-and-life/entertainment/movies/youre-not-dreaming-98586264.html","dateCreated":"2015-07-20T11:00:54-07:00","author":{"@type":"Person","url":"/critic/randall-king","name":"Randall King"},"reviewRating":{"@type":"Rating","bestRating":"1","worstRating":"-1","ratingValue":1},"publisher":{"@type":"Organization","name":"Winnipeg Free Press","url":"/source-2405"}},{"@type":"Review","reviewBody":"What's exciting about the movie has nothing to do with content, or a coherent style; it has to do with watching a master crafts person conjure tricks with the best the modern movie tool box has to offer.","url":"http://www.sbs.com.au/movies/movie/inception","dateCreated":"2015-07-20T11:00:01-07:00","author":{"@type":"Person","url":"/critic/peter-galvin","name":"Peter Galvin"},"reviewRating":{"@type":"Rating","bestRating":"1","worstRating":"-1","ratingValue":1},"publisher":{"@type":"Organization","name":"sbs.com.au","url":"/source-2292"}},{"@type":"Review","reviewBody":"We can only marvel at what writer-director Nolan has thought up and executed so well. But he doesn't know when to stop. Every level leads to another level.","url":"http://blogs.indiewire.com/leonardmaltin/film_review_inception","dateCreated":"2015-07-20T10:59:02-07:00","author":{"@type":"Person","url":"/critic/leonard-maltin","name":"Leonard Maltin"},"reviewRating":{"@type":"Rating","bestRating":"1","worstRating":"-1","ratingValue":-1},"publisher":{"@type":"Organization","name":"leonardmaltin.com","url":"/source-1221"}},{"@type":"Review","reviewBody":"This is finally a big-budget film where the money feels well spent.","url":"http://www.trespassmag.com/review-inception/","dateCreated":"2015-07-20T10:57:49-07:00","author":{"@type":"Person","url":"/critic/beth-wilson","name":"Beth Wilson"},"reviewRating":{"@type":"Rating","bestRating":"1","worstRating":"-1","ratingValue":1},"publisher":{"@type":"Organization","name":"Trespass","url":"/source-2346"}},{"@type":"Review","reviewBody":"Nolan makes his far-fetched (and even occasionally ridiculous) dialogue and plotting utterly, absolutely believable within the film's finely structured framework, while never losing his grip on the dense, multi-layered narrative.","url":null,"dateCreated":"2015-07-20T10:56:28-07:00","author":{"@type":"Person","url":"/critic/erin-free","name":"Erin Free"},"reviewRating":{"@type":"Rating","bestRating":"1","worstRating":"-1","ratingValue":1},"publisher":{"@type":"Organization","name":"FILMINK (Australia)","url":"/source-1014"}},{"@type":"Review","reviewBody":"Inception is dark, thrilling and bold, and most importantly, it will reach well beyond your highest expectations and wildest dreams.","url":"http://thevine.com.au/entertainment/movies/inception-movie-review-20100720-243322","dateCreated":"2015-07-20T10:55:07-07:00","author":{"@type":"Person","url":"/critic/annie-fox","name":"Annie Fox"},"reviewRating":{"@type":"Rating","bestRating":"1","worstRating":"-1","ratingValue":1},"publisher":{"@type":"Organization","name":"The Vine","url":"/source-2329"}},{"@type":"Review","reviewBody":"The central concept affords the director some splendid opportunities for visual chutzpah.","url":"http://blogs.crikey.com.au/cinetology/2010/07/24/inception-movie-review-dreamy-and-brainy-blockbuster-tainment/?wpmp_switcher=mobile","dateCreated":"2015-07-20T10:52:33-07:00","author":{"@type":"Person","url":"/critic/luke-buckmaster","name":"Luke Buckmaster"},"reviewRating":{"@type":"Rating","bestRating":"1","worstRating":"-1","ratingValue":1},"publisher":{"@type":"Organization","name":"Crikey","url":"/source-2435"}},{"@type":"Review","reviewBody":"Inception is the kind of information-packed movie that creates the painful/pleasurable sensation that there's no time to think.","url":"http://www.standard.co.uk/goingout/film/lost-in-a-dream-world-in-inception-7420761.html","dateCreated":"2015-07-20T10:50:46-07:00","author":{"@type":"Person","url":"/critic/charlotte-osullivan","name":"Charlotte O'Sullivan"},"reviewRating":{"@type":"Rating","bestRating":"1","worstRating":"-1","ratingValue":1},"publisher":{"@type":"Organization","name":"London Evening Standard","url":"/source-446"}},{"@type":"Review","reviewBody":"Inception nails you to your seat for two of the best hours of cinema you'll see this, or any, year and there's never a dull moment.","url":"http://www.dailyrecord.co.uk/lifestyle/local-lifestyle/movie-review-inception-2829945","dateCreated":"2015-07-20T10:49:24-07:00","author":{"@type":"Person","url":"/critic/ian-bunting","name":"Ian Bunting"},"reviewRating":{"@type":"Rating","bestRating":"1","worstRating":"-1","ratingValue":1},"publisher":{"@type":"Organization","name":"Daily Record (UK)","url":"/source-2155"}}]}</script>

    <script>
    var dataLayer = dataLayer || [];
    </script>

    <script src="//cdnjs.cloudflare.com/ajax/libs/require.js/2.2.0/require.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>
<script>
require.config({
    baseUrl: "https://staticv2-4.rottentomatoes.com/static/",
    waitSeconds: 60,
    config: {
        text: {
            useXhr:function(url, protocol, hostname, port) {
                return true;
            }
        }
    },
    paths: {
        facebook : "//connect.facebook.net/en_US/all",
        backbone: "//cdnjs.cloudflare.com/ajax/libs/backbone.js/1.2.1/backbone-min",
        bootstrap: "//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.4/js/bootstrap.min",
        device: "//cdnjs.cloudflare.com/ajax/libs/device.js/0.2.7/device.min",
        marionette: "//cdnjs.cloudflare.com/ajax/libs/backbone.marionette/2.4.3/backbone.marionette.min",
        moment: "//cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.6/moment.min",
        googleMapsApis: "//maps.googleapis.com/maps/api/js?key=AIzaSyDPjsVhzeFsT0QhCw_gwy2PyXyfLo-ejds&libraries=places",
        slick: "//cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min",
        text: "//cdnjs.cloudflare.com/ajax/libs/require-text/2.0.12/text.min",
        typeahead: "//cdnjs.cloudflare.com/ajax/libs/typeahead.js/0.10.5/typeahead.bundle.min",
        underscore: "//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min",
        select2 : "//cdnjs.cloudflare.com/ajax/libs/select2/3.5.2/select2.min",
        jwplayer: "js/lib/jwplayer-7.4.3/jwplayer",
        googletag : "//www.googletagservices.com/tag/js/gpt", // NOTE: app code should generally NOT depend directly on googletag. Depend on gpt-setup insteaad.
        domReady: "//cdnjs.cloudflare.com/ajax/libs/require-domReady/2.0.1/domReady.min",
        "jquery-cookie" : "//cdnjs.cloudflare.com/ajax/libs/jquery-cookie/1.4.1/jquery.cookie.min",
        "js-cookie" : "//cdnjs.cloudflare.com/ajax/libs/js-cookie/2.1.1/js.cookie.min",
        "jquery-ui": "//cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min",
        scrollTo: "//cdnjs.cloudflare.com/ajax/libs/jquery-scrollTo/1.4.14/jquery.scrollTo.min",
        nouislider: "//cdnjs.cloudflare.com/ajax/libs/noUiSlider/6.2.0/jquery.nouislider.min",
        swiper: "js/lib/swiper.jquery.min",
        hammer: "//cdnjs.cloudflare.com/ajax/libs/hammer.js/2.0.4/hammer.min",
        masonry: "//cdnjs.cloudflare.com/ajax/libs/masonry/3.3.2/masonry.pkgd.min",
        dotdotdot: "//cdnjs.cloudflare.com/ajax/libs/jQuery.dotdotdot/1.7.4/jquery.dotdotdot.min",
        readmore: "//cdnjs.cloudflare.com/ajax/libs/Readmore.js/2.0.5/readmore.min",
        omniture: "js/tracking/omniture",
        "star-rating": "js/lib/star-rating/star-rating.min",
        schema : "js/utils/schema",
        rtClamp: "js/utils/rtclamp",
        vendor: 'dist/vendor.min',
        'common-pure-react': 'dist/common-pure-react.min',
        'common-backbone-react': 'dist/common-backbone-react.min',
        'common-react-redux': 'dist/common-react-redux',
        'photos-carousel': 'dist/photos-carousel-modal.min',
        'videos-carousel': 'dist/videos-carousel.min',
        'photo-gallery': 'dist/photo-gallery.min',
        'fullscreen-search': 'dist/fullscreen-search.min',
        'location-utils': 'dist/location-utils.min',
        'friend-ratings': 'dist/friend-ratings.min',
        'rating-widget': 'dist/rating-widget.min',
        'search-results': 'dist/search-results.min',
        bezier: "js/bezierEasing",
    },
    // Note: jquery, underscore and backbone all support amds natively. no need for shim.
    shim: {
        "photos-carousel": {
            deps: ["common-pure-react"]
        },
        "videos-carousel": {
            deps: ["common-pure-react"]
        },
        "photo-gallery": {
            deps: ["common-pure-react"]
        },
        "fullscreen-search": {
            deps: ["common-pure-react"]
        },
        "location-utils": {
            deps: ["common-pure-react"]
        },
        "friend-ratings": {
            deps: ["common-pure-react"]
        },
        'rating-widget': {
            deps: ["common-backbone-react"]
        },
        'search-results': {
            deps: ["common-react-redux"]
        },
        'common-other-react': {
            deps: ["common-pure-react"]
        },
        'common-photos': {
            deps: ["common-pure-react"]
        },
        'common-pure-react': {
            deps: ["vendor"]
        },
        'common-backbone-react': {
            deps: ["vendor"]
        },
        'common-react-redux': {
            deps: ["vendor"]
        },
        "bootstrap" : {
        	deps: ["jquery"]
        },
        "slick": {
            deps: ["jquery"],
            exports: "slick"
        },
        "text": {
            deps: ["backbone"]
        },
        "marionette": {
            deps: ["jquery", "underscore", "backbone"],
            exports: "Marionette"
        },
		"jwplayer": {
            exports: "jwplayer"
        },
        "select2" : {
            deps: ["jquery"]
        },
        "domReady!": {
            exports : "domReady!"
        },
        "facebook" : {
            exports: "FB"
        },
        "scrollTo" : {
            deps: ["jquery"]
        },
        "jquery-cookie" : {
        	deps: ["jquery"]
        },
        "touchSwipe": {
            deps: ["jquery"]
        },
        "typeahead": {
            deps: ["jquery", "bootstrap"],
            exports: "typeahead"
        },
        "swiper": {
            deps: ["jquery"]
        },
        "nouislider": {
            deps: ["jquery"]
        },
        "readmore": {
            deps: ["jquery"]
        },
        "dotdotdot": {
            deps: ["jquery"]
        },
        "googletag" : {
        	exports: "googletag"
        },
        "jquery-ui": {
            deps: ["jquery"]
        }
    }
});
</script>
<script>
define("globals", ["jquery", "underscore"], function($, _) {
    _.templateSettings = {
        interpolate: /\<\@\=(.+?)\@\>/gim,
        evaluate: /\<\@(.+?)\@\>/gim
    };
    var RT = RT || {};
    RT.Host = 'https://www.rottentomatoes.com';
    RT.EditorialHost = 'https://editorial.rottentomatoes.com';
    RT.LegacyPagesHost = 'https://www.rottentomatoes.com';
    RT.PrivateApiFrontendHost = 'https://www.rottentomatoes.com';
    RT.PrivateApiV2FrontendHost = 'https://www.rottentomatoes.com';
    RT.ForumHost = 'https://forum.rottentomatoes.com';
    RT.EditorialImageHost = 'https://editorial.rottentomatoes.com';
    RT.StaticHost = 'https://staticv2-4.rottentomatoes.com';
    RT.ShowtimesHost = 'https://api.flixster.com';
    RT.NewsThrottle = {
        homepage: false,
        celebrity: false,
        newsAndFeature: false,
        episode: false,
        season: false,
        header: false,
        movie: "Tomatometer" // State: Off, Tomatometer, Limited, On. Off will not throttle
    };
    RT.JwplayerKey='ojO88EQl2m4RQJPsd3tOAYLZOlgjKpMliIQMpA==';
    RT.loginInit = $.Deferred();
    RT.loginViewLoad = $.Deferred();
    RT.fb_ready = $.Deferred();
    RT.RecaptchaDeferred = $.Deferred();
    return RT;
});
</script>
<script>
    
        var mpscall = {};
        var BK = {};

        mpscall = {
            "site":"rottentomatoes-web",
            "type":"movie_page", // page or content type
            "cat":"movie|movie_page", // section hierarchy (pipe separated)
            "field[env]":"prod" // execution environment
        };

        BK.PageName = "https://www.rottentomatoes.com/m/inception/";
        BK.SiteSection = "movie";

        require(["jquery", "js-cookie", "jquery-cookie"], function(Cookies){
            var user_id_key = "auth_user";
            var userId = $.cookie(user_id_key);
            if (userId) {
                BK.FlixsterUID=userId;
            }
        });

        
            mpscall["field[rtid]"]="770805418"; // unique movie/show id
            mpscall["cag[rating]"]="pg13"; // mpaa rating
            mpscall["cag[release]"]="2010"; // latest release year
            mpscall["cag[movieshow]"]="Inception"; // name of movie or show
            mpscall["cag[genre]"]=["Action & Adventure","Drama","Mystery & Suspense","Science Fiction & Fantasy"].join('|');

            BK.MovieId="770805418";
            BK.MovieTitle="Inception";
            BK.MovieGenres=["Action & Adventure","Drama","Mystery & Suspense","Science Fiction & Fantasy"].join(',');
        

        var mpsopts = {
            "host":"mps.nbcuni.com",
            "updatecorrelator":true
        }

        var mps=mps||{};mps._ext=mps._ext||{};mps._adsheld=[];mps._queue=mps._queue||{};mps._queue.mpsloaded=mps._queue.mpsloaded||[];mps._queue.mpsinit=mps._queue.mpsinit||[];mps._queue.gptloaded=mps._queue.gptloaded||[];mps._queue.adload=mps._queue.adload||[];mps._queue.adclone=mps._queue.adclone||[];mps._queue.adview=mps._queue.adview||[];mps._queue.refreshads=mps._queue.refreshads||[];mps.__timer=Date.now();mps.__intcode="v2";if(typeof mps.getAd!="function")mps.getAd=function(adunit){if(typeof adunit!="string")return false;var slotid="mps-getad-"+adunit.replace(/\W/g,"");if(!mps._ext||!mps._ext.loaded){mps._queue.gptloaded.push(function(){typeof mps._gptfirst=="function"&&mps._gptfirst(adunit,slotid);mps.insertAd("#"+slotid,adunit)});mps._adsheld.push(adunit)}return'<div id="'+slotid+'" class="mps-wrapper" data-mps-fill-slot="'+adunit+'"></div>'};(function(){head=document.head||document.getElementsByTagName("head")[0],mpsload=document.createElement("script");mpsload.src="//"+mpsopts.host+"/fetch/ext/load-"+mpscall.site+".js?nowrite=2";mpsload.id="mps-load";head.insertBefore(mpsload,head.firstChild)})();
    

    // force preload of googletag
    require(["googletag"]);

    
    flix_user_id = "";
</script>
<!-- Facebook Pixel Code -->
<script>
    !function(f,b,e,v,n,t,s){if(f.fbq)return;n=f.fbq=function()
    {n.callMethod? n.callMethod.apply(n,arguments):n.queue.push(arguments)}
    ;if(!f._fbq)f._fbq=n;
        n.push=n;n.loaded=!0;n.version='2.0';n.queue=[];t=b.createElement(e);t.async=!0;
        t.src=v;s=b.getElementsByTagName(e)[0];s.parentNode.insertBefore(t,s)}(window,
            document,'script','https://connect.facebook.net/en_US/fbevents.js');
    fbq('init', '1147905821962466');
    fbq('track', 'PageView');
</script>
<noscript><img height="1" width="1" style="display:none"
               src="https://www.facebook.com/tr?id=1147905821962466&ev=PageView&noscript=1"
/></noscript>
<!-- DO NOT MODIFY -->
<!-- End Facebook Pixel Code -->

<script src="//assets.adobedtm.com/a5fa26c3da5356c4d77ae8244dc4eb5096e2f4b0/satelliteLib-cbce2cb5d7b476a55d4d651acf340e0592b4f00c-staging.js"></script>
    <script>console.info("require:" + window.performance.now());</script>

    <script>
    function endsWith(str, suffix) {
        return str.indexOf(suffix, str.length - suffix.length) !== -1;
    }

    //--Ad Unit Loaded (called for each ad loaded)
    var mps=mps||{}; mps._queue=mps._queue||{}; mps._queue.adload=mps._queue.adload||[];
    mps._queue.adload.push(function(eo) {
        window.console && console.log('**** AD LOADED: '+eo._mps.adslot);
        if (!eo.isEmpty) {
            console.log('MPS Slot Rendered: ' + eo.slot.getAdUnitPath() + " - " + eo.size + ', Creative Id: ' + eo.creativeId + ', Line Item Id: ' + eo.lineItemId +  ', Slot name: ' + eo._mps._slot);
            var slotName = eo._mps._slot;
            if ("interstitial" === slotName || "minterstitial" === slotName) {
                require(["jquery", "js-cookie", "jquery-cookie"], function(Cookies){
                    var pageViewCount = "pvc";
                    var pageViewCountCookieValue = $.cookie(pageViewCount);
                    var date = new Date();
                    var minutes = 60;
                    date.setTime(date.getTime() + (minutes * 60 * 1000));
                    if (pageViewCountCookieValue == null) {
                        $.cookie(pageViewCount, "1", {path: '/', expires : date});
                    }
                });
            }

            if ("topbanner" === slotName) {
                var leaderboardHeight = eo.size[1];
                if (leaderboardHeight > 50){
                    
                        $('#header-main').removeClass('header_main_scroll');
                        $('#header-main').css('margin-top', leaderboardHeight + 10);
                        var bannerEl = $('#header_and_leaderboard');
                        bannerEl.addClass("header_and_leaderboard_scroll");
                    
                    if (leaderboardHeight < 90){
                        $('.leaderboard_wrapper').css('min-height', leaderboardHeight);
                    }
                    $("#top_leaderboard_wrapper").animate({height:(leaderboardHeight+10)},1000);
                }
            }

            if ("trendinggraphic" === slotName) {
                //Hide Trending bar social section
                $("#trending_bar_social").hide();
                //Removing padding for trending bar ad
                $(".trendingBar>.trendingEl").css("padding","0px");
                $("#trending_bar_ad").show();
            }

            if ("tomatometer" === slotName) {
                if (eo.size[0] == 524 && eo.size[1] == 40) {
                    //Increase score panel margin
                    $("#scorePanel").css("margin-bottom", "20px");
                }
                // Only show Tomatometer Sponsorship div if rendered
                $("#tomatometer_sponsorship_ad").show();
            }
        }
    });

    define("gpt-setup", ["jquery", "googletag", "js-cookie", "jquery-cookie"], function($, googletag, Cookies){
        console.log("GPT - global setup");

        /* Keep track of slots defined to googletag */
        googletag.definedSlots = {};

        /* Add hook for setting external targeting */
        googletag.readyToFetch = $.Deferred();
        googletag.registeredPlugins = {};
        googletag.registerPlugin = function(name){
            console.log("GPT Registering plugin - " + name);
            this.registeredPlugins[name] = $.Deferred();
        };

        googletag.pluginReady = function(name){
            console.log("GPT Plugin Ready - " + name);
            this.registeredPlugins[name].resolve();
        };

        return googletag;
    });
</script>

<script>console.info("gpt-global:" + window.performance.now());</script>

    <script>
        var dataLayer = dataLayer || [];
        dataLayer.push({ 'viewportType': window.innerWidth >= 768 ? "desktop_view" : "mobile_view" });
        dataLayer.push({ 'rtVersion' : 2.0 });
    </script>
    <script>
    require(["jquery"], function($) {
        (function(w, d, s, l, i) {
            w[l] = w[l] || [];
            w[l].push({
                'gtm.start' : new Date().getTime(),
                event : 'gtm.js'
            });
            var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != 'dataLayer'? '&l='
                    + l
                    : '';
            j.async = true;
            j.src = '//www.googletagmanager.com/gtm.js?id=' + i + dl;
            f.parentNode.insertBefore(j, f);
        })(window, document, 'script', 'dataLayer', "GTM-TW7ZFZ");
    });
    </script>
    <script>console.info("gtm:" + window.performance.now());</script>

    <script>
            
            dataLayer.push({
                'event': 'MOB Pageview',
                'mobUrl': '/m/inception/',
                'mobWindow': ''
            });
        </script>

        <title>Inception&nbsp;(2010) - Rotten Tomatoes</title>

        <link href="https://www.rottentomatoes.com/m/inception/" rel="canonical" />
<meta name="movieTitle" content="Inception" />

        <link rel="alternate" href="android-app://net.flixster.android/flixster/movie?id=770805418" />

        <meta property="fb:app_id" content="326803741017" />
        <meta property="og:title" content="Inception" />
<meta property="og:type" content="video.movie" />
<meta property="og:url" content="https://www.rottentomatoes.com/m/inception/" />
        <meta property="og:title" content="Inception" />
        <meta property="og:description" content="Visionary filmmaker Christopher Nolan (Memento, The Dark Knight) writes and directs this psychological sci-fi action film about a thief who possesses the power to enter into the dreams of others. Dom Cobb (Leonardo DiCaprio) doesn't steal things, he steals ideas. By projecting himself deep into the subconscious of his targets, he can glean information that even the best computer hackers can't get to. In the world of corporate espionage, Cobb is the ultimate weapon. But even weapons have their weakness, and when Cobb loses everything, he's forced to embark on one final mission in a desperate quest for redemption. This time, Cobb won't be harvesting an idea, but sowing one. Should he and his team of specialists succeed, they will have discovered a new frontier in the art of psychic espionage. They've planned everything to perfection, and they have all the tools to get the job done. Their mission is complicated, however, by the sudden appearance of a malevolent foe that seems to know exactly what they're up to, and precisely how to stop them. ~ Jason Buchanan, Rovi" />
        <meta property="og:image" content="https://resizing.flixster.com/KLdXKhUmh7tOozh09RAwywnee1o=/300x300/v1.bTsxMTE2NjcyNTtqOzE3Mjc0OzEyMDA7ODAwOzEyMDA" />
        <meta name="twitter:card" content="summary">
        <meta name="twitter:site" content="@rottentomatoes">
        <meta name="twitter:title" content="Inception">
        <meta name="twitter:description" content="Visionary filmmaker Christopher Nolan (Memento, The Dark Knight) writes and directs this psychological sci-fi action film about a thief who possesses the power to enter into the dreams of others. Dom Cobb (Leonardo DiCaprio) doesn't steal things, he steals ideas. By projecting himself deep into the subconscious of his targets, he can glean information that even the best computer hackers can't get to. In the world of corporate espionage, Cobb is the ultimate weapon. But even weapons have their weakness, and when Cobb loses everything, he's forced to embark on one final mission in a desperate quest for redemption. This time, Cobb won't be harvesting an idea, but sowing one. Should he and his team of specialists succeed, they will have discovered a new frontier in the art of psychic espionage. They've planned everything to perfection, and they have all the tools to get the job done. Their mission is complicated, however, by the sudden appearance of a malevolent foe that seems to know exactly what they're up to, and precisely how to stop them. ~ Jason Buchanan, Rovi">
        <meta name="twitter:image" content="https://resizing.flixster.com/KLdXKhUmh7tOozh09RAwywnee1o=/300x300/v1.bTsxMTE2NjcyNTtqOzE3Mjc0OzEyMDA7ODAwOzEyMDA">
        <meta name="movieID" content="770805418">

        <link rel="stylesheet" href="https://staticv2-4.rottentomatoes.com/static/styles/css/movie.css" />
<link href="https://staticv2-4.rottentomatoes.com/static/js/lib/star-rating/css/star-rating.min.css" text="text/css" rel="stylesheet" />
    <script>console.info("after page specific head tag content:" + window.performance.now());</script>

    <script>console.info("bottom of head tag: " + window.performance.now());</script>
    <script type="text/javascript">
        var onRecaptchaCallback = function() {
            require(["jquery", "globals"], function($, RT) {
                RT.RecaptchaDeferred.resolve();
            });
        };
    </script>
    <script>
        require([
            "globals",
            "https://staticv2-4.rottentomatoes.com/static/dist/app/models/LoginModel.min.js",
        ], function(RT, LoginModel) {
            RT.loginModel = new LoginModel();
            RT.loginInit.resolve();
        }.bind(this));
    </script>
</head>
<body class="body  " >
    <script>console.info("body-top:" + window.performance.now());</script>
    <div id="emptyPlaceholder"></div> <div id="fb-root"></div>
<script>
require(['jquery', 'facebook', 'globals'], function($, FB, RT) {
    FB.init({
        appId: '326803741017',
        version : 'v2.2',
        status: true,
        cookie: true,
        xfbml: true
    });

    // FB scripts ready. (Does not imply logged in)
    RT.fb_ready.resolve();
});
</script><script>console.info("facebook:" + window.performance.now());</script>

    <!-- TODO: Put in long term targeting fix -->
    <div id="overlay" style="height:0px;"></div>
<script>
    var mps=mps||{}; mps._queue=mps._queue||{}; mps._queue.gptloaded=mps._queue.gptloaded||[];
    mps._queue.gptloaded.push(function() {
        if (mps.getResponsiveSet() !='0') { //DESKTOP or TABLET
            require(["gpt-setup", "jquery", "js-cookie", "jquery-cookie"], function(googletag, Cookies){
                var pageViewCount = $.cookie("pvc");
                if (pageViewCount == null || (parseInt(pageViewCount) == 0) || (parseInt(pageViewCount) % 3 == 0)) {
                    mps.insertAd('#overlay','interstitial');
                }
            });
        } else if (mps.getResponsiveSet() == '0') {
            require(["gpt-setup", "jquery", "js-cookie", "jquery-cookie"], function(googletag, Cookies){
                var pageViewCount = $.cookie("pvc");
                if (pageViewCount == null || (parseInt(pageViewCount) == 0) || (parseInt(pageViewCount) % 3 == 0)) {
                    mps.insertAd('#overlay','minterstitial');
                }
            });
        }
    });
</script>

<script>
            if (Math.max(document.documentElement.clientWidth, window.innerWidth || 0) > 768) {
                //Leaderboard viewability scroll only loaded for desktop
                require(["https://staticv2-4.rottentomatoes.com/static/dist/jspjs/leaderboardViewability.jsp.min.js"]);
            }
        </script>
    <div id="navMenu" class="modal fade" role="dialog" aria-labelledby="navMenu">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span class="glyphicon glyphicon-remove" />
                </button>
                <div class="pull-left">
                    <ul class="list-inline social">
                        <li><a id="header-facebook-social-link" class="unstyled fontelloIcon icon-facebook-squared" href="http://www.facebook.com/rottentomatoes" target="_blank"></a></li>
                        <li><a id="header-twitter-social-link" class="unstyled fontelloIcon icon-twitter" href="http://twitter.com/rottentomatoes" target="_blank"></a></li>
                    </ul>
                </div>
                <div class="items">
                    <div class="item">
                        <a class="homeTab unstyled navLink fullLink" href="/">
                            Home
                        </a>
                    </div>
                    <div class="item">
                        <a class="boxofficeTab unstyled navLink fullLink" href="/lists/theater/">
                            Top Box Office
                        </a>
                    </div>
                    <div class="item">
                        <a class="theatersTab unstyled navLink fullLink" href="/theaters/">
                            Tickets &amp; Showtimes
                        </a>
                    </div>
                    <div class="item">
                        <a class="dvdTab unstyled navLink fullLink" href="/lists/dvd/">
                            DVD &amp; Streaming
                        </a>
                    </div>
                    <div class="item">
                            <a class="tvTab unstyled navLink fullLink" href="/lists/tv/">
                                TV
                            </a>
                        </div>
                    <div class="item">
                        <a class="newsTab unstyled navLink fullLink" href="https://editorial.rottentomatoes.com">
                            News
                        </a>
                    </div>
                    </div>
                <div class="loginArea"></div>
            </div>
        </div>
    </div>
</div>
<div class="body_main container">
        <div id="whatIsTomatometer" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">
                    <span aria-hidden="true">&times;</span><span class="sr-only">Close</span>
                </button>
                <h2 class="modal-title">What is the Tomatometer&reg;?</h2>
            </div>
            <div class="modal-body">
                <p>
                    The Tomatometer rating &ndash; based on the published opinions of hundreds of film and
                    television critics &ndash; is a trusted measurement of movie and TV programming quality
                    for millions of moviegoers. It represents the percentage of professional critic reviews
                    that are positive for a given film or television show.
                </p>
                <div class="row-sameColumnHeight noSpacing" style="margin:20px 0">
                    <div class="col-xs-18" style="vertical-align:bottom">
                        <div class="title">
                            <h3>
                                <span style="background-color:white">From the Critics</span>
                            </h3>
                        </div>
                    </div>
                    <div class="col-xs-6" style="vertical-align:bottom">
                        <h3 class="noSpacing center">From RT Users Like You!</h3>
                    </div>
                </div>

                <div class="row-sameColumnHeight noSpacing">
                    <div class="col-xs-18">
                        <div class="col-xs-8 center">
                            <span class="icon huge fresh"></span>
                            <p class="noSpacing bold">Fresh</p>
                            <p>The Tomatometer is 60% or higher.</p>
                        </div>
                        <div class="col-xs-8 center">
                            <span class="icon huge rotten"></span>
                            <p class="noSpacing bold">Rotten</p>
                            <p>The Tomatometer is 59% or lower.</p>
                        </div>
                        <div class="col-xs-8 center">
                            <span class="icon huge certified"></span>
                            <p class="noSpacing bold">Certified Fresh</p>
                            <p>
                                Movies and TV shows are Certified Fresh with a steady Tomatometer of 75% or
                                higher after a set amount of reviews (80 for wide-release movies, 40 for
                                limited-release movies, 20 for TV shows), including 5 reviews from Top Critics.
                            </p>
                        </div>
                    </div>
                    <div class="col-xs-6 center">
                        <span class="icon huge popcorn"></span>
                        <p class="noSpacing bold">Audience Score</p>
                        <p>Percentage of users who rate a movie or TV show positively.</p>
                    </div>
                </div>
                <div class="clickForMore" style="margin-bottom:0">
                    <a class="unstyled articleLink" href="/about/">Learn More <span class="glyphicon glyphicon-menu-right"></span></a>
                </div>
            </div>
        </div>
    </div>
</div><div id="header_and_leaderboard">
            <div id="top_leaderboard_wrapper" class="leaderboard_wrapper ">
        <div id="top_leaderboard_helper" class="leaderboard_helper">
            <div id="leaderboard_top_ad"></div>
            <script>
                //--RESPONSIVE AD SWITCHING (DIFFERENT CONTAINERS)
                var mps=mps||{}; mps._queue=mps._queue||{}; mps._queue.gptloaded=mps._queue.gptloaded||[];
                mps._queue.gptloaded.push(function() {
                    if (mps.getResponsiveSet() =='0') { //MOBILE
                        mps.insertAd('#leaderboard_top_ad','mbanner');
                    } else { //DESKTOP or TABLET
                        mps.insertAd('#leaderboard_top_ad','topbanner');
                    }
                });
            </script>
        </div>
    </div>
</div>

        <nav id="header-main" class="header_main container">
    <div id="navbar" class="navbar navbar-rt" role="navigation">
        <div class="navbar-header pull-right hidden-xs">
            <div class="header_links">
                <a id="header-whats-the-tomatometer" data-toggle="modal" data-target="#whatIsTomatometer">What's the Tomatometer&reg;?</a>
                <a id="header-top-bar-critics" href="/critics/">RT Critics</a> 
                <div id="headerUserSection" style="display: inline-block;"></div>
            </div>
        </div>
        <div id="header_brand_column" class="col-sm-13 col-full-xs">
            <div class="hidden-xs desktopNav">
                <style>
                .v2BetaBox{
                    color: red;
                    background-color: white;
                    position: absolute;
                    top: 0px;
                    padding: 6px;
                    border: solid black 5px;
                    margin: 5px;
                    font-weight: bold;
                    left: 120px;
                }
                </style>
                <div id="navbar_brand" class="navbar-brand">
                    <a id="header-rt-logo" href="/"><img id="original_rt_logo" src="https://staticv2-4.rottentomatoes.com/static/images/logos/rtlogo.png" /></a>
                    <div id="new_logo_ad" style="display:none;"></div>
<script>
    var mps=mps||{}; mps._queue=mps._queue||{}; mps._queue.gptloaded=mps._queue.gptloaded||[];
    mps._queue.gptloaded.push(function() {
        if (mps.getResponsiveSet() !='0') { //DESKTOP or TABLET
            mps.rt.insertlogo('#new_logo_ad', 'ploc=rtlogo;');
        }
    });
</script>

</div>
                
                <div id="desktop-search-root">
                    <form action="/search/" method="get">
                        <div class="navbar-searchbox main">
                            <div class="input-group">
                                <input name="search" type="text" class="form-control" placeholder="Search movies, TV, actors, more..." name="srch-term" id="search-term">
                                <div class="input-group-btn">
                                    <button type="submit" class="btn btn-default searchBtn">
                                        <em class="glyphicon glyphicon-search"></em>
                                    </button>
                                </div>
                                <div class="navbar-close">
                                    <button type="button" class="btn btn-default">
                                        <span class="glyphicon glyphicon-remove" />
                                    </button>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <script>
                    (function() {
                        require(["fullscreen-search"], function(fullscreenSearch) {
                            fullscreenSearch.mountDropdown(document.getElementById('desktop-search-root'));
                        });
                    })();
                </script>
            </div>
            <div class="visible-xs mobileNav">
                <div>
                    <a id="mobile-search-button">
                        <button class="pull-right navbar-button searchButton">
                            <em class="glyphicon glyphicon-search white"></em>
                        </button>
                    </a>
                    <script>
                        (function() {
                            require(["fullscreen-search"], function(fullscreenSearch) {
                                fullscreenSearch.attach(document.getElementById('mobile-search-button'));
                            });
                        })();
                    </script>
                </div>
                <div class="btn-group pull-left">
                    <button class="pull-left navbar-button menuButton dropdown-toggle visible-xs" type="button" data-toggle="modal" aria-expanded="false" data-target="#navMenu">
                        <span class="glyphicon glyphicon-menu-hamburger" />
                    </button>
                </div>
                <div class="navbar-brand">
                    <a id="header-rt-logo" href="/"> <img src="https://staticv2-4.rottentomatoes.com/static/images/logos/rtlogo.png" /></a>
                </div>
            </div>
        </div>
        <div id="menu" class="navbar-nav col-sm-11 hidden-xs">
    <ul class="list-inline">
        <li class="menuHeader center dropdown noSpacing">
            <a id="movieMenu" role="button" class="h2 white" href="/browse/opening/">
                Movies & DVDs<span class="fontelloIcon icon-down-dir"></span>
            </a>
            <div class="dropdown-menu" role="menu" aria-labelledby="movieMenu">
                <div class="row-sameColumnHeight">
                    <div class="col-xs-5 subnav">
                        <div class="innerSubnav">
                            <h2 class="title">Movies in Theaters</h2>
                            <ul class="list-unstyled" id="header-movies-in-theaters">
                                <li>
                                    <a class="unstyled articleLink" href="/browse/opening/">Opening This Week</a>
                                </li>
                                <li>
                                    <a class="unstyled articleLink" href="/browse/in-theaters/">Top Box Office</a>
                                </li>
                                <li>
                                    <a class="unstyled articleLink" href="/browse/upcoming/">Coming Soon to Theaters</a>
                                </li>
                                <li>
                                    <a class="unstyled articleLink" href="/browse/box-office/">Weekend Earnings</a>
                                </li>
                                <li>
                                    <a class="unstyled articleLink" href="/browse/cf-in-theaters/">Certified Fresh Movies</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="col-xs-5 subnav">
                        <div class="innerSubnav">
                            <a class="unstyled articleLink" href="/dvd/"><h2 class="title">On Dvd &amp; Streaming</h2></a>
                            <ul class="list-unstyled" id="header-on-dvd-streaming">
                                <li>
                                    <a class="unstyled articleLink" href="/browse/dvd-all/?services=fandango_now">FandangoNOW</a>
                                </li>
                                <li>
                                    <a class="unstyled articleLink" href="/browse/dvd-all/?services=netflix_iw">Netflix Streaming</a>
                                </li>
                                <li>
                                    <a class="unstyled articleLink" href="/browse/dvd-all/?services=itunes">iTunes</a>
                                </li>
                                <li>
                                    <a class="unstyled articleLink" href="/browse/dvd-all/?services=amazon_prime;amazon">Amazon and Amazon Prime</a>
                                </li>
                                <li>
                                    <a class="unstyled articleLink" href="/browse/dvd-top-rentals/">Top Rentals</a>
                                </li>
                                <li>
                                    <a class="unstyled articleLink" href="/browse/dvd-new-releases/">New Releases</a>
                                </li>
                                <li>
                                    <a class="unstyled articleLink" href="/browse/dvd-upcoming/">Coming Soon to DVD</a>
                                </li>
                                <li>
                                    <a class="unstyled articleLink" href="/browse/cf-dvd-all/">Certified Fresh Movies</a>
                                </li>
                                <li>
                                    <a class="unstyled articleLink" href="/browse/dvd-all/">Browse All</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="col-xs-3 subnav">
                        <div class="innerSubnav">
                            <h2 class="title">More</h2>
                            <ul class="list-unstyled" id="header-movies-more">
                                <li><a class="unstyled articleLink" href="/top/">Top Movies</a></li>
                                <li><a class="unstyled articleLink" href="/trailers/">Trailers</a></li>
                                <li><a class="unstyled articleLink" href="/photos/">Photos</a></li>
                                <li><a class="unstyled articleLink" href="https://forum.rottentomatoes.com">Forums</a></li>
                            </ul>
                        </div>
                    </div>
                    <div class="col-xs-11 subnav">
                        <h2 class="title">Certified Fresh Picks</h2>
                            <div class="freshPicks inDropdown" id="header-certified-fresh-picks">
                                <div class="cfpItem">
    <a href="/m/rogue_one_a_star_wars_story" class="unstyled articleLink cfpLinks">
        <p class="topText bold"></p>
        <div class="imgContainer">
            <img src="https://resizing.flixster.com/2VaFpFKH6K9vGCRC7GJflGioL4Y=/fit-in/278x400/v1.bTsxMjIzNzIxOTtwOzE3MTk2OzEyMDA7NzIwOzEwNjU" />
        </div>
        <div class="movie_content_area">
            <span class="icon tiny certified"></span>
            <span class="tMeterScore">84%</span>
        </div>
        <p class="title noSpacing">Rogue One: A Star Wars Story</p>
    </a>
</div><div class="cfpItem">
    <a href="/m/moana_2016" class="unstyled articleLink cfpLinks">
        <p class="topText bold"></p>
        <div class="imgContainer">
            <img src="https://resizing.flixster.com/J76YycJ4ReMW_4RhxN5U5xI-j7w=/fit-in/278x400/v1.bTsxMjIyMTc2NDtwOzE3MTk2OzEyMDA7NDU3OzY3NQ" />
        </div>
        <div class="movie_content_area">
            <span class="icon tiny certified"></span>
            <span class="tMeterScore">95%</span>
        </div>
        <p class="title noSpacing">Moana</p>
    </a>
</div><div class="cfpItem">
    <a href="/m/the_secret_life_of_pets" class="unstyled articleLink cfpLinks">
        <p class="topText bold"></p>
        <div class="imgContainer">
            <img src="https://resizing.flixster.com/09ddGJUhN7AUNk8ELfOZ8tRrDgY=/fit-in/278x400/v1.bTsxMTUxMDc2OTtqOzE3Mjc4OzEyMDA7NDgwOzc2MA" />
        </div>
        <div class="movie_content_area">
            <span class="icon tiny certified"></span>
            <span class="tMeterScore">74%</span>
        </div>
        <p class="title noSpacing">The Secret Life of Pets</p>
    </a>
</div></div>
                        </div>
                </div>
            </div>
        </li>
        <li class="menuHeader center dropdown noSpacing dropdown-toggle">
            <a id="tvMenu" class="h2" href="/top-tv/"> TV<span class="fontelloIcon icon-down-dir" /></a>
            <div id="tvMenuDropdown" class="dropdown-menu" role="menu" aria-labelledby="tvMenu">
                <div class="row-sameColumnHeight">
                    <div class="col-xs-7 subnav">
                        <div class="innerSubnav" id="header-tv-col1">
                                <div class="clickForMore">
                                    <a id="tv-list-21-view-all" class="unstyled articleLink" href="/browse/tv-list-1/">
                                        View All
                                        <span class="glyphicon glyphicon-menu-right" />
                                    </a>
                                </div>
                                <h2 class="title">New TV Episodes Tonight</h2>
                                <table id="tv-list-21" class="movie_list tv_list">
                                    <tr class="tv_show_tr tvTopListTitle">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/the_hollow_crown/s02">
            <span class="icon tiny fresh"></span>
                    <span class="tMeterScore">100%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/the_hollow_crown/s02">The Hollow Crown</a>
    </td>
</tr><tr class="tv_show_tr tvTopListTitle">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/eyewitness/s01">
            <span class="icon tiny fresh"></span>
                    <span class="tMeterScore">83%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/eyewitness/s01">Eyewitness</a>
    </td>
</tr><tr class="tv_show_tr tvTopListTitle">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/the_affair/s03">
            <span class="icon tiny fresh"></span>
                    <span class="tMeterScore">80%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/the_affair/s03">The Affair</a>
    </td>
</tr><tr class="tv_show_tr tvTopListTitle">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/berlin_station/s01">
            <span class="icon tiny fresh"></span>
                    <span class="tMeterScore">70%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/berlin_station/s01">Berlin Station</a>
    </td>
</tr><tr class="tv_show_tr tvTopListTitle">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/graves/s01">
            <span class="icon tiny rotten"></span>
                    <span class="tMeterScore">56%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/graves/s01">Graves</a>
    </td>
</tr><tr class="tv_show_tr tvTopListTitle">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/mariah_s_world/s01">
            <span class="icon tiny rotten"></span>
                    <span class="tMeterScore">44%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/mariah_s_world/s01">Mariah's World</a>
    </td>
</tr><tr class="tv_show_tr tvTopListTitle">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/shameless/s07">
            <span class="tMeterIcon tiny noRating">No Score Yet</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/shameless/s07">Shameless</a>
    </td>
</tr><tr class="tv_show_tr tvTopListTitle">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/the_librarians/s03">
            <span class="tMeterIcon tiny noRating">No Score Yet</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/the_librarians/s03">The Librarians</a>
    </td>
</tr><tr class="tv_show_tr tvTopListTitle">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/the_royals/s03">
            <span class="tMeterIcon tiny noRating">No Score Yet</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/the_royals/s03">The Royals</a>
    </td>
</tr><tr class="tv_show_tr tvTopListTitle">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/elementary/s05">
            <span class="tMeterIcon tiny noRating">No Score Yet</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/elementary/s05">Elementary</a>
    </td>
</tr><tr class="tv_show_tr tvTopListTitle">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/madam_secretary/s03">
            <span class="tMeterIcon tiny noRating">No Score Yet</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/madam_secretary/s03">Madam Secretary</a>
    </td>
</tr><tr class="tv_show_tr tvTopListTitle">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/blunt_talk/s02">
            <span class="tMeterIcon tiny noRating">No Score Yet</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/blunt_talk/s02">Blunt Talk</a>
    </td>
</tr></table>
                            </div>
                        </div>
                    <div class="col-xs-7 subnav">
                        <div class="innerSubnav" id="header-tv-col2">
                                <div class="clickForMore">
                                    <a id="tv-list-24-view-all" class="unstyled articleLink" href="/browse/tv-list-2/">
                                        View All<span class="glyphicon glyphicon-menu-right" />
                                    </a>
                                </div>
                                <h2 class="title">Most Popular TV on RT</h2>
                                <table id="tv-list-24" class="movie_list tv_list">
                                    <tr class="tv_show_tr tvTopListTitle">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/westworld/s01">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">89%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/westworld/s01">Westworld</a>
    </td>
</tr><tr class="tv_show_tr tvTopListTitle">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/insecure/s01">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">100%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/insecure/s01">Insecure</a>
    </td>
</tr><tr class="tv_show_tr tvTopListTitle">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/black_mirror/s03">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">93%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/black_mirror/s03">Black Mirror</a>
    </td>
</tr><tr class="tv_show_tr tvTopListTitle">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/people_of_earth/s01">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">92%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/people_of_earth/s01">People of Earth</a>
    </td>
</tr><tr class="tv_show_tr tvTopListTitle">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/vikings_2013/s04">
            <span class="icon tiny fresh"></span>
                    <span class="tMeterScore">100%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/vikings_2013/s04">Vikings</a>
    </td>
</tr><tr class="tv_show_tr tvTopListTitle">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/the_walking_dead/s07">
            <span class="icon tiny fresh"></span>
                    <span class="tMeterScore">70%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/the_walking_dead/s07">The Walking Dead</a>
    </td>
</tr><tr class="tv_show_tr tvTopListTitle">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/rectify/s04">
            <span class="icon tiny fresh"></span>
                    <span class="tMeterScore">100%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/rectify/s04">Rectify</a>
    </td>
</tr><tr class="tv_show_tr tvTopListTitle">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/this_is_us/s01">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">90%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/this_is_us/s01">This Is Us</a>
    </td>
</tr><tr class="tv_show_tr tvTopListTitle">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/dirk_gently_s_holistic_detective_agency/s01">
            <span class="icon tiny fresh"></span>
                    <span class="tMeterScore">72%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/dirk_gently_s_holistic_detective_agency/s01">Dirk Gently's Holistic Detective Agency</a>
    </td>
</tr><tr class="tv_show_tr tvTopListTitle">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/designated_survivor/s01">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">85%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/designated_survivor/s01">Designated Survivor</a>
    </td>
</tr><tr class="tv_show_tr tvTopListTitle">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/ash_vs_evil_dead/s02">
            <span class="icon tiny fresh"></span>
                    <span class="tMeterScore">100%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/ash_vs_evil_dead/s02">Ash vs. Evil Dead</a>
    </td>
</tr><tr class="tv_show_tr tvTopListTitle">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/chance/s01">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">78%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/chance/s01">Chance</a>
    </td>
</tr></table>
                            </div>
                        </div>
                    <div class="col-xs-5 subnav">
                        <div class="innerSubnav">
                            <h2 class="title">More</h2>
                            <ul class="list-unstyled" id="header-tv-more">
                                <li><a class="unstyled articleLink" href="/top-tv/">Top TV Shows</a></li>
                                <li><a class="unstyled articleLink" href="/browse/tv-list-3/">Certified Fresh TV</a></li>
                            </ul>
                            <h2 class="title" style="margin-top: 20px">Episodic Reviews</h2>
                            <ul class="list-unstyled" id="header-tv-episodic-reviews">
                                <li><a href="/tv/american_horror_story/s06/#desktopEpisodeList"> American Horror Story: Roanoke</a></li>
                                <li><a href="/tv/empire/s03/#desktopEpisodeList"> Empire: Season 3</a></li>
                                <li><a href="/tv/fear_the_walking_dead/s02/#desktopEpisodeList"> Fear the Walking Dead: Season 2</a></li>
                                <li><a href="/tv/gotham/s03/#desktopEpisodeList"> Gotham: Season 3</a></li>
                                <li><a href="/tv/how_to_get_away_with_murder/s03/#desktopEpisodeList"> How to Get Away With Murder: Season 3</a></li>
                                <li><a href="/tv/mr_robot/s02/#desktopEpisodeList"> Mr. Robot: Season 2</a></li>
                                </ul>
                        </div>
                    </div>
                    <div class="col-xs-5 subnav freshPicks inDropdownTv">
                        <div class="innerSubnav">
                                <h2 class="title">Certified Fresh Pick</h2>
                                <div class="cfpItem">
    <a href="/tv/gilmore_girls/s08" class="unstyled articleLink cfpLinks">
        <div class="imgContainer">
            <img src="https://resizing.flixster.com/oKYuwYLQwQnRCSCzb2zw7FeAX7g=/fit-in/278x400/v1.dDsyMjU3NjY7ajsxNzE5MjsxMjAwOzE1MDA7MjIyMg" />
        </div>
        <div class="movie_content_area">
            <span class="icon tiny certified"></span>
            <span class="tMeterScore">88%</span>
        </div>
        <p class="title noSpacing">Gilmore Girls: A Year in the Life</p>
    </a>
</div></div>
                        </div>
                </div>
            </div>
        </li>
        <li class="menuHeader center dropdown noSpacing dropdown-toggle">
            <a id="newsMenu" class="h2" href="https://editorial.rottentomatoes.com">
                News<span class="fontelloIcon icon-down-dir" />
            </a>
            <div class="dropdown-menu" role="menu" aria-labelledby="newsMenu">
                <div class="row-sameColumnHeight noSpacing">
                    <div class="col-xs-4 subnav">
                        <div class="innerSubnav" id="header-news-columns">
                            <h2 class="title">Columns</h2>
                            <ul class="list-unstyled">
                                <li><a class="unstyled articleLink" href="https://editorial.rottentomatoes.com/24-frames/" data-pageheader="24 Frames">24 Frames</a></li>
                                <li><a class="unstyled articleLink" href="https://editorial.rottentomatoes.com/binge-guide/" data-pageheader="Binge Guide">Binge Guide</a></li>
                                <li><a class="unstyled articleLink" href="https://editorial.rottentomatoes.com/box-office-guru/" data-pageheader="Box Office Guru">Box Office Guru</a></li>
                                <li><a class="unstyled articleLink" href="https://editorial.rottentomatoes.com/critics-consensus/" data-pageheader="Critics Consensus">Critics Consensus</a></li>
                                <li><a class="unstyled articleLink" href="https://editorial.rottentomatoes.com/five-favorite-films/" data-pageheader="Five Favorite Films">Five Favorite Films</a></li>
                                <li><a class="unstyled articleLink" href="https://editorial.rottentomatoes.com/now-streaming/" data-pageheader="Now Streaming">Now Streaming</a></li>
                                <li><a class="unstyled articleLink" href="https://editorial.rottentomatoes.com/parental-guidance/" data-pageheader="Parental Guidance">Parental Guidance</a></li>
                                <li><a class="unstyled articleLink" href="https://editorial.rottentomatoes.com/red-carpet-roundup/" data-pageheader="Red Carpet Roundup">Red Carpet Roundup</a></li>
                                <li><a class="unstyled articleLink" href="https://editorial.rottentomatoes.com/rt-on-dvd/" data-pageheader="RT on DVD">RT on DVD</a></li>
                                <li><a class="unstyled articleLink" href="https://editorial.rottentomatoes.com/sub-cult/" data-pageheader="Sub-Cult">Sub-Cult</a></li>
                                <li><a class="unstyled articleLink" href="https://editorial.rottentomatoes.com/tech-talk/" data-pageheader="Tech Talk">Tech Talk</a></li>
                                <li><a class="unstyled articleLink" href="https://editorial.rottentomatoes.com/total-recall/" data-pageheader="Total Recall">Total Recall</a></li>
                                <li><a class="unstyled articleLink" href="https://editorial.rottentomatoes.com/tv-talk/" data-pageheader="TV Talk">TV Talk</a></li>
                                <li><a class="unstyled articleLink" href="https://editorial.rottentomatoes.com/video-interviews/" data-pageheader="Video Interviews">Video Interviews</a></li>
                                <li><a class="unstyled articleLink" href="https://editorial.rottentomatoes.com/weekly-ketchup/" data-pageheader="Weekly Ketchup">Weekly Ketchup</a></li>
                            </ul>
                        </div>
                    </div>
                    <div class="col-xs-6 subnav">
                        <div class="innerSubnav" id="header-news-best-worst">
                                <div class="clickForMore">
                                    <a class="unstyled articleLink" data-pageheader="Best and Worst - Show All" href="https://editorial.rottentomatoes.com/total-recall/">View All <span class="glyphicon glyphicon-menu-right" /></a>
                                </div>
                                <h2 class="title">Best and Worst</h2>
                                <div class="newsContainer">
                                    <div class="newsContainerItem">
                                            <a href="https://editorial.rottentomatoes.com/article/all-star-wars-movies-ranked-by-tomatometer/" class="articleLink unstyled">
                                                <div class="newsPhoto" style="background-image:url('https://s3-us-west-2.amazonaws.com/flx-editorial-wordpress/wp-content/uploads/2016/12/14130909/Star-Wars-Movies.jpg')"></div>
                                                <div class="newsTitle" style="overflow: hidden; text-overflow: ellipsis; -webkit-box-orient: vertical; display: -webkit-box; -webkit-line-clamp: 2;">
                                                        All <em>Star Wars</em> Movies Ranked By Tomatometer</div>
                                            </a>
                                        </div>
                                    <div class="newsContainerItem">
                                            <a href="https://editorial.rottentomatoes.com/article/ryan-goslings-10-best-movies/" class="articleLink unstyled">
                                                <div class="newsPhoto" style="background-image:url('https://s3-us-west-2.amazonaws.com/flx-editorial-wordpress/wp-content/uploads/2016/12/07123140/Ryan-Gosling-Recall.jpg')"></div>
                                                <div class="newsTitle" style="overflow: hidden; text-overflow: ellipsis; -webkit-box-orient: vertical; display: -webkit-box; -webkit-line-clamp: 2;">
                                                        Ryan Gosling&#8217;s 10 Best Movies</div>
                                            </a>
                                        </div>
                                    </div>
                            </div>
                        </div>
                    <div class="col-xs-6 subnav">
                        <div class="innerSubnav" id="header-news-guides">
                                <div class="clickForMore">
                                    <a class="unstyled articleLink" data-pageheader="Guides - Show All" href="https://editorial.rottentomatoes.com/rt-hubs/">View All <span class="glyphicon glyphicon-menu-right" /></a>
                                </div>
                                <h2 class="title">Guides</h2>
                                <div class="newsContainer">
                                    <div class="newsContainerItem">
                                            <a href="https://editorial.rottentomatoes.com/rt-hub/awards-tour-20162017/" class="articleLink unstyled">
                                                <div class="newsPhoto" style="background-image:url('https://s3-us-west-2.amazonaws.com/flx-editorial-wordpress/wp-content/uploads/2016/10/20084023/awards-tour-2016.jpg')"></div>
                                                <div class="newsTitle" style="overflow: hidden; text-overflow: ellipsis; -webkit-box-orient: vertical; display: -webkit-box; -webkit-line-clamp: 2;">
                                                    Awards Tour 2016/2017</div>
                                            </a>
                                        </div>
                                    <div class="newsContainerItem">
                                            <a href="https://editorial.rottentomatoes.com/rt-hub/holiday-movie-tv-guide-2016/" class="articleLink unstyled">
                                                <div class="newsPhoto" style="background-image:url('https://s3-us-west-2.amazonaws.com/flx-editorial-wordpress/wp-content/uploads/2016/10/31142831/Holiday-Guide.jpg')"></div>
                                                <div class="newsTitle" style="overflow: hidden; text-overflow: ellipsis; -webkit-box-orient: vertical; display: -webkit-box; -webkit-line-clamp: 2;">
                                                    Holiday Movie &#038; TV Guide 2016</div>
                                            </a>
                                        </div>
                                    </div>
                            </div>
                        </div>
                    <div class="col-xs-6 subnav">
                        <div class="innerSubnav" id="header-news-rtnews">
                                <div class="clickForMore" style="margin-bottom: 0">
                                    <a class="unstyled articleLink" data-pageheader="RT News - Show All" href="https://editorial.rottentomatoes.com/news/">View All <span class="glyphicon glyphicon-menu-right" /></a>
                                </div>
                                <h2 class="title">RT News</h2>
                                <div class="newsContainer">
                                    <div class="newsContainerItem">
                                            <a href="https://editorial.rottentomatoes.com/article/box-office-rogue-one-launches-with-290m-global-debut/" class="articleLink unstyled">
                                                <div class="newsPhoto" style="background-image:url('https://s3-us-west-2.amazonaws.com/flx-editorial-wordpress/wp-content/uploads/2016/12/18134202/rogueone5-rep.jpg')"></div>
                                                <div class="newsTitle" style="overflow: hidden; text-overflow: ellipsis; -webkit-box-orient: vertical; display: -webkit-box; -webkit-line-clamp: 2;">
                                                    Box Office: <em>Rogue One</em> Launches with $290M Global Debut</div>
                                            </a>
                                        </div>
                                    <div class="newsContainerItem">
                                            <a href="https://editorial.rottentomatoes.com/article/harley-quinn-will-lead-the-dceus-gotham-city-sirens-and-more-movie-news/" class="articleLink unstyled">
                                                <div class="newsPhoto" style="background-image:url('https://s3-us-west-2.amazonaws.com/flx-editorial-wordpress/wp-content/uploads/2016/12/16171626/Harley-Quinn-Ketchup.jpg')"></div>
                                                <div class="newsTitle" style="overflow: hidden; text-overflow: ellipsis; -webkit-box-orient: vertical; display: -webkit-box; -webkit-line-clamp: 2;">
                                                    Harley Quinn Will Lead the DCEU&#8217;s <em>Gotham City Sirens</em>, and More Movie News</div>
                                            </a>
                                        </div>
                                    </div>
                            </div>
                        </div>
                </div>
            </div>
        </li>
        <li class="h2 menuHeader center noSpacing" style="border-radius: 5px" id="header-tickets-showtimes">
            <a id="ticketingMenu" href="/showtimes/" class="menuHeader"> Tickets &amp; Showtimes </a>
        </li>
    </ul>
</div>
</div>
    <div class="trendingBar hidden-xs">
        <div class="fr">
            <ul id="trending_bar_social" class="list-inline social">
                <li class="header">Follow Us</li>
                <li><a id="header-twitter-social-link" class="unstyled trendingLink fontelloIcon icon-twitter white" href="http://twitter.com/rottentomatoes" target="_blank"></a></li>
                <li><a id="header-facebook-social-link" class="unstyled trendingLink fontelloIcon icon-facebook-squared white" href="http://www.facebook.com/rottentomatoes" target="_blank"></a></li>
                <li><a id="header-google-social-link" class="unstyled trendingLink fontelloIcon icon-gplus white" href="https://plus.google.com/+RottenTomatoes" target="_blank"></a></li>
                <li><a id="header-youtube-social-link" class="unstyled trendingLink fontelloIcon icon-youtube-play white" href="http://www.youtube.com/user/rottentomatoes" target="_blank"></a></li>
                <li><a id="header-tumblr-social-link" class="unstyled trendingLink fontelloIcon icon-tumblr white" href="http://rottentomatoes.tumblr.com/" target="_blank"></a></li>
            </ul>
            <div id="trending_bar_ad" style="display: none;"></div>
            <script>
                var mps=mps||{}; mps._queue=mps._queue||{}; mps._queue.gptloaded=mps._queue.gptloaded||[];
                mps._queue.gptloaded.push(function() {
                    if (mps.getResponsiveSet() !='0') { //DESKTOP or TABLET
                        mps.insertAd('#trending_bar_ad','trendinggraphic');
                    }
                });
            </script>
        </div>
        <ul class="list-inline trendingEl">
            <li class="header">Trending on RT</li>
            <li><a class="unstyled trendingLink" href="https://www.rottentomatoes.com/m/rogue_one_a_star_wars_story/?ref=tre1" > Rogue One Reviews</a></li>
            <li><a class="unstyled trendingLink" href="https://editorial.rottentomatoes.com/article/all-star-wars-movies-ranked-by-tomatometer/?ref=tre2" > Star Wars Ranked</a></li>
            <li><a class="unstyled trendingLink" href="https://editorial.rottentomatoes.com/gallery/24-best-movie-posters-of-2016/?ref=tre3" > 2016's Best Posters</a></li>
            <li><a class="unstyled trendingLink" href="https://editorial.rottentomatoes.com/article/best-movies-off-the-radar-2016/?ref=tre4" > Off The Radar Movies</a></li>
            </ul>
    </div>
</nav>
<div id="main_container" class="container ">
            <div id="super">
            <div id="super_movie_tv_ad" style="height:0px;"></div>
    <script>
        var mps=mps||{}; mps._queue=mps._queue||{}; mps._queue.gptloaded=mps._queue.gptloaded||[];
        mps._queue.gptloaded.push(function() {
            mps.insertAd('#super_movie_tv_ad','superdetail');
        });
    </script>

</div>

        <aside id="movieListColumn" class="col mob col-right hidden-xs">
            <div id="movies_sidebar">
    <nav id="main_movie_sidebar_content">
        <ul class="nav nav-tabs" role="tablist">
                <li role="presentation" class="in-theaters-tab ">
                <a href="#in-theaters" data-toggle="tab">
                    In <br/>Theaters
                </a>
            </li>
            <li role="presentation" class="on-dvd-tab active">
                <a href="#on-dvd" data-toggle="tab">
                    DVD &amp; Streaming
                </a>
            </li>
            <li role="presentation" class="on-tv-tab ">
                <a href="#on-tv" data-toggle="tab">
                    TV <br/> Shows
                </a>
            </li>
        </ul>
        <div class="tab-content" style="height:auto;">
            <section class="tab-pane fade " id="in-theaters">
                <h3>Opening</h3>
<table class="movie_list opening">
    <tr class="sidebarInTheaterOpening" class="">
    <td class="left_col">
        <a href="/m/rogue_one_a_star_wars_story">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">84%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/rogue_one_a_star_wars_story">Rogue One: A Star Wars Story</a>
    </td>
    <td class="right_col right">
        <a href="/m/rogue_one_a_star_wars_story">
                    Dec 16</a>
            </td>
</tr><tr class="sidebarInTheaterOpening" class="">
    <td class="left_col">
        <a href="/m/manchester_by_the_sea">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">97%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/manchester_by_the_sea">Manchester by the Sea</a>
    </td>
    <td class="right_col right">
        <a href="/m/manchester_by_the_sea">
                    Dec 16</a>
            </td>
</tr><tr class="sidebarInTheaterOpening" class="">
    <td class="left_col">
        <a href="/m/collateral_beauty">
            <span class="icon tiny rotten"></span>
                    <span class="tMeterScore">14%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/collateral_beauty">Collateral Beauty</a>
    </td>
    <td class="right_col right">
        <a href="/m/collateral_beauty">
                    Dec 16</a>
            </td>
</tr><tr class="sidebarInTheaterOpening" class="">
    <td class="left_col">
        <a href="/m/solace">
            <span class="icon tiny rotten"></span>
                    <span class="tMeterScore">23%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/solace">Solace</a>
    </td>
    <td class="right_col right">
        <a href="/m/solace">
                    Dec 16</a>
            </td>
</tr><tr class="sidebarInTheaterOpening" class="">
    <td class="left_col">
        <a href="/m/neruda_2016">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">95%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/neruda_2016">Neruda</a>
    </td>
    <td class="right_col right">
        <a href="/m/neruda_2016">
                    Dec 16</a>
            </td>
</tr></table>
<div class="showAll openingMore">
    <a class="unstyled articleLink" href="/browse/opening/">
        View All<span class="glyphicon glyphicon-menu-right" />
    </a>
</div>
<h3>Top Box Office</h3>
<table class="movie_list top_box_office">
    <tr class="sidebarInTheaterOpening" class="">
    <td class="left_col">
        <a href="/m/moana_2016">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">95%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/moana_2016">Moana</a>
    </td>
    <td class="right_col right">
        <a href="/m/moana_2016">
                    $18.6M
                </a>
            </td>
</tr><tr class="sidebarInTheaterOpening" class="">
    <td class="left_col">
        <a href="/m/office_christmas_party">
            <span class="icon tiny rotten"></span>
                    <span class="tMeterScore">43%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/office_christmas_party">Office Christmas Party</a>
    </td>
    <td class="right_col right">
        <a href="/m/office_christmas_party">
                    $16.9M
                </a>
            </td>
</tr><tr class="sidebarInTheaterOpening" class="">
    <td class="left_col">
        <a href="/m/fantastic_beasts_and_where_to_find_them">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">75%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/fantastic_beasts_and_where_to_find_them">Fantastic Beasts and Where to Find Them</a>
    </td>
    <td class="right_col right">
        <a href="/m/fantastic_beasts_and_where_to_find_them">
                    $10.5M
                </a>
            </td>
</tr><tr class="sidebarInTheaterOpening" class="">
    <td class="left_col">
        <a href="/m/arrival_2016">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">94%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/arrival_2016">Arrival</a>
    </td>
    <td class="right_col right">
        <a href="/m/arrival_2016">
                    $5.6M
                </a>
            </td>
</tr><tr class="sidebarInTheaterOpening" class="">
    <td class="left_col">
        <a href="/m/doctor_strange_2016">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">90%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/doctor_strange_2016">Doctor Strange</a>
    </td>
    <td class="right_col right">
        <a href="/m/doctor_strange_2016">
                    $4.6M
                </a>
            </td>
</tr><tr class="sidebarInTheaterOpening" class="">
    <td class="left_col">
        <a href="/m/allied">
            <span class="icon tiny fresh"></span>
                    <span class="tMeterScore">60%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/allied">Allied</a>
    </td>
    <td class="right_col right">
        <a href="/m/allied">
                    $4.0M
                </a>
            </td>
</tr><tr class="sidebarInTheaterOpening" class="">
    <td class="left_col">
        <a href="/m/nocturnal_animals">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">72%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/nocturnal_animals">Nocturnal Animals</a>
    </td>
    <td class="right_col right">
        <a href="/m/nocturnal_animals">
                    $3.2M
                </a>
            </td>
</tr><tr class="sidebarInTheaterOpening" class="">
    <td class="left_col">
        <a href="/m/manchester_by_the_sea">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">97%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/manchester_by_the_sea">Manchester by the Sea</a>
    </td>
    <td class="right_col right">
        <a href="/m/manchester_by_the_sea">
                    $3.2M
                </a>
            </td>
</tr><tr class="sidebarInTheaterOpening" class="">
    <td class="left_col">
        <a href="/m/trolls">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">76%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/trolls">Trolls</a>
    </td>
    <td class="right_col right">
        <a href="/m/trolls">
                    $3.1M
                </a>
            </td>
</tr><tr class="sidebarInTheaterOpening" class="">
    <td class="left_col">
        <a href="/m/hacksaw_ridge">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">87%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/hacksaw_ridge">Hacksaw Ridge</a>
    </td>
    <td class="right_col right">
        <a href="/m/hacksaw_ridge">
                    $2.3M
                </a>
            </td>
</tr></table>
<div class="showAll topBoxOfficeMore">
    <a class="unstyled articleLink" href="/browse/in-theaters/">
        View All<span class="glyphicon glyphicon-menu-right" />
    </a>
</div>

<h3>Coming Soon</h3>
<table class="movie_list comingSoon">
    <tr class="sidebarInTheaterOpening" class="">
    <td class="left_col">
        <a href="/m/assassins_creed">
            <span class="tMeterIcon tiny noRating">No Score Yet</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/assassins_creed">Assassin's Creed</a>
    </td>
    <td class="right_col right">
        <a href="/m/assassins_creed">
                    Dec 21</a>
            </td>
</tr><tr class="sidebarInTheaterOpening" class="">
    <td class="left_col">
        <a href="/m/passengers_2016">
            <span class="icon tiny rotten"></span>
                    <span class="tMeterScore">33%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/passengers_2016">Passengers</a>
    </td>
    <td class="right_col right">
        <a href="/m/passengers_2016">
                    Dec 21</a>
            </td>
</tr><tr class="sidebarInTheaterOpening" class="">
    <td class="left_col">
        <a href="/m/a_monster_calls">
            <span class="icon tiny fresh"></span>
                    <span class="tMeterScore">85%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/a_monster_calls">A Monster Calls</a>
    </td>
    <td class="right_col right">
        <a href="/m/a_monster_calls">
                    Dec 23</a>
            </td>
</tr><tr class="sidebarInTheaterOpening" class="">
    <td class="left_col">
        <a href="/m/sing_2016">
            <span class="icon tiny fresh"></span>
                    <span class="tMeterScore">71%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/sing_2016">Sing</a>
    </td>
    <td class="right_col right">
        <a href="/m/sing_2016">
                    Dec 21</a>
            </td>
</tr></table>
<div class="showAll comingSoonMore" style="margin-bottom:5px">
    <a class="unstyled articleLink" href="/browse/upcoming/">
        View All<span class="glyphicon glyphicon-menu-right" />
    </a>
</div></section>
            <section class="tab-pane fade active in" id="on-dvd">
                <h3>Top Rentals</h3>
<table class="movie_list top_rentals">
    <tr class="sidebarInTheaterOpening" class="sidebarDvdTopRentals">
    <td class="left_col">
        <a href="/m/suicide_squad_2016">
            <span class="icon tiny rotten"></span>
                    <span class="tMeterScore">26%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/suicide_squad_2016">Suicide Squad</a>
    </td>
    <td class="right_col right">
        </td>
</tr><tr class="sidebarInTheaterOpening" class="sidebarDvdTopRentals">
    <td class="left_col">
        <a href="/m/miss_peregrines_home_for_peculiar_children">
            <span class="icon tiny fresh"></span>
                    <span class="tMeterScore">63%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/miss_peregrines_home_for_peculiar_children">Miss Peregrine's Home for Peculiar Children</a>
    </td>
    <td class="right_col right">
        </td>
</tr><tr class="sidebarInTheaterOpening" class="sidebarDvdTopRentals">
    <td class="left_col">
        <a href="/m/ben_hur_2016">
            <span class="icon tiny rotten"></span>
                    <span class="tMeterScore">25%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/ben_hur_2016">Ben-Hur</a>
    </td>
    <td class="right_col right">
        </td>
</tr><tr class="sidebarInTheaterOpening" class="sidebarDvdTopRentals">
    <td class="left_col">
        <a href="/m/bridget_joness_baby_2016">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">77%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/bridget_joness_baby_2016">Bridget Jones's Baby</a>
    </td>
    <td class="right_col right">
        </td>
</tr><tr class="sidebarInTheaterOpening" class="sidebarDvdTopRentals">
    <td class="left_col">
        <a href="/m/florence_foster_jenkins_2016">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">87%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/florence_foster_jenkins_2016">Florence Foster Jenkins</a>
    </td>
    <td class="right_col right">
        </td>
</tr></table>
<div class="showAll topRentalsMore">
    <a href="/browse/dvd-top-rentals/" class="unstyled articleLink">
        View All<span class="glyphicon glyphicon-menu-right" />
    </a>
</div>


<h3>New On DVD This Week</h3>
<table class="movie_list new_release">
   <tr class="sidebarInTheaterOpening" class="sidebarDvdComingSoon">
    <td class="left_col">
        <a href="/m/the_magnificent_seven_2016">
            <span class="icon tiny fresh"></span>
                    <span class="tMeterScore">63%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/the_magnificent_seven_2016">The Magnificent Seven</a>
    </td>
    <td class="right_col right">
        </td>
</tr><tr class="sidebarInTheaterOpening" class="sidebarDvdComingSoon">
    <td class="left_col">
        <a href="/m/sully">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">85%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/sully">Sully</a>
    </td>
    <td class="right_col right">
        </td>
</tr><tr class="sidebarInTheaterOpening" class="sidebarDvdComingSoon">
    <td class="left_col">
        <a href="/m/storks">
            <span class="icon tiny fresh"></span>
                    <span class="tMeterScore">63%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/storks">Storks</a>
    </td>
    <td class="right_col right">
        </td>
</tr><tr class="sidebarInTheaterOpening" class="sidebarDvdComingSoon">
    <td class="left_col">
        <a href="/m/maximum_ride">
            <span class="tMeterIcon tiny noRating">No Score Yet</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/maximum_ride">Maximum Ride</a>
    </td>
    <td class="right_col right">
        </td>
</tr><tr class="sidebarInTheaterOpening" class="sidebarDvdComingSoon">
    <td class="left_col">
        <a href="/m/31">
            <span class="icon tiny rotten"></span>
                    <span class="tMeterScore">48%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="/m/31">31</a>
    </td>
    <td class="right_col right">
        </td>
</tr></table>
<div class="showAll newReleaseMore" style="margin-bottom:10px">
    <a href="/browse/dvd-new-releases/" class="unstyled articleLink">
        View All<span class="glyphicon glyphicon-menu-right" />
    </a>
</div>
</section>
            <section class="tab-pane fade " id="on-tv">
                <h3>New TV Episodes Tonight</h3>
    <table class="movie_list tv_list">
        <tr class="tv_show_tr tvList1">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/the_hollow_crown/s02">
            <span class="icon tiny fresh"></span>
                    <span class="tMeterScore">100%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/the_hollow_crown/s02">The Hollow Crown</a>
    </td>
</tr><tr class="tv_show_tr tvList1">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/eyewitness/s01">
            <span class="icon tiny fresh"></span>
                    <span class="tMeterScore">83%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/eyewitness/s01">Eyewitness</a>
    </td>
</tr><tr class="tv_show_tr tvList1">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/the_affair/s03">
            <span class="icon tiny fresh"></span>
                    <span class="tMeterScore">80%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/the_affair/s03">The Affair</a>
    </td>
</tr><tr class="tv_show_tr tvList1">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/berlin_station/s01">
            <span class="icon tiny fresh"></span>
                    <span class="tMeterScore">70%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/berlin_station/s01">Berlin Station</a>
    </td>
</tr><tr class="tv_show_tr tvList1">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/graves/s01">
            <span class="icon tiny rotten"></span>
                    <span class="tMeterScore">56%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/graves/s01">Graves</a>
    </td>
</tr></table>
    <div class="showAll tvList1More">
        <a href="/browse/tv-list-1/" class="unstyled articleLink">
            View All<span class="glyphicon glyphicon-menu-right" />
        </a>
    </div>
<h3>Most Popular TV on RT</h3>
    <table class="movie_list tv_list">
        <tr class="tv_show_tr tvList2">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/westworld/s01">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">89%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/westworld/s01">Westworld</a>
    </td>
</tr><tr class="tv_show_tr tvList2">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/insecure/s01">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">100%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/insecure/s01">Insecure</a>
    </td>
</tr><tr class="tv_show_tr tvList2">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/black_mirror/s03">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">93%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/black_mirror/s03">Black Mirror</a>
    </td>
</tr><tr class="tv_show_tr tvList2">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/people_of_earth/s01">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">92%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/people_of_earth/s01">People of Earth</a>
    </td>
</tr><tr class="tv_show_tr tvList2">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/vikings_2013/s04">
            <span class="icon tiny fresh"></span>
                    <span class="tMeterScore">100%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/vikings_2013/s04">Vikings</a>
    </td>
</tr></table>
    <div class="showAll tvList2More">
        <a href="/browse/tv-list-2/" class="unstyled articleLink">
            View All<span class="glyphicon glyphicon-menu-right" />
        </a>
    </div>
<h3>Certified Fresh TV</h3>
    <table class="movie_list tv_list">
        <tr class="tv_show_tr tvList3">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/chance/s01">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">78%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/chance/s01">Chance</a>
    </td>
</tr><tr class="tv_show_tr tvList3">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/the_crown/s01">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">90%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/the_crown/s01">The Crown</a>
    </td>
</tr><tr class="tv_show_tr tvList3">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/designated_survivor/s01">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">85%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/designated_survivor/s01">Designated Survivor</a>
    </td>
</tr><tr class="tv_show_tr tvList3">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/the_exorcist/s01">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">78%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/the_exorcist/s01">The Exorcist</a>
    </td>
</tr><tr class="tv_show_tr tvList3">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/full_frontal_with_samantha_bee/s01">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">100%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/full_frontal_with_samantha_bee/s01">Full Frontal With Samantha Bee</a>
    </td>
</tr><tr class="tv_show_tr tvList3">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/gilmore_girls/s08">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">88%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/gilmore_girls/s08">Gilmore Girls</a>
    </td>
</tr><tr class="tv_show_tr tvList3">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/goliath/s01">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">77%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/goliath/s01">Goliath</a>
    </td>
</tr><tr class="tv_show_tr tvList3">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/good_behavior/s01">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">79%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/good_behavior/s01">Good Behavior</a>
    </td>
</tr><tr class="tv_show_tr tvList3">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/good_place/s01">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">89%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/good_place/s01">The Good Place</a>
    </td>
</tr><tr class="tv_show_tr tvList3">
    <td class="left_col">
        <a href="https://www.rottentomatoes.com/tv/insecure/s01">
            <span class="icon tiny certified_fresh"></span>
                    <span class="tMeterScore">100%</span>
                </a>
    </td>
    <td class="middle_col">
        <a href="https://www.rottentomatoes.com/tv/insecure/s01">Insecure</a>
    </td>
</tr></table>
    <div class="showAll tvList3More" style="margin-bottom:10px">
        <a href="/browse/tv-list-3/" class="unstyled articleLink">
            View All<span class="glyphicon glyphicon-menu-right" />
        </a>
    </div>
</section>
        </div>
    </nav>
    <aside class='panel-rt' style="border-bottom:none">
        <div class='panel-body' style="padding:0px;">
            <aside id="medrec_top_ad" class="medrec_ad " style="width:300px"></aside>
    <script>
                var mps=mps||{}; mps._queue=mps._queue||{}; mps._queue.gptloaded=mps._queue.gptloaded||[];
                mps._queue.gptloaded.push(function() {
                    if (mps.getResponsiveSet() !='0') { //DESKTOP or TABLET
                        mps.insertAd('#medrec_top_ad','topmulti');
                    }
                });
            </script>
        </div>
    </aside>
</div><div id="sponsored_media_sidebar_ad" style="height:0"></div>
    <script>
        var mps=mps||{}; mps._queue=mps._queue||{}; mps._queue.gptloaded=mps._queue.gptloaded||[];
        mps._queue.gptloaded.push(function() {
            if (mps.getResponsiveSet() !='0') { //DESKTOP or TABLET
                mps.insertAd('#sponsored_media_sidebar_ad','featuredmedia_detail');
            }
        });
    </script>
</aside>

        <div id="mainColumn" class="col mob col-center-right col-full-xs">
            <div id="heroImageContainer" class="movie">
                    <a class="trailer_play_action_button"
                               data-hls-url="https://video.internetvideoarchive.net/video.m3u8?fmt=11&cmd=6&publishedid=768340&customerid=300120&e=1482278400&sub=RTO&h=d6c91962471414cbdababc35659eefee"
                               data-mp4-url="https://video.internetvideoarchive.net/video.mp4?fmt=4&cmd=6&publishedid=768340&customerid=300120&e=1482278400&sub=RTO&videokbrate=750&h=68f120b512c253d91a0e7a20cd3f81bf"
                               data-thumbnail="https://content.internetvideoarchive.com/content/photos/6768/438057_005.jpg"
                               data-video-id="11051981"
                               data-title="Inception">
                                <div class="heroImage movie" style="background-image:url('https://resizing.flixster.com/mBjdMPgKx7DghugpqxEYlnrEdUo=/740x290/v1.bjs4MjU3NTE7ajsxNzE5OTsxMjAwOzUzMzk7MzU1OQ')"></div>
                                <div class="playButton">
                                    <span class="glyphicon glyphicon-play-circle" />
                                    <div class="subtext">PLAY TRAILER</div>
                                </div>
                                <h1 class="title hidden-xs" data-type="title">
                                    Inception<span class="h3 year"> (2010)</span></h1>
                            </a>
                        </div>
            <div id="movie-admin-panel"></div>
<script type="text/template" id="adminPanelTemplate">
<@ if (roles['MOVIEEXTRA'] || roles['MOVIE'] || roles['ADMIN'] || roles['EDITORIAL'] || roles['TOMATAZOS']) { @>
    <div class="fr" style="padding:5px 5px 0 0;">770805418 - <a href="#" onclick="$('#adminMenu').toggle();">Admin Menu</a></div>
    <div id="adminMenu" style="display:none;">
        <section id="" class="panel panel-rt panel-box " >
    <h2 class="panel-heading">Admin Menu</h2>
    <div class="panel-body content_body">
        <ul class="col_p col_50">
                <li>Movie Id: 770805418</li>
                <li>Status: </li>
                <li>Embed Code: <br /><input type="text" size="40" onclick="this.select()" value="[tomatoscore]MovieId=770805418,size=tiny[/tomatoscore]" /></li>
                <li>Embed Video:<br /><input type="text" size="40" onclick="this.select()" value="[rtmaintrailer]MovieId=770805418[/rtmaintrailer]" /></li>
            </ul>
            <ul class="col_p col_50">
                <@ if (roles['MOVIEEXTRA'] || roles['MOVIE'] || roles['ADMIN']) { @>
                    <li class="action_icon"><a rel="nofollow" href="//admin.flixster.com/admin/movie-stats/770805418" target="_blank">Movie Stats</a></li>
                    <li class="action_icon"><a rel="nofollow" href="//admin.flixster.com/admin/movie/manage/770805418" target="_blank">Edit Movie Details</a></li>
                    <li class="action_icon"><a rel="nofollow" href="//admin.flixster.com/movie-facts/service/rt-loadquotes?renderpage=true&movieid=770805418&showall=true" target="_blank">Manage Quotes</a></li>
                    <li class="action_icon"><a rel="nofollow" href="//admin.flixster.com/admin/manage-characters?movie=770805418" target="_blank">Manage Characters</a></li>
                    <li class="action_icon"><a rel="nofollow" href="//admin.flixster.com/admin/trailers?movieId=770805418" target="_blank">Manage Trailers</a></li>
                    <li class="action_icon"><a rel="nofollow" href="//admin.flixster.com/admin/movie-history?movieId=770805418" target="_blank">History</a></li>
                    <li class="action_icon"><a rel="nofollow" href="//admin.flixster.com/admin/rt/manage-movie-images?oid=770805418&otype=movie" target="_blank">Manage Professional Images</a></li>
                <@ } @>
                <@ if (roles['EDITORIAL'] || roles['ADMIN']) { @>
                    <li class="action_icon"><a rel="nofollow" href="//admin.flixster.com/admin/movie/manage/770805418/editorial" target="_blank">Critics Consensus / Certified Fresh</a></li>
                <@ } @>
                <@ if (roles['EDITORIAL'] || roles['ADMIN'] || roles['TOMATAZOS']) { @>
                    <li class="action_icon"><a rel="nofollow" href="//admin.flixster.com/admin/critics/reviews/movie/770805418" target="_blank">Movie Review Manager</a></li>
                <@ } @>
            </ul>
        </div>
</section>
</div>
<@ } @>
</script>
<h1 id="movie-title" class="title clearfix visible-xs" data-type="title">
                Inception<span class="h3 year"> (2010)</span></h1>
            <div id="topSection">
                <div id="movie-image-section" class="col-sm-7 col-xs-9">
                    <div class="center">
                        <a id="poster_link"
                                   class="trailer_play_action_button"
                                   data-hls-url="https://video.internetvideoarchive.net/video.m3u8?fmt=11&cmd=6&publishedid=768340&customerid=300120&e=1482278400&sub=RTO&h=d6c91962471414cbdababc35659eefee"
                                   data-mp4-url="https://video.internetvideoarchive.net/video.mp4?fmt=4&cmd=6&publishedid=768340&customerid=300120&e=1482278400&sub=RTO&videokbrate=750&h=68f120b512c253d91a0e7a20cd3f81bf"
                                   data-title="Inception"
                                   data-video-id="11051981">
                                    <img src="https://resizing.flixster.com/-atCQf-07rD2G5wzS27yxDK813Y=/206x305/v1.bTsxMTE2NjcyNTtqOzE3Mjc0OzEyMDA7ODAwOzEyMDA" class="posterImage"><span class="play_button_big"></span>
                                </a>
                            <div id="critics-add-article" class="hidden-xs" style="display:none;">
                            <a href="/critics/tools/movie/?movieId=770805418">Add Article</a>
                        </div>
                    </div>
                </div>
                <div id="scorePanel" class="score_panel col-sm-17 col-xs-15" >
    <div class="col-sm-16 col-xs-12 tmeter-panel">
        <ul class="pull-right hidden-xs" role="tablist">
            <li class="active pull-left critics-score">
                <a href="#all-critics-numbers"
                   role="tab"
                   data-toggle="tab"
                   class="articleLink unstyled smaller gray superPageFontColor">
                    All Critics
                </a>
            </li>
            <li class="pull-left superPageFontColor">&nbsp;|&nbsp;</li>
            <li class="pull-left critics-score">
                <a href="#top-critics-numbers"
                   role="tab"
                   data-toggle="tab"
                   class="articleLink unstyled smaller gray superPageFontColor">
                    Top Critics
                </a>
            </li>
        </ul>
        <h3 class="scoreTitle superPageFontColor">
            TOMATOMETER <span class="glyphicon glyphicon-question-sign hidden-xs" data-toggle="tooltip" data-placement="bottom" title="The percentage of Approved Tomatometer Critics who have given this movie a positive review"></span>
        </h3>
        <div class="tab-content">
            <div id="all-critics-numbers" class="tab-pane active">
                <div class="row">
            <div class="col-sm-12">
                <div class="tomato-left">
                    <div class="critic-score meter">
                        <a href="#contentReviews" class="unstyled articleLink" id="tomato_meter_link">
                        <span class="meter-tomato icon big medium-xs certified_fresh pull-left"></span>
                            <span class="meter-value superPageFontColor"><span>86</span>%</span>
                        </a>
                        </div>
                    <div id="scoreStats" class="hidden-xs">
                            <div class="superPageFontColor">
                                <span class="subtle superPageFontColor">Average Rating: </span>
                                8.1/10
                                    </div>
                            <div class="superPageFontColor">
                                <span class="subtle superPageFontColor">Reviews Counted: </span><span>331</span>
                            </div>
                            <div class="superPageFontColor">
                                <span class="subtle superPageFontColor audience-info">Fresh: </span>
                                <span>285</span>
                            </div>
                            <div class="superPageFontColor">
                                <span class="subtle superPageFontColor audience-info">Rotten: </span>
                                <span>46</span>
                            </div>
                        </div>
                    </div>
            </div>
            <div class="col-sm-12 tomato-info hidden-xs" style="padding-left:0">
                <div class="progress">
                    <div class="progress-bar certified_fresh" style="width:86%;"></div>
                </div>
                <p class="critic_consensus superPageFontColor">
                        <span class="subtle superPageFontColor">Critics Consensus:</span>
                        Smart, innovative, and thrilling, <em>Inception</em> is that rare summer blockbuster that succeeds viscerally as well as intellectually.</p>
                </div>
        </div>
    </div>
            <div id="top-critics-numbers" class="tab-pane">
                <div class="row">
            <div class="col-sm-12">
                <div class="tomato-left">
                    <div class="critic-score meter">
                        <a href="#contentReviews" class="unstyled articleLink" id="tomato_meter_link">
                        <span class="meter-tomato icon big medium-xs certified_fresh pull-left"></span>
                            <span class="meter-value superPageFontColor"><span>85</span>%</span>
                        </a>
                        </div>
                    <div id="scoreStats" class="hidden-xs">
                            <div class="superPageFontColor">
                                <span class="subtle superPageFontColor">Average Rating: </span>
                                7.8/10
                                    </div>
                            <div class="superPageFontColor">
                                <span class="subtle superPageFontColor">Reviews Counted: </span><span>52</span>
                            </div>
                            <div class="superPageFontColor">
                                <span class="subtle superPageFontColor audience-info">Fresh: </span>
                                <span>44</span>
                            </div>
                            <div class="superPageFontColor">
                                <span class="subtle superPageFontColor audience-info">Rotten: </span>
                                <span>8</span>
                            </div>
                        </div>
                    </div>
            </div>
            <div class="col-sm-12 tomato-info hidden-xs" style="padding-left:0">
                <div class="progress">
                    <div class="progress-bar certified_fresh" style="width:85%;"></div>
                </div>
                <p class="critic_consensus superPageFontColor">
                        <span class="subtle superPageFontColor">Critics Consensus:</span>
                        Smart, innovative, and thrilling, <em>Inception</em> is that rare summer blockbuster that succeeds viscerally as well as intellectually.</p>
                </div>
        </div>
    </div>
        </div>
    </div>
    <div class="col-sm-8 col-xs-12 audience-panel">
        <h3 class="scoreTitle superPageFontColor">
     AUDIENCE SCORE
        <span class="glyphicon glyphicon-question-sign hidden-xs" rel="tooltip" data-toggle="tooltip" data-placement="bottom" title="The percentage of users who have rated this movie 3.5 stars or higher"/>
</h3>
<div class="audience-score meter">
    <a href="#audience_reviews" class="unstyled articleLink"><div class="meter media">
                    <div class="meter-tomato icon big medium-xs upright pull-left"></div>
                    <div class="media-body" style="line-height:36px">
                        <div class="meter-value">
                            <span class="superPageFontColor" style="vertical-align:top">91%</span>
                        </div>
                        <div class="smaller bold hidden-xs superPageFontColor" style="padding-left:5px;line-height:12px">liked it</div>
                    </div>
                </div>
            </a></div><div class="audience-info hidden-xs superPageFontColor">
    <div>
            <span class="subtle superPageFontColor">Average Rating:</span>
            4.2/5
                </div>
    <div>
        <span class="subtle superPageFontColor">User Ratings:</span>
        565,481</div>
</div></div>
    <div class="col-full-xs visible-xs clearfix">
        <p class="critic_consensus tomato-info noSpacing superPageFontColor">
            <span class="subtle superPageFontColor">Critic Consensus:</span>
            Smart, innovative, and thrilling, <em>Inception</em> is that rare summer blockbuster that succeeds viscerally as well as intellectually.</p>
    </div>
    <div id="tomatometer_sponsorship_ad" class="page_ad hidden-xs" style="margin-left:-10px"></div>
</div>
<script>
var mps=mps||{}; mps._queue=mps._queue||{}; mps._queue.gptloaded=mps._queue.gptloaded||[];
mps._queue.gptloaded.push(function() {
    if (mps.getResponsiveSet() !='0') { //DESKTOP or TABLET
        mps.insertAd('#tomatometer_sponsorship_ad','tomatometer');
    }
});
</script><div id="mobile-movie-image-section" class="pull-left col-full-xs visible-xs" style="text-align:center;"></div>
                <div id="affiliate_integration_button_ad" style="height:0px;display:none"></div>
<script>
    var mps=mps||{}; mps._queue=mps._queue||{}; mps._queue.gptloaded=mps._queue.gptloaded||[];
    mps._queue.gptloaded.push(function() {
        if (mps.getResponsiveSet() !='0') { //DESKTOP or TABLET
            mps.rt.insertlogo('#affiliate_integration_button_ad', 'ploc=affiliateintegrationbutton;');
        }
    });
</script>

<div id="rating-root"></div>
<script>
require(["jquery", "globals", "underscore", "https://staticv2-4.rottentomatoes.com/static/dist/app/controllers/RatingController.min.js", "bootstrap", "domReady!"],function($, RT, _, Rating){
    new Rating({ mediaId: 770805418, type: "movie" });
});
</script>
</div>
            <section id="movie-videos-panel" class="panel panel-rt panel-box " >
    <h2 class="panel-heading"><em>Inception</em> Videos</h2>
    <div class="panel-body content_body allow-overflow">
        <div id="videos-carousel-root"></div>
        <div class="clickForMore viewMoreVideos">
            <a class="unstyled articleLink pull-right" href="/m/inception/trailers/">
                <div>
                    View All Videos (13)<span class="glyphicon glyphicon-menu-right"></span>
                </div>
            </a>
        </div>
        <script>
            (function() {
                var videoClips = [{"id":"11106686","type":"videoClip","duration":144,"sourceId":"438057","source":"VDD","thumbUrl":"https://content.internetvideoarchive.com/content/photos/6379/768340_089.jpg","title":"Inception (Trailer 2)","clipType":"TRL","urls":{"mp4":"https://video.internetvideoarchive.net/video.mp4?fmt=4&cmd=6&publishedid=438057&customerid=300120&e=1482278400&sub=RTO&videokbrate=750&h=71859dc81e6737c03c9199d120585ba3","hls":"https://video.internetvideoarchive.net/video.m3u8?fmt=11&cmd=6&publishedid=438057&customerid=300120&e=1482278400&sub=RTO&h=3626f8658629be8143ebf4a952fb5035"}},{"id":"11051981","type":"videoClip","duration":77,"sourceId":"768340","source":"VDD","thumbUrl":"https://content.internetvideoarchive.com/content/photos/6768/438057_005.jpg","title":"Inception","clipType":"TRL","urls":{"mp4":"https://video.internetvideoarchive.net/video.mp4?fmt=4&cmd=6&publishedid=768340&customerid=300120&e=1482278400&sub=RTO&videokbrate=750&h=68f120b512c253d91a0e7a20cd3f81bf","hls":"https://video.internetvideoarchive.net/video.m3u8?fmt=11&cmd=6&publishedid=768340&customerid=300120&e=1482278400&sub=RTO&h=d6c91962471414cbdababc35659eefee"}},{"id":"11094949","type":"videoClip","duration":64,"sourceId":"492336","source":"VDD","thumbUrl":"https://content.internetvideoarchive.com/content/photos/6641/492336_016.jpg","title":"Inception (Trailer 1)","clipType":"TRL","urls":{"mp4":"https://video.internetvideoarchive.net/video.mp4?fmt=4&cmd=6&publishedid=492336&customerid=300120&e=1482278400&sub=RTO&videokbrate=750&h=6ad63df6e3b7468cfafd767dd7dfd8e7","hls":"https://video.internetvideoarchive.net/video.m3u8?fmt=11&cmd=6&publishedid=492336&customerid=300120&e=1482278400&sub=RTO&h=ab66762afe541b80ce3882597e20edae"}},{"id":"11130599","type":"videoClip","duration":154,"sourceId":"858349","source":"VDD","thumbUrl":"https://content.internetvideoarchive.com/content/photos/7140/858349_018.jpg","title":"Inception: Behind The Scenes Featurette","clipType":"TRL","urls":{"mp4":"https://video.internetvideoarchive.net/video.mp4?fmt=4&cmd=6&publishedid=858349&customerid=300120&e=1482278400&sub=RTO&videokbrate=750&h=b91109a8c2149f3d5cacad69cf54117f","hls":"https://video.internetvideoarchive.net/video.m3u8?fmt=11&cmd=6&publishedid=858349&customerid=300120&e=1482278400&sub=RTO&h=98230209a30300bf65c2e49de9316b89"}},{"id":"11117008","type":"videoClip","duration":74,"sourceId":"536245","source":"VDD","thumbUrl":"https://content.internetvideoarchive.com/content/photos/6865/536245_036.jpg","title":"Inception: Don't Be Afraid To Dream A Little Bigger","clipType":"TRL","urls":{"mp4":"https://video.internetvideoarchive.net/video.mp4?fmt=4&cmd=6&publishedid=536245&customerid=300120&e=1482278400&sub=RTO&videokbrate=750&h=c8476fa5f25731674686a9d350b626d5","hls":"https://video.internetvideoarchive.net/video.m3u8?fmt=11&cmd=6&publishedid=536245&customerid=300120&e=1482278400&sub=RTO&h=705fc88584d3a4d8a3c032f37cd277f7"}},{"id":"11117009","type":"videoClip","duration":86,"sourceId":"735984","source":"VDD","thumbUrl":"https://content.internetvideoarchive.com/content/photos/6865/735984_011.jpg","title":"Inception: This Is Your First Lesson Is Shared Dreaming","clipType":"TRL","urls":{"mp4":"https://video.internetvideoarchive.net/video.mp4?fmt=4&cmd=6&publishedid=735984&customerid=300120&e=1482278400&sub=RTO&videokbrate=750&h=14511be047fb43d3cda4084da7b1379e","hls":"https://video.internetvideoarchive.net/video.m3u8?fmt=11&cmd=6&publishedid=735984&customerid=300120&e=1482278400&sub=RTO&h=312b52a57867e6e06670258a602a55db"}},{"id":"11117010","type":"videoClip","duration":75,"sourceId":"348797","source":"VDD","thumbUrl":"https://content.internetvideoarchive.com/content/photos/6865/348797_008.jpg","title":"Inception: I Need An Architect","clipType":"TRL","urls":{"mp4":"https://video.internetvideoarchive.net/video.mp4?fmt=4&cmd=6&publishedid=348797&customerid=300120&e=1482278400&sub=RTO&videokbrate=750&h=4ce1a80307d6326570b90b833722a720","hls":"https://video.internetvideoarchive.net/video.m3u8?fmt=11&cmd=6&publishedid=348797&customerid=300120&e=1482278400&sub=RTO&h=d9a16fac48dbace7a3dc7c5c803286e6"}},{"id":"11117011","type":"videoClip","duration":57,"sourceId":"119712","source":"VDD","thumbUrl":"https://content.internetvideoarchive.com/content/photos/6865/119712_005.jpg","title":"Inception: I Am The Most Skilled Extractor","clipType":"TRL","urls":{"mp4":"https://video.internetvideoarchive.net/video.mp4?fmt=4&cmd=6&publishedid=119712&customerid=300120&e=1482278400&sub=RTO&videokbrate=750&h=915c8b401bd1013b37d7516ed43171ea","hls":"https://video.internetvideoarchive.net/video.m3u8?fmt=11&cmd=6&publishedid=119712&customerid=300120&e=1482278400&sub=RTO&h=ccadb927fc55b0b1a7cba7abe1f42e2c"}},{"id":"11117012","type":"videoClip","duration":32,"sourceId":"812900","source":"VDD","thumbUrl":"https://content.internetvideoarchive.com/content/photos/6843/812900_002.jpg","title":"Inception: The Beginning (Tv Spot)","clipType":"TRL","urls":{"mp4":"https://video.internetvideoarchive.net/video.mp4?fmt=4&cmd=6&publishedid=812900&customerid=300120&e=1482278400&sub=RTO&videokbrate=750&h=6fa527c3ace94987897f3ab0acd2b243","hls":"https://video.internetvideoarchive.net/video.m3u8?fmt=11&cmd=6&publishedid=812900&customerid=300120&e=1482278400&sub=RTO&h=490b3a3c75e803a7203c84a1706d75a6"}},{"id":"11117013","type":"videoClip","duration":31,"sourceId":"160713","source":"VDD","thumbUrl":"https://content.internetvideoarchive.com/content/photos/6843/160713_007.jpg","title":"Inception: Real 30 (Tv Spot)","clipType":"TRL","urls":{"mp4":"https://video.internetvideoarchive.net/video.mp4?fmt=4&cmd=6&publishedid=160713&customerid=300120&e=1482278400&sub=RTO&videokbrate=750&h=32bcd86e279dbefd71d04290c8856719","hls":"https://video.internetvideoarchive.net/video.m3u8?fmt=11&cmd=6&publishedid=160713&customerid=300120&e=1482278400&sub=RTO&h=dd3bb56cda6c421168ba39304d22e272"}},{"id":"11117014","type":"videoClip","duration":16,"sourceId":"347525","source":"VDD","thumbUrl":"https://content.internetvideoarchive.com/content/photos/6842/347525_002.jpg","title":"Inception: The Dream Is Real (Tv Spot)","clipType":"TRL","urls":{"mp4":"https://video.internetvideoarchive.net/video.mp4?fmt=4&cmd=6&publishedid=347525&customerid=300120&e=1482278400&sub=RTO&videokbrate=750&h=0cb8c57ce08bd33f0092c4821626d8ce","hls":"https://video.internetvideoarchive.net/video.m3u8?fmt=11&cmd=6&publishedid=347525&customerid=300120&e=1482278400&sub=RTO&h=fcd4008fc8200663ed3fe868fe388c0e"}},{"id":"11117015","type":"videoClip","duration":31,"sourceId":"201487","source":"VDD","thumbUrl":"https://content.internetvideoarchive.com/content/photos/6842/201487_005.jpg","title":"Inception: Chance (Tv Spot)","clipType":"TRL","urls":{"mp4":"https://video.internetvideoarchive.net/video.mp4?fmt=4&cmd=6&publishedid=201487&customerid=300120&e=1482278400&sub=RTO&videokbrate=750&h=904ea89f99891a4a56cc6a6f5b36d7a5","hls":"https://video.internetvideoarchive.net/video.m3u8?fmt=11&cmd=6&publishedid=201487&customerid=300120&e=1482278400&sub=RTO&h=ba741c7bbee230605633da2864d591f0"}},{"id":"11094950","type":"videoClip","duration":59,"sourceId":"621868","source":"VDD","thumbUrl":"https://content.internetvideoarchive.com/content/photos/6384/26816230_.jpg","title":"Inception (Uk)","clipType":"TRL","urls":{"mp4":"https://video.internetvideoarchive.net/video.mp4?fmt=4&cmd=6&publishedid=621868&customerid=300120&e=1482278400&sub=RTO&videokbrate=750&h=058aa3ec18ab990b0bd24362f471e1b0","hls":"https://video.internetvideoarchive.net/video.m3u8?fmt=11&cmd=6&publishedid=621868&customerid=300120&e=1482278400&sub=RTO&h=8452e1dd7467ad049c23236dd8c6bbe9"}}];
                require(["videos-carousel"], function(mount) {
                    mount(document.getElementById('videos-carousel-root'), videoClips, { slidesToShow: 3, slidesToScroll: 3 - 1}, { slidesToShow: 4, slidesToScroll: 4});
                });
            })();
        </script>
    </div>
</section>
<section id="movie-photos-panel" class="panel panel-rt panel-box " >
    <h2 class="panel-heading"><em>Inception</em> Photos</h2>
    <div class="panel-body content_body allow-overflow">
        <div id="photos-carousel-root"></div>
        <div class="clickForMore viewMorePhotos">
            <a class="unstyled articleLink pull-right" href="/m/inception/pictures/">
                <div>
                    View All Photos (77)<span class="glyphicon glyphicon-menu-right"></span>
                </div>
            </a>
        </div>
        <script>
            (function() {
                var photos = [{"id":"h-120","type":"image","width":441,"format":"JPG","thumborId":"v1.aDsxMjA7ajsxNzE5MDsxMjAwOzQ0MTs2NTI","height":652,"urls":{"thumbnail":"https://resizing.flixster.com/hkMcil0plRZtKoO1siBG9i5nd28=/300x300/v1.aDsxMjA7ajsxNzE5MDsxMjAwOzQ0MTs2NTI","fullscreen":"https://resizing.flixster.com/NYZN6xIVNJ-SnQah653UjR8nzX8=/fit-in/1152x864/v1.aDsxMjA7ajsxNzE5MDsxMjAwOzQ0MTs2NTI"}},{"id":"h-52528","type":"image","width":652,"format":"JPG","thumborId":"v1.aDs1MjUyODtqOzE3MTkwOzEyMDA7NjUyOzQzNQ","height":435,"urls":{"thumbnail":"https://resizing.flixster.com/dOWKFgcjE_Htved6_hnIwzj-O2I=/300x300/v1.aDs1MjUyODtqOzE3MTkwOzEyMDA7NjUyOzQzNQ","fullscreen":"https://resizing.flixster.com/hhvQT8LcoMaZm_33hM5Dp_EAIZ4=/fit-in/1152x864/v1.aDs1MjUyODtqOzE3MTkwOzEyMDA7NjUyOzQzNQ"}},{"id":"h-53077","type":"image","width":403,"format":"JPG","thumborId":"v1.aDs1MzA3NztqOzE3MTkwOzEyMDA7NDAzOzY1Mg","height":652,"urls":{"thumbnail":"https://resizing.flixster.com/8AyeDG0oSqWDRLaD-ApzfrUhOv8=/300x300/v1.aDs1MzA3NztqOzE3MTkwOzEyMDA7NDAzOzY1Mg","fullscreen":"https://resizing.flixster.com/4-qb-pfNg6OLREenZB8IMmDeEJA=/fit-in/1152x864/v1.aDs1MzA3NztqOzE3MTkwOzEyMDA7NDAzOzY1Mg"}},{"id":"h-65656","type":"image","width":440,"format":"JPG","thumborId":"v1.aDs2NTY1NjtqOzE3MTkwOzEyMDA7NDQwOzY1Mg","height":652,"urls":{"thumbnail":"https://resizing.flixster.com/S94XgAGLhVZyxJJU_3xmF8D52IY=/300x300/v1.aDs2NTY1NjtqOzE3MTkwOzEyMDA7NDQwOzY1Mg","fullscreen":"https://resizing.flixster.com/qMuO_puZukW4NEhCOv-bqNibV6Y=/fit-in/1152x864/v1.aDs2NTY1NjtqOzE3MTkwOzEyMDA7NDQwOzY1Mg"}},{"id":"h-65693","type":"image","width":652,"format":"JPG","thumborId":"v1.aDs2NTY5MztqOzE3MTkwOzEyMDA7NjUyOzQzNQ","height":435,"urls":{"thumbnail":"https://resizing.flixster.com/7sRi7vUCmGJywQA-2z4uawe6THE=/300x300/v1.aDs2NTY5MztqOzE3MTkwOzEyMDA7NjUyOzQzNQ","fullscreen":"https://resizing.flixster.com/spO4gpXg4w5xu1kjgQzANQ_XqwM=/fit-in/1152x864/v1.aDs2NTY5MztqOzE3MTkwOzEyMDA7NjUyOzQzNQ"}},{"id":"h-65695","type":"image","width":652,"format":"JPG","thumborId":"v1.aDs2NTY5NTtqOzE3MTkwOzEyMDA7NjUyOzQzNQ","height":435,"urls":{"thumbnail":"https://resizing.flixster.com/-FjSyy7QKQeaniy2n6ZtdFtF5pI=/300x300/v1.aDs2NTY5NTtqOzE3MTkwOzEyMDA7NjUyOzQzNQ","fullscreen":"https://resizing.flixster.com/FykhKWm1AkwHAW7I069pgoV6scA=/fit-in/1152x864/v1.aDs2NTY5NTtqOzE3MTkwOzEyMDA7NjUyOzQzNQ"}},{"id":"h-65698","type":"image","width":441,"format":"JPG","thumborId":"v1.aDs2NTY5ODtqOzE3MTkwOzEyMDA7NDQxOzY1Mg","height":652,"urls":{"thumbnail":"https://resizing.flixster.com/KCv2Dg5llwzhQCxJn8gkG1uPMFk=/300x300/v1.aDs2NTY5ODtqOzE3MTkwOzEyMDA7NDQxOzY1Mg","fullscreen":"https://resizing.flixster.com/9BWcmGrWJ-fywZ2UuxaqTwBIROM=/fit-in/1152x864/v1.aDs2NTY5ODtqOzE3MTkwOzEyMDA7NDQxOzY1Mg"}},{"id":"h-66427","type":"image","width":440,"format":"JPG","thumborId":"v1.aDs2NjQyNztqOzE3MTkwOzEyMDA7NDQwOzY1Mg","height":652,"urls":{"thumbnail":"https://resizing.flixster.com/cnHPMw1e7KfPcpS9PPU3mro-d-Q=/300x300/v1.aDs2NjQyNztqOzE3MTkwOzEyMDA7NDQwOzY1Mg","fullscreen":"https://resizing.flixster.com/OyNkoeGUtbnipEdLiJLUaAT-B5U=/fit-in/1152x864/v1.aDs2NjQyNztqOzE3MTkwOzEyMDA7NDQwOzY1Mg"}},{"id":"h-66429","type":"image","width":440,"format":"JPG","thumborId":"v1.aDs2NjQyOTtqOzE3MTkwOzEyMDA7NDQwOzY1Mg","height":652,"urls":{"thumbnail":"https://resizing.flixster.com/GCYyNzFJ8a5jK2m29wvIfKxLnf4=/300x300/v1.aDs2NjQyOTtqOzE3MTkwOzEyMDA7NDQwOzY1Mg","fullscreen":"https://resizing.flixster.com/s7QrZECb2qymuQbpcgOaOdhUNS4=/fit-in/1152x864/v1.aDs2NjQyOTtqOzE3MTkwOzEyMDA7NDQwOzY1Mg"}},{"id":"h-66430","type":"image","width":440,"format":"JPG","thumborId":"v1.aDs2NjQzMDtqOzE3MTkwOzEyMDA7NDQwOzY1Mg","height":652,"urls":{"thumbnail":"https://resizing.flixster.com/9IJ6RX1Wl9f3YL2JxLUfcl5Qx_Y=/300x300/v1.aDs2NjQzMDtqOzE3MTkwOzEyMDA7NDQwOzY1Mg","fullscreen":"https://resizing.flixster.com/fdlEcWf-L5Kc0tL0jgF5u86Ku2M=/fit-in/1152x864/v1.aDs2NjQzMDtqOzE3MTkwOzEyMDA7NDQwOzY1Mg"}},{"id":"h-66431","type":"image","width":440,"format":"JPG","thumborId":"v1.aDs2NjQzMTtqOzE3MTkwOzEyMDA7NDQwOzY1Mg","height":652,"urls":{"thumbnail":"https://resizing.flixster.com/fIyI-zKX4mWZuDKdjGcn0stPk84=/300x300/v1.aDs2NjQzMTtqOzE3MTkwOzEyMDA7NDQwOzY1Mg","fullscreen":"https://resizing.flixster.com/FDYk2XD_4fmS1WluwxeqZOydYcw=/fit-in/1152x864/v1.aDs2NjQzMTtqOzE3MTkwOzEyMDA7NDQwOzY1Mg"}},{"id":"h-66432","type":"image","width":440,"format":"JPG","thumborId":"v1.aDs2NjQzMjtqOzE3MTkwOzEyMDA7NDQwOzY1Mg","height":652,"urls":{"thumbnail":"https://resizing.flixster.com/vE1rDzn4kjTyho1xr2OpR45Ki_Y=/300x300/v1.aDs2NjQzMjtqOzE3MTkwOzEyMDA7NDQwOzY1Mg","fullscreen":"https://resizing.flixster.com/PbXFOwfGIUt4vzk_LMCMWbvlw7w=/fit-in/1152x864/v1.aDs2NjQzMjtqOzE3MTkwOzEyMDA7NDQwOzY1Mg"}},{"id":"h-66433","type":"image","width":440,"format":"JPG","thumborId":"v1.aDs2NjQzMztqOzE3MTkwOzEyMDA7NDQwOzY1Mg","height":652,"urls":{"thumbnail":"https://resizing.flixster.com/Qhg9zdVs23f5DnBImkWzxGfZ9uk=/300x300/v1.aDs2NjQzMztqOzE3MTkwOzEyMDA7NDQwOzY1Mg","fullscreen":"https://resizing.flixster.com/6H8u7VTJ5lehguOZ1G9Z2Sn-HH8=/fit-in/1152x864/v1.aDs2NjQzMztqOzE3MTkwOzEyMDA7NDQwOzY1Mg"}},{"id":"h-66435","type":"image","width":440,"format":"JPG","thumborId":"v1.aDs2NjQzNTtqOzE3MTkwOzEyMDA7NDQwOzY1Mg","height":652,"urls":{"thumbnail":"https://resizing.flixster.com/WPMT7AzmHg4I_stqZ2Ojg-fA3yo=/300x300/v1.aDs2NjQzNTtqOzE3MTkwOzEyMDA7NDQwOzY1Mg","fullscreen":"https://resizing.flixster.com/k5wQKZQJVexpRpz-aKZg8MZhp8A=/fit-in/1152x864/v1.aDs2NjQzNTtqOzE3MTkwOzEyMDA7NDQwOzY1Mg"}},{"id":"h-66845","type":"image","width":652,"format":"JPG","thumborId":"v1.aDs2Njg0NTtqOzE3MTkwOzEyMDA7NjUyOzQzNQ","height":435,"urls":{"thumbnail":"https://resizing.flixster.com/3VhI8RVKQGPp-FmxAR6o2BbIFlM=/300x300/v1.aDs2Njg0NTtqOzE3MTkwOzEyMDA7NjUyOzQzNQ","fullscreen":"https://resizing.flixster.com/35lJSVsXegkIYmo8rW0JvnAFLmQ=/fit-in/1152x864/v1.aDs2Njg0NTtqOzE3MTkwOzEyMDA7NjUyOzQzNQ"}},{"id":"h-66846","type":"image","width":652,"format":"JPG","thumborId":"v1.aDs2Njg0NjtqOzE3MTkwOzEyMDA7NjUyOzQzNQ","height":435,"urls":{"thumbnail":"https://resizing.flixster.com/zEBMWryuALy36dnp1L1-wNliYfY=/300x300/v1.aDs2Njg0NjtqOzE3MTkwOzEyMDA7NjUyOzQzNQ","fullscreen":"https://resizing.flixster.com/GaA_K9PNkhVfZ5CuqWX7CJ0bpp0=/fit-in/1152x864/v1.aDs2Njg0NjtqOzE3MTkwOzEyMDA7NjUyOzQzNQ"}},{"id":"h-66847","type":"image","width":3650,"format":"JPG","thumborId":"v1.aDs2Njg0NztqOzE3MTkwOzEyMDA7MzY1MDsyNDMz","height":2433,"urls":{"thumbnail":"https://resizing.flixster.com/BUhfn6M9dq3E78eJQYrPzYHHppw=/300x300/v1.aDs2Njg0NztqOzE3MTkwOzEyMDA7MzY1MDsyNDMz","fullscreen":"https://resizing.flixster.com/usBaJDcaMSz6ckupjpwcNSbrAZs=/fit-in/1152x864/v1.aDs2Njg0NztqOzE3MTkwOzEyMDA7MzY1MDsyNDMz"}},{"id":"h-67227","type":"image","width":652,"format":"JPG","thumborId":"v1.aDs2NzIyNztqOzE3MTkwOzEyMDA7NjUyOzQzNQ","height":435,"urls":{"thumbnail":"https://resizing.flixster.com/ZaRRhRp2gW1_Z1pE0qQt_6kC0II=/300x300/v1.aDs2NzIyNztqOzE3MTkwOzEyMDA7NjUyOzQzNQ","fullscreen":"https://resizing.flixster.com/le1nlHghEN5QVCP98IR0NVA4wm8=/fit-in/1152x864/v1.aDs2NzIyNztqOzE3MTkwOzEyMDA7NjUyOzQzNQ"}},{"id":"h-67229","type":"image","width":652,"format":"JPG","thumborId":"v1.aDs2NzIyOTtqOzE3MTkwOzEyMDA7NjUyOzQzNQ","height":435,"urls":{"thumbnail":"https://resizing.flixster.com/biMRQd0SvqlwDaJyhoAXGhxppBM=/300x300/v1.aDs2NzIyOTtqOzE3MTkwOzEyMDA7NjUyOzQzNQ","fullscreen":"https://resizing.flixster.com/XalRHFKzbJMRuJn7R7DRVB0InzI=/fit-in/1152x864/v1.aDs2NzIyOTtqOzE3MTkwOzEyMDA7NjUyOzQzNQ"}},{"id":"h-67228","type":"image","width":652,"format":"JPG","thumborId":"v1.aDs2NzIyODtqOzE3MTkwOzEyMDA7NjUyOzQzNQ","height":435,"urls":{"thumbnail":"https://resizing.flixster.com/AAM9mTu6tsogiVWJl8uH3ggNOVs=/300x300/v1.aDs2NzIyODtqOzE3MTkwOzEyMDA7NjUyOzQzNQ","fullscreen":"https://resizing.flixster.com/Mnh9V-Lr3OdOqoAKs7gUu-HgFlc=/fit-in/1152x864/v1.aDs2NzIyODtqOzE3MTkwOzEyMDA7NjUyOzQzNQ"}}];
                require(["photos-carousel"], function(mount) {
                    mount(document.getElementById('photos-carousel-root'), photos, { slidesToShow: 3, slidesToScroll: 3 - 1}, { slidesToShow: 4, slidesToScroll: 4});
                });
            })();
        </script>
    </div>
</section>
<aside class="str-ad">
                <div class="visible-xs">
                    <div id="sharethrough_top_ad"></div>
    <script>
        var mps=mps||{}; mps._queue=mps._queue||{}; mps._queue.gptloaded=mps._queue.gptloaded||[];
        mps._queue.gptloaded.push(function() {
            if (mps.getResponsiveSet() =='0') { //MOBILE
                mps.insertAd('#sharethrough_top_ad','sharethrough','strnativekey=b9QEvHRnA3pDEDZ6CpgtS2vx;pos=top;');
            }
        });
    </script>
</div>
            </aside>
            <section class="panel panel-rt panel-box movie_info media">
                <aside class="pull-right">
                        <div id="outbrainTopMobAd" class="hidden-xs"></div>
                </aside>
                <div class="media-body">
                    <h2 class="panel-heading">Movie Info</h2>
                    <div class="panel-body content_body">
                        <div id="movieSynopsis" class="movie_synopsis clamp clamp-6" style="clear:both">
    Visionary filmmaker Christopher Nolan (Memento, The Dark Knight) writes and directs this psychological sci-fi action film about a thief who possesses the power to enter into the dreams of others. Dom Cobb (Leonardo DiCaprio) doesn't steal things, he steals ideas. By projecting himself deep into the subconscious of his targets, he can glean information that even the best computer hackers can't get to. In the world of corporate espionage, Cobb is the ultimate weapon. But even weapons have their weakness, and when Cobb loses everything, he's forced to embark on one final mission in a desperate quest for redemption. This time, Cobb won't be harvesting an idea, but sowing one. Should he and his team of specialists succeed, they will have discovered a new frontier in the art of psychic espionage. They've planned everything to perfection, and they have all the tools to get the job done. Their mission is complicated, however, by the sudden appearance of a malevolent foe that seems to know exactly what they're up to, and precisely how to stop them. ~ Jason Buchanan, Rovi</div>
<ul class="info">
    <li class="meta-row clearfix">
            <div class="meta-label subtle">Rating: </div>
            <div class="meta-value">PG-13 (for sequences of violence and action throughout)</div>
        </li>
    <li class="meta-row clearfix">
            <div class="meta-label subtle">Genre: </div>
            <div class="meta-value">
                <a href="/browse/opening/?genres=1">
                        Action & Adventure</a>, <a href="/browse/opening/?genres=9">
                        Drama</a>, <a href="/browse/opening/?genres=13">
                        Mystery & Suspense</a>, <a href="/browse/opening/?genres=14">
                        Science Fiction & Fantasy</a></div>
        </li>
    <li class="meta-row clearfix">
            <div class="meta-label subtle">Directed By: </div>
            <div class="meta-value">
                <a href="/celebrity/christopher_nolan">Christopher Nolan</a></div>
        </li>
    <li class="meta-row clearfix">
            <div class="meta-label subtle">Written By: </div>
            <div class="meta-value">
                <a href="/celebrity/christopher_nolan">Christopher Nolan</a></div>
        </li>
    <li class="meta-row clearfix">
            <div class="meta-label subtle">In Theaters: </div>
            <div class="meta-value">
                <time datetime="2010-07-15T17:00:00-07:00">Jul 16, 2010</time>
                <span style="text-transform:capitalize">&nbsp;wide</span>
            </div>
        </li>
    <li class="meta-row clearfix">
            <div class="meta-label subtle">On DVD: </div>
            <div class="meta-value">
                <time datetime="2010-12-06T16:00:00-08:00">Dec 7, 2010</time>
            </div>
        </li>
    <li class="meta-row clearfix">
            <div class="meta-label subtle">Box Office: </div>
            <div class="meta-value">$292,568,851.00</div> </li>
    <li class="meta-row clearfix">
            <div class="meta-label subtle">Runtime: </div>
            <div class="meta-value">
                <time datetime="P148M">
                    148 minutes
                </time>
            </div>
        </li>
    <li class="meta-row clearfix">
        <div class="meta-label subtle">Studio: </div>
        <div class="meta-value">
            <a href="http://inceptionmovie.warnerbros.com/" target="movie-studio">Warner Bros. Pictures</a>
                </div>
    </ul>
</div>
                </div>
            </section>
            <section id="watch-it-now" class="panel panel-rt panel-box " >
    <h2 class="panel-heading">Watch it now</h2>
    <div class="panel-body content_body">
        <div class="movie_links">
            <a target="blank" onclick="trackAffiliateEvent('amazon')" href="http://www.amazon.com/gp/product/B0047WJ11G/ref=atv_feed_catalog?tag=rottetomao_aiv_mv-20">
                        <div id="amazonAffiliates" class="col-sm-6 col-xs-8 affiliates isNotPrime">
                            <div class="logo">
                                <div class="amazon"></div>
                            </div>
                            <div class="price-col">
                                Watch now
                            </div>
                        </div>
                    </a>
                <a target="blank" href="https://www.fandangonow.com/details/1MV7d0202acb8b1af3dd4807f9977c1204e">
                    <div id="FandangoNow" class="col-sm-6 col-xs-8 affiliates">
                        <div class="logo">
                            <div class="fandangoNow"></div>
                        </div>
                        <div class="price-col">
                            Watch now
                        </div>
                    </div>
                </a>
            <a target="blank" onclick="trackAffiliateEvent('vudu')" href="http://www.vudu.com/movies/#!content/182168/Inception">
                    <div id="vuduAffiliates" class="col-sm-6 col-xs-8 affiliates">
                        <div class="logo">
                            <div class="vudu"></div>
                        </div>
                        <div class="price-col">
                            Watch now
                        </div>
                    </div>
                </a>
            </div>
    </div>
</section>
<script>
function trackAffiliateEvent(affiliate) {
    if ("Krux" in window) {
        //track affiliate event for Krux
        var affiliateCode;
        switch(affiliate) {
            case "flixster":
                affiliateCode = 'Jeq4X1vM';
                break;
            case "vudu":
                affiliateCode = 'Jeq4QIYQ';
                break;
            case "target":
                affiliateCode = 'Jeq4h9Us';
                break;
            case "amazon":
                affiliateCode = 'Jeq4Nhvx';
                break;
            case "itunes":
                affiliateCode = 'Jeq3zLy7';
                break;
            case "netflix":
                affiliateCode = 'Jeq4B6OX';
                break;
        }
        Krux('admEvent',affiliateCode,{});
    }
}
</script><section id="recommendation" class="panel panel-rt panel-box " style="visibility:hidden;height:0">
    <h2 class="panel-heading">People Who Like this movie also like</h2>
    <div class="panel-body content_body">
        <div class="recommendationContainer"></div>
            </div>
</section>
<div class="centered">
                <aside id="medrec_mobile_mob_top_ad" class="medrec_ad visible-xs center mobile-medrec" style="width:300px"></aside>
    <script>
                var mps=mps||{}; mps._queue=mps._queue||{}; mps._queue.gptloaded=mps._queue.gptloaded||[];
                mps._queue.gptloaded.push(function() {
                    if (mps.getResponsiveSet() =='0') { //MOBILE
                        mps.insertAd('#medrec_mobile_mob_top_ad','mboxadone');
                    }
                });
            </script>
        </div>
            <section id="" class="panel panel-rt panel-box " >
    <h2 class="panel-heading">Cast</h2>
    <div class="panel-body content_body">
        <div class="castSection ">
        <div class="cast-item media inlineBlock ">
    <a href="/celebrity/leonardo_di_caprio" class="pull-left">
        <img src="https://resizing.flixster.com/iC1a5m49_-o4KzqZ3B-tG2cQh30=/50x50/v1.cjsxOTQyNTtqOzE3MTkwOzEyMDA7NDU0OzY1Mg" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/leonardo_di_caprio" class="unstyled articleLink">
            <span title="Leonardo DiCaprio">
                Leonardo DiCaprio</span>
        </a>
        <span class="characters subtle smaller" title="Cobb"><br/>as Cobb</span>
        </div>
</div>
<div class="cast-item media inlineBlock ">
    <a href="/celebrity/joseph_gordonlevitt" class="pull-left">
        <img src="https://resizing.flixster.com/G87VL0XMknWVw8RhXbo_udCGzQE=/50x50/v1.bjs3OTIyNzk7ajsxNzE5OTsxMjAwOzg1MTsxMjgw" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/joseph_gordonlevitt" class="unstyled articleLink">
            <span title="Joseph Gordon-Levitt">
                Joseph Gordon-Levitt</span>
        </a>
        <span class="characters subtle smaller" title="Arthur"><br/>as Arthur</span>
        </div>
</div>
<div class="cast-item media inlineBlock ">
    <a href="/celebrity/ellen_page" class="pull-left">
        <img src="https://resizing.flixster.com/Y2u5Nj3SuTacR-Vdb9LCsfzVFZY=/50x50/v1.cjs0MDg5NztqOzE3MTkwOzEyMDA7Mjc1OzIzMA" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/ellen_page" class="unstyled articleLink">
            <span title="Ellen Page">
                Ellen Page</span>
        </a>
        <span class="characters subtle smaller" title="Ariadne"><br/>as Ariadne</span>
        </div>
</div>
<div class="cast-item media inlineBlock ">
    <a href="/celebrity/tom_hardy" class="pull-left">
        <img src="https://resizing.flixster.com/VpdZ5DB4bWwKrUzHRdEj5X5wB8w=/50x50/v1.cjs0NTQ5NDtqOzE3MTkwOzEyMDA7MjIwOzE5Ng" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/tom_hardy" class="unstyled articleLink">
            <span title="Tom Hardy">
                Tom Hardy</span>
        </a>
        <span class="characters subtle smaller" title="Eames"><br/>as Eames</span>
        </div>
</div>
<div class="cast-item media inlineBlock ">
    <a href="/celebrity/ken_watanabe" class="pull-left">
        <img src="https://resizing.flixster.com/LBwsbU3HcgR3xKg17ZmBdNVAqXQ=/50x50/v1.cjs0MDQ4NztqOzE3MTkwOzEyMDA7Mjc1OzIzMA" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/ken_watanabe" class="unstyled articleLink">
            <span title="Ken Watanabe">
                Ken Watanabe</span>
        </a>
        <span class="characters subtle smaller" title="Saito"><br/>as Saito</span>
        </div>
</div>
<div class="cast-item media inlineBlock ">
    <a href="/celebrity/dileep-rao" class="pull-left">
        <img src="https://resizing.flixster.com/uMZVWk57q49lhrbmFO6rkaAegAQ=/50x50/v1.bjs4NjQwODtqOzE3MTkxOzEyMDA7MjE2MDsxNjIw" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/dileep-rao" class="unstyled articleLink">
            <span title="Dileep Rao">
                Dileep Rao</span>
        </a>
        <span class="characters subtle smaller" title="Yusuf"><br/>as Yusuf</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/cillian_murphy" class="pull-left">
        <img src="https://resizing.flixster.com/dvLJDwt8hm5YXqhDYpBoCZ4s36I=/50x50/v1.cDsxMTE4NDkwODtqOzE3Mjc0OzEyMDA7MjczOzM4OQ" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/cillian_murphy" class="unstyled articleLink">
            <span title="Cillian Murphy">
                Cillian Murphy</span>
        </a>
        <span class="characters subtle smaller" title="Robert Fischer Jr."><br/>as Robert Fischer Jr.</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/tom_berenger" class="pull-left">
        <img src="https://resizing.flixster.com/o69q6pdXm4CNMsqW3-HbQ9VRV7Y=/50x50/v1.cjsxNzU1NztqOzE3MTkwOzEyMDA7NDM1OzY1Mg" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/tom_berenger" class="unstyled articleLink">
            <span title="Tom Berenger">
                Tom Berenger</span>
        </a>
        <span class="characters subtle smaller" title="Browning"><br/>as Browning</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/marion_cotillard" class="pull-left">
        <img src="https://resizing.flixster.com/t2C483sLe0KWQAOSo5JHyVg-Oho=/50x50/v1.cjs0MDY4NztqOzE3MTkwOzEyMDA7Mjc1OzIzMA" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/marion_cotillard" class="unstyled articleLink">
            <span title="Marion Cotillard">
                Marion Cotillard</span>
        </a>
        <span class="characters subtle smaller" title="Mal"><br/>as Mal</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/pete_postlethwaite" class="pull-left">
        <img src="https://resizing.flixster.com/oCatSkWKmX6g3Z27Rxeck8SmHqY=/50x50/v1.bjs3OTkzMjk7ajsxNzE5OTsxMjAwOzEyODA7MTkyMA" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/pete_postlethwaite" class="unstyled articleLink">
            <span title="Pete Postlethwaite">
                Pete Postlethwaite</span>
        </a>
        <span class="characters subtle smaller" title="Maurice Fischer"><br/>as Maurice Fischer</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/michael_caine" class="pull-left">
        <img src="https://resizing.flixster.com/6hZqN85WWZDwBdVpXIbFv5WqAGE=/50x50/v1.bjs3OTk2NzQ7ajsxNzE5OTsxMjAwOzQ4MDs3MjA" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/michael_caine" class="unstyled articleLink">
            <span title="Michael Caine">
                Michael Caine</span>
        </a>
        <span class="characters subtle smaller" title="Miles"><br/>as Miles</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/lukas_haas" class="pull-left">
        <img src="https://resizing.flixster.com/95nPrvdlOw-zF_kqu5FkGQqWeLY=/50x50/v1.cjs0ODIyNztqOzE3MTkwOzEyMDA7MTg5MDsxODkw" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/lukas_haas" class="unstyled articleLink">
            <span title="Lukas Haas">
                Lukas Haas</span>
        </a>
        <span class="characters subtle smaller" title="Nash"><br/>as Nash</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/tai_li_lee" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/tai_li_lee" class="unstyled articleLink">
            <span title="Tai-Li Lee">
                Tai-Li Lee</span>
        </a>
        <span class="characters subtle smaller" title="Tadashi"><br/>as Tadashi</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/claire_geare" class="pull-left">
        <img src="https://resizing.flixster.com/rvBEmuPbna_9xYOpBg9dFzJwYKQ=/50x50/v1.bjs5NTY0ODQ7ajsxNzIwMTsxMjAwOzIwNDg7MTE1Mg" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/claire_geare" class="unstyled articleLink">
            <span title="Claire Geare">
                Claire Geare</span>
        </a>
        <span class="characters subtle smaller" title="Phillipa (3 years)"><br/>as Phillipa (3 years)</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/magnus_nolan" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/magnus_nolan" class="unstyled articleLink">
            <span title="Magnus Nolan">
                Magnus Nolan</span>
        </a>
        <span class="characters subtle smaller" title="James (20 months)"><br/>as James (20 months)</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/taylor-geare" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/taylor-geare" class="unstyled articleLink">
            <span title="Taylor Geare">
                Taylor Geare</span>
        </a>
        <span class="characters subtle smaller" title="Phillipa (5 years)"><br/>as Phillipa (5 years)</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/johnathan_geare" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/johnathan_geare" class="unstyled articleLink">
            <span title="Johnathan Geare">
                Johnathan Geare</span>
        </a>
        <span class="characters subtle smaller" title="James (3 years)"><br/>as James (3 years)</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/jonathan_geare" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/jonathan_geare" class="unstyled articleLink">
            <span title="Jonathan Geare">
                Jonathan Geare</span>
        </a>
        <span class="characters subtle smaller" title="James (3 years)"><br/>as James (3 years)</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/tohoru_masamune" class="pull-left">
        <img src="https://resizing.flixster.com/bp1aJuo6hM0JD4y3yqXc8dQcHhY=/50x50/v1.bjs3Nzc0MjE7ajsxNzE5ODsxMjAwOzM3Njs1NjQ" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/tohoru_masamune" class="unstyled articleLink">
            <span title="Tohoru Masamune">
                Tohoru Masamune</span>
        </a>
        <span class="characters subtle smaller" title="Japanese Security Guard"><br/>as Japanese Security Guard</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/yuji_okumoto" class="pull-left">
        <img src="https://resizing.flixster.com/gZ2jsKDLwAOyzuduEiL-0MnUCX4=/50x50/v1.bjs3OTgzOTM7ajsxNzE5OTsxMjAwOzU0MDs3MjA" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/yuji_okumoto" class="unstyled articleLink">
            <span title="Yuji Okumoto">
                Yuji Okumoto</span>
        </a>
        <span class="characters subtle smaller" title="Saito's Attendant"><br/>as Saito's Attendant</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/earl_cameron" class="pull-left">
        <img src="https://resizing.flixster.com/saHue8qwj7Q9hfdtob6fuyNd8BQ=/50x50/v1.bjs3OTI3NjU7ajsxNzE5OTsxMjAwOzMwMDs0NTA" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/earl_cameron" class="unstyled articleLink">
            <span title="Earl Cameron">
                Earl Cameron</span>
        </a>
        <span class="characters subtle smaller" title="Elderly Bald Man"><br/>as Elderly Bald Man</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/ryan_hayward" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/ryan_hayward" class="unstyled articleLink">
            <span title="Ryan Hayward">
                Ryan Hayward</span>
        </a>
        <span class="characters subtle smaller" title="Lawyer"><br/>as Lawyer</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/miranda_nolan" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/miranda_nolan" class="unstyled articleLink">
            <span title="Miranda Nolan">
                Miranda Nolan</span>
        </a>
        <span class="characters subtle smaller" title="Flight Attendant"><br/>as Flight Attendant</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/russ_fega" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/russ_fega" class="unstyled articleLink">
            <span title="Russ Fega">
                Russ Fega</span>
        </a>
        <span class="characters subtle smaller" title="Cab Driver"><br/>as Cab Driver</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/tim-kelleher" class="pull-left">
        <img src="https://resizing.flixster.com/yhvzRbfK2KkP4iEC4eCQ0Bali-Y=/50x50/v1.bjs1MTIxMzE7ajsxNzE5NTsxMjAwOzgzMTsxMTA4" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/tim-kelleher" class="unstyled articleLink">
            <span title="Tim Kelleher">
                Tim Kelleher</span>
        </a>
        <span class="characters subtle smaller" title="Thin Man"><br/>as Thin Man</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/talulah_riley" class="pull-left">
        <img src="https://resizing.flixster.com/K_AiYKkCqFWwjLRkWID9a2j1TyU=/50x50/v1.bjs3NTQ2NTM7ajsxNzE5ODsxMjAwOzMwMDs0NTA" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/talulah_riley" class="unstyled articleLink">
            <span title="Talulah Riley">
                Talulah Riley</span>
        </a>
        <span class="characters subtle smaller" title="Blonde"><br/>as Blonde</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/nicolas_clerc" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/nicolas_clerc" class="unstyled articleLink">
            <span title="Nicolas Clerc">
                Nicolas Clerc</span>
        </a>
        <span class="characters subtle smaller" title="Bridge Sub Con"><br/>as Bridge Sub Con</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/coralie_dedykere" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/coralie_dedykere" class="unstyled articleLink">
            <span title="Coralie Dedykere">
                Coralie Dedykere</span>
        </a>
        <span class="characters subtle smaller" title="Bridge Sub Con"><br/>as Bridge Sub Con</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/silvie_laguna" class="pull-left">
        <img src="https://resizing.flixster.com/FNpwHMQILhLTTxtVFmGh8YganvA=/50x50/v1.bjs3ODQwOTg7ajsxNzE5OTsxMjAwOzMwMDs0NTA" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/silvie_laguna" class="unstyled articleLink">
            <span title="Silvie Laguna">
                Silvie Laguna</span>
        </a>
        <span class="characters subtle smaller" title="Bridge Sub Con"><br/>as Bridge Sub Con</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/virgile_bramly" class="pull-left">
        <img src="https://resizing.flixster.com/JgLverNYXNA_2pOJSOArctvYHkw=/50x50/v1.bjs3NTI4OTk7ajsxNzE5ODsxMjAwOzM3NTs1MDA" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/virgile_bramly" class="unstyled articleLink">
            <span title="Virgile Bramly">
                Virgile Bramly</span>
        </a>
        <span class="characters subtle smaller" title="Bridge Sub Con"><br/>as Bridge Sub Con</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/jeanmichel_dagory" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/jeanmichel_dagory" class="unstyled articleLink">
            <span title="Jean-Michel Dagory">
                Jean-Michel Dagory</span>
        </a>
        <span class="characters subtle smaller" title="Bridge Sub Con"><br/>as Bridge Sub Con</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/helena_cullinan" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/helena_cullinan" class="unstyled articleLink">
            <span title="Helena Cullinan">
                Helena Cullinan</span>
        </a>
        <span class="characters subtle smaller" title="Penrose Sub Con"><br/>as Penrose Sub Con</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/mark_fleischmann" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/mark_fleischmann" class="unstyled articleLink">
            <span title="Mark Fleischmann">
                Mark Fleischmann</span>
        </a>
        <span class="characters subtle smaller" title="Penrose Sub Con"><br/>as Penrose Sub Con</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/shelley_lang" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/shelley_lang" class="unstyled articleLink">
            <span title="Shelley Lang">
                Shelley Lang</span>
        </a>
        <span class="characters subtle smaller" title="Penrose Sub Con"><br/>as Penrose Sub Con</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/adam_cole" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/adam_cole" class="unstyled articleLink">
            <span title="Adam Cole">
                Adam Cole</span>
        </a>
        <span class="characters subtle smaller" title="Bar Sub Con"><br/>as Bar Sub Con</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/1036105-jack_murray" class="pull-left">
        <img src="https://resizing.flixster.com/KrfW1RdqszsA3pY8AuJW_56TV18=/50x50/v1.cjs0NTUwNTtqOzE3MTkwOzEyMDA7MjcwOzI0MQ" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/1036105-jack_murray" class="unstyled articleLink">
            <span title="Jack Murray">
                Jack Murray</span>
        </a>
        <span class="characters subtle smaller" title="Bar Sub Con"><br/>as Bar Sub Con</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/kraig_thornber" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/kraig_thornber" class="unstyled articleLink">
            <span title="Kraig Thornber">
                Kraig Thornber</span>
        </a>
        <span class="characters subtle smaller" title="Bar Sub Con"><br/>as Bar Sub Con</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/angela_nathenson" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/angela_nathenson" class="unstyled articleLink">
            <span title="Angela Nathenson">
                Angela Nathenson</span>
        </a>
        <span class="characters subtle smaller" title="Bar Sub Con"><br/>as Bar Sub Con</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/natasha_beaumont" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/natasha_beaumont" class="unstyled articleLink">
            <span title="Natasha Beaumont">
                Natasha Beaumont</span>
        </a>
        <span class="characters subtle smaller" title="Bar Sub Con"><br/>as Bar Sub Con</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/mark_raducci" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/mark_raducci" class="unstyled articleLink">
            <span title="Mark Raducci">
                Mark Raducci</span>
        </a>
        <span class="characters subtle smaller" title="Lobby Sub Con"><br/>as Lobby Sub Con</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/marc_raducci" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/marc_raducci" class="unstyled articleLink">
            <span title="Marc Raducci">
                Marc Raducci</span>
        </a>
        <span class="characters subtle smaller" title="Lobby Sub Con"><br/>as Lobby Sub Con</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/carl_gilliard" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/carl_gilliard" class="unstyled articleLink">
            <span title="Carl Gilliard">
                Carl Gilliard</span>
        </a>
        <span class="characters subtle smaller" title="Lobby Sub Con"><br/>as Lobby Sub Con</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/jill_maddrell" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/jill_maddrell" class="unstyled articleLink">
            <span title="Jill Maddrell">
                Jill Maddrell</span>
        </a>
        <span class="characters subtle smaller" title="Lobby Sub Con"><br/>as Lobby Sub Con</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/alex_lombard" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/alex_lombard" class="unstyled articleLink">
            <span title="Alex Lombard">
                Alex Lombard</span>
        </a>
        <span class="characters subtle smaller" title="Lobby Sub Con"><br/>as Lobby Sub Con</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/nicole_pulliam" class="pull-left">
        <img src="https://resizing.flixster.com/yILguVVnOzWNPM3hoO8_7TbsxG8=/50x50/v1.bjs3NjEzNTE7ajsxNzE5ODsxMjAwOzU0MDs3MjA" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/nicole_pulliam" class="unstyled articleLink">
            <span title="Nicole Pulliam">
                Nicole Pulliam</span>
        </a>
        <span class="characters subtle smaller" title="Lobby Sub Con"><br/>as Lobby Sub Con</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/peter_basham" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/peter_basham" class="unstyled articleLink">
            <span title="Peter Basham">
                Peter Basham</span>
        </a>
        <span class="characters subtle smaller" title="Fischer's Jet Captain"><br/>as Fischer's Jet Captain</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/michael_gaston" class="pull-left">
        <img src="https://resizing.flixster.com/-Ad_4kWg4y2l2W9uV1I15s22BB4=/50x50/v1.cjs0MzM5MjtqOzE3MTkwOzEyMDA7MjIwOzE5Ng" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/michael_gaston" class="unstyled articleLink">
            <span title="Michael Gaston">
                Michael Gaston</span>
        </a>
        <span class="characters subtle smaller" title="Immigration Officer"><br/>as Immigration Officer</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/felix_scott" class="pull-left">
        <img src="https://resizing.flixster.com/bHfA1Ntkf2zri0JVRVtv1anHi7k=/50x50/v1.cjs0NTE0OTtqOzE3MTkwOzEyMDA7NDgwOzQyOA" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/felix_scott" class="unstyled articleLink">
            <span title="Felix Scott">
                Felix Scott</span>
        </a>
        <span class="characters subtle smaller" title="Businessman"><br/>as Businessman</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/1177522-andrew_pleavin" class="pull-left">
        <img src="https://resizing.flixster.com/dbmNoSjviWJsqnfo3eQn8PCx0SM=/50x50/v1.bjs1MjE0ODM7ajsxNzE5NjsxMjAwOzY4MjsxMDIz" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/1177522-andrew_pleavin" class="unstyled articleLink">
            <span title="Andrew Pleavin">
                Andrew Pleavin</span>
        </a>
        <span class="characters subtle smaller" title="Businessman"><br/>as Businessman</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/lisa_reynolds" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/lisa_reynolds" class="unstyled articleLink">
            <span title="Lisa Reynolds">
                Lisa Reynolds</span>
        </a>
        <span class="characters subtle smaller" title="Private Nurse"><br/>as Private Nurse</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/jason_tendell" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/jason_tendell" class="unstyled articleLink">
            <span title="Jason Tendell">
                Jason Tendell</span>
        </a>
        <span class="characters subtle smaller" title="Fischer's Driver"><br/>as Fischer's Driver</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/jack_gilroy" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/jack_gilroy" class="unstyled articleLink">
            <span title="Jack Gilroy">
                Jack Gilroy</span>
        </a>
        <span class="characters subtle smaller" title="Old Cobb"><br/>as Old Cobb</span>
        </div>
</div>
<div class="cast-item media inlineBlock  castRemaining">
    <a href="/celebrity/shannon-welles" class="pull-left">
        <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/actor.default.tmb.gif" class="actorThumb medium media-object"></a>
    <div class="media-body">
        <a href="/celebrity/shannon-welles" class="unstyled articleLink">
            <span title="Shannon Welles">
                Shannon Welles</span>
        </a>
        <span class="characters subtle smaller" title="Old Mal"><br/>as Old Mal</span>
        </div>
</div>
<a href="javascript:void(0)" id="showMoreCast" class="unstyled articleLink">
                Show More Cast <span class="caret"></span>
            </a>
            <script>
                require(["jquery"], function($) {
                    $("#showMoreCast").click(function() {
                        $(".castRemaining").removeClass("castRemaining");
                        $("#showMoreCast").hide();
                    });
                });
            </script>
        </div>
</div>
</section>
<section id="newsSection" class="panel panel-rt panel-box " >
    <h2 class="panel-heading">News &amp; Interviews for <em>Inception</em></h2>
    <div class="panel-body content_body">
        <div id="newsContainer" class="fl">
                <div class="newsRow col-sm-8 col-full-xs">
                        <a href="https://editorial.rottentomatoes.com/article/joseph-gordon-levitts-10-best-movies/" class="unstyled articleLink">
                            <div class="newsPhoto" style="background-image:url('https://s3-us-west-2.amazonaws.com/flx-editorial-wordpress/wp-content/uploads/2016/09/14142902/Joseph-Gordon-Levitt-Recall.jpg')"></div>
                            <div>Joseph Gordon-Levitt&#8217;s 10 Best Movies</div>
                        </a>
                    </div>
                <div class="newsRow col-sm-8 col-full-xs">
                        <a href="https://editorial.rottentomatoes.com/article/box-office-panda-remains-champ-over-super-bowl-weekend/" class="unstyled articleLink">
                            <div class="newsPhoto" style="background-image:url('https://s3-us-west-2.amazonaws.com/flx-editorial-wordpress/wp-content/uploads/2016/02/07144308/600KungFuPanda3.jpg')"></div>
                            <div>Box Office: <em>Panda</em> Remains Champ Over Super Bowl Weekend</div>
                        </a>
                    </div>
                <div class="newsRow col-sm-8 col-full-xs">
                        <a href="https://editorial.rottentomatoes.com/article/box-office-leo-fights-his-way-into-1-spot-with-the-revenant/" class="unstyled articleLink">
                            <div class="newsPhoto" style="background-image:url('https://s3-us-west-2.amazonaws.com/flx-editorial-wordpress/wp-content/uploads/2016/01/24173554/600TheRevenant2.jpg')"></div>
                            <div>Box Office: Leo Fights His Way Into #1 Spot with <em> The Revenant</em></div>
                        </a>
                    </div>
                </div>
            <div class="clickForMore">
                <a href="https://editorial.rottentomatoes.com/more-related-content?relatedmovieid=770805418" class="fr unstyled articleLink">
                    <p>View All <em></em> News <span class="glyphicon glyphicon-menu-right"></span></p>
                </a>
            </div>
        </div>
</section>
<div id="friend-reviews-root"></div>
<script>
(function() {
    require(["friend-ratings"], function(mount) {
        mount(document.getElementById('friend-reviews-root'), 770805418);
    });
})();
</script>
<section id="contentReviews" class="panel panel-rt panel-box " >
    <h2 class="panel-heading">Critic Reviews for <em>Inception</em></h2>
    <div class="panel-body content_body">
        <p id="criticHeaders">
                <a class="small unstyled subtle articleLink" href="/m/inception/reviews/">All Critics (331)</a>
                | <a class="small unstyled subtle articleLink" href="/m/inception/reviews/?type=top_critics">Top Critics (52)</a><span class="hidden-xs" style="display:inline">
                    | <a class="small unstyled subtle articleLink" href="/m/inception/reviews/?sort=fresh">Fresh (285)</a>
                    | <a class="small unstyled subtle articleLink" href="/m/inception/reviews/?sort=rotten">Rotten (46)</a>
                    | <a class="small unstyled subtle articleLink" href="/m/inception/reviews/?type=dvd">DVD (4)</a></span>
            </p>
        <div id="reviews">
            <div class="quote_bubble top_critic pull-left cl">
    <div class="review_quote">
        <div class="media">
            <div class="pull-left">
                <span  class="media-img icon small fresh"></span>
            </div>
            <div class="media-body">
                <p>
                    A spectacular fantasy thriller based on Nolan's own original screenplay, Inception is the smartest CGI head-trip since The Matrix.</p>
                <div class="pull-right smaller">
                    <a href="http://www.cnn.com/2010/SHOWBIZ/Movies/07/15/inception.review/" target="_blank">Full Review&hellip;</a> | <span>July 20, 2015</span>
                </div>
            </div>
        </div>
    </div>
    <div class="review_source media">
        <div class="pull-left">
            <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/user.none.tmb.jpg" class="critic_thumb media-img"></div>
        <div class="media-body">
            <div><a class="unstyled articleLink" href="/critic/tom-charity/">Tom Charity</a></div><div class="subtle small">CNN.com</div><div class="small" style="color:#3A9425"><span class="glyphicon glyphicon-star"></span> Top Critic</div></div>
    </div>
</div>
<div class="quote_bubble top_critic pull-right cr">
    <div class="review_quote">
        <div class="media">
            <div class="pull-left">
                <span rel="tooltip" data-toggle="tooltip" data-placement="right" title="Original Score: 3.5/4" class="media-img icon small fresh"></span>
            </div>
            <div class="media-body">
                <p>
                    It's just grade-A filmmaking.</p>
                <div class="pull-right smaller">
                    <span>July 20, 2015</span>
                </div>
            </div>
        </div>
    </div>
    <div class="review_source media">
        <div class="pull-left">
            <img src="https://resizing.flixster.com/1G9rmluwfrjdluO9rA5xYGC8YXc=/50x50/v1.YzsyNjI1O2c7MTcxOTA7MTIwMDsxNTA7MTUw" class="critic_thumb media-img"></div>
        <div class="media-body">
            <div><a class="unstyled articleLink" href="/critic/stephen-whitty/">Stephen Whitty</a></div><div class="subtle small">Newark Star-Ledger</div><div class="small" style="color:#3A9425"><span class="glyphicon glyphicon-star"></span> Top Critic</div></div>
    </div>
</div>
<div class="quote_bubble top_critic pull-left cl">
    <div class="review_quote">
        <div class="media">
            <div class="pull-left">
                <span rel="tooltip" data-toggle="tooltip" data-placement="right" title="Original Score: 4/4" class="media-img icon small fresh"></span>
            </div>
            <div class="media-body">
                <p>
                    A heist film of thrilling, almost delirious complexity.</p>
                <div class="pull-right smaller">
                    <a href="http://www.newsday.com/entertainment/movies/inception-close-to-a-sci-fi-masterpiece-1.2105296" target="_blank">Full Review&hellip;</a> | <span>July 20, 2015</span>
                </div>
            </div>
        </div>
    </div>
    <div class="review_source media">
        <div class="pull-left">
            <img src="https://resizing.flixster.com/JD0l6UskY4wQcLJdjHsVcJrxcpg=/50x50/v1.YzsyMjc4O2o7MTcxOTA7MTIwMDsxMjg7MTI4" class="critic_thumb media-img"></div>
        <div class="media-body">
            <div><a class="unstyled articleLink" href="/critic/rafer-guzman/">Rafer Guzman</a></div><div class="subtle small">Newsday</div><div class="small" style="color:#3A9425"><span class="glyphicon glyphicon-star"></span> Top Critic</div></div>
    </div>
</div>
<div class="quote_bubble top_critic pull-right cr">
    <div class="review_quote">
        <div class="media">
            <div class="pull-left">
                <span  class="media-img icon small fresh"></span>
            </div>
            <div class="media-body">
                <p>
                    Even as you tick off the film's overload of references, though -- a Matrix here, a James Bond there -- the amazing effects and Cobb's quest carry you along.</p>
                <div class="pull-right smaller">
                    <a href="http://www.newsweek.com/inception-christopher-nolans-dreamy-new-movie-74219" target="_blank">Full Review&hellip;</a> | <span>July 20, 2015</span>
                </div>
            </div>
        </div>
    </div>
    <div class="review_source media">
        <div class="pull-left">
            <img src="https://resizing.flixster.com/IjUxGSFIrGRw6-GGGVi6jrT9cuQ=/50x50/v1.YzsyMzAzO2c7MTcxOTA7MTIwMDszODs0Mg" class="critic_thumb media-img"></div>
        <div class="media-body">
            <div><a class="unstyled articleLink" href="/critic/caryn-james/">Caryn James</a></div><div class="subtle small">Newsweek</div><div class="small" style="color:#3A9425"><span class="glyphicon glyphicon-star"></span> Top Critic</div></div>
    </div>
</div>
<div class="quote_bubble top_critic pull-left cl">
    <div class="review_quote">
        <div class="media">
            <div class="pull-left">
                <span  class="media-img icon small rotten"></span>
            </div>
            <div class="media-body">
                <p>
                    An astonishment, an engineering feat, and, finally, a folly.</p>
                <div class="pull-right smaller">
                    <a href="http://www.newyorker.com/arts/critics/cinema/2010/07/26/100726crci_cinema_denby" target="_blank">Full Review&hellip;</a> | <span>July 19, 2010</span>
                </div>
            </div>
        </div>
    </div>
    <div class="review_source media">
        <div class="pull-left">
            <img src="https://resizing.flixster.com/MC695-Yi9Gwii6h8QpB0zgvG72g=/50x50/v1.YzsxNTk3O2c7MTcxOTA7MTIwMDszODs0Mw" class="critic_thumb media-img"></div>
        <div class="media-body">
            <div><a class="unstyled articleLink" href="/critic/david-denby/">David Denby</a></div><div class="subtle small">New Yorker</div><div class="small" style="color:#3A9425"><span class="glyphicon glyphicon-star"></span> Top Critic</div></div>
    </div>
</div>
<div class="quote_bubble top_critic pull-right cr">
    <div class="review_quote">
        <div class="media">
            <div class="pull-left">
                <span rel="tooltip" data-toggle="tooltip" data-placement="right" title="Original Score: 4/4" class="media-img icon small fresh"></span>
            </div>
            <div class="media-body">
                <p>
                    It's only the latest indication that Christopher Nolan might be the slyest narrative tactician making movies today.</p>
                <div class="pull-right smaller">
                    <a href="http://www.chron.com/disp/story.mpl/ent/movies/mobile/7108633.html" target="_blank">Full Review&hellip;</a> | <span>July 16, 2010</span>
                </div>
            </div>
        </div>
    </div>
    <div class="review_source media">
        <div class="pull-left">
            <img src="https://resizing.flixster.com/8sV9Oil9e_-p1beX34x6hYUcINo=/50x50/v1.YzsxNTM0O2c7MTcxOTA7MTIwMDszODs0Mg" class="critic_thumb media-img"></div>
        <div class="media-body">
            <div><a class="unstyled articleLink" href="/critic/amy-biancolli/">Amy Biancolli</a></div><div class="subtle small">Houston Chronicle</div><div class="small" style="color:#3A9425"><span class="glyphicon glyphicon-star"></span> Top Critic</div></div>
    </div>
</div>
<div class="quote_bubble hidden-xs pull-left cl">
    <div class="review_quote">
        <div class="media">
            <div class="pull-left">
                <span  class="media-img icon small fresh"></span>
            </div>
            <div class="media-body">
                <p>
                    This is a brainy, brawny popcorn pleaser at its best. And one not easily forgotten.</p>
                <div class="pull-right smaller">
                    <a href="http://www.toledoblade.com/Movies/2010/07/16/Dream-of-a-movie-8216-Inception-best-summer-film-in-years.html" target="_blank">Full Review&hellip;</a> | <span>June 27, 2016</span>
                </div>
            </div>
        </div>
    </div>
    <div class="review_source media">
        <div class="pull-left">
            <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/user.none.tmb.jpg" class="critic_thumb media-img"></div>
        <div class="media-body">
            <div><a class="unstyled articleLink" href="/critic/kirk-baird/">Kirk Baird</a></div><div class="subtle small">Toledo Blade</div></div>
    </div>
</div>
<div class="quote_bubble hidden-xs pull-right cr">
    <div class="review_quote">
        <div class="media">
            <div class="pull-left">
                <span  class="media-img icon small rotten"></span>
            </div>
            <div class="media-body">
                <p>
                    The main tension of the story is a constant vuvuzela-like interruption in the suspension of disbelief.</p>
                <div class="pull-right smaller">
                    <a href="http://www.straight.com/article-334302/vancouver/inception" target="_blank">Full Review&hellip;</a> | <span>June 27, 2016</span>
                </div>
            </div>
        </div>
    </div>
    <div class="review_source media">
        <div class="pull-left">
            <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/user.none.tmb.jpg" class="critic_thumb media-img"></div>
        <div class="media-body">
            <div><a class="unstyled articleLink" href="/critic/ron-yamauchi/">Ron Yamauchi</a></div><div class="subtle small">Georgia Straight</div></div>
    </div>
</div>
<div class="quote_bubble hidden-xs pull-left cl">
    <div class="review_quote">
        <div class="media">
            <div class="pull-left">
                <span  class="media-img icon small fresh"></span>
            </div>
            <div class="media-body">
                <p>
                    If nothing else, this big brain-teaser of a movie is a great conversation piece.</p>
                <div class="pull-right smaller">
                    <a href="http://www.fwweekly.com/2010/07/14/inception-puts-you-in-a-sleeper-hold/" target="_blank">Full Review&hellip;</a> | <span>June 22, 2016</span>
                </div>
            </div>
        </div>
    </div>
    <div class="review_source media">
        <div class="pull-left">
            <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/user.none.tmb.jpg" class="critic_thumb media-img"></div>
        <div class="media-body">
            <div><a class="unstyled articleLink" href="/critic/kristian-m-lin/">Kristian M. Lin</a></div><div class="subtle small">Fort Worth Weekly</div></div>
    </div>
</div>
<div class="quote_bubble hidden-xs pull-right cr">
    <div class="review_quote">
        <div class="media">
            <div class="pull-left">
                <span rel="tooltip" data-toggle="tooltip" data-placement="right" title="Original Score: 3/5" class="media-img icon small fresh"></span>
            </div>
            <div class="media-body">
                <p>
                    Invention runs lower once we're on those snowy slopes, and the hard narrative punch keeps disintegrating into a floating cloud of pixels. But what a display they make.</p>
                <div class="pull-right smaller">
                    <a href="http://www.theguardian.com/film/2010/jul/15/inception-review" target="_blank">Full Review&hellip;</a> | <span>July 20, 2015</span>
                </div>
            </div>
        </div>
    </div>
    <div class="review_source media">
        <div class="pull-left">
            <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/user.none.tmb.jpg" class="critic_thumb media-img"></div>
        <div class="media-body">
            <div><a class="unstyled articleLink" href="/critic/peter-bradshaw/">Peter Bradshaw</a></div><div class="subtle small">Guardian</div></div>
    </div>
</div>
<div class="quote_bubble hidden-xs pull-left cl">
    <div class="review_quote">
        <div class="media">
            <div class="pull-left">
                <span  class="media-img icon small rotten"></span>
            </div>
            <div class="media-body">
                <p>
                    The film's imaginative freefall is ruinously anchored to a bogus sense of deep feeling.</p>
                <div class="pull-right smaller">
                    <a href="http://www.independent.co.uk/arts-entertainment/films/reviews/inception-christopher-nolan-148-mins-12a-2029050.html" target="_blank">Full Review&hellip;</a> | <span>July 20, 2015</span>
                </div>
            </div>
        </div>
    </div>
    <div class="review_source media">
        <div class="pull-left">
            <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/user.none.tmb.jpg" class="critic_thumb media-img"></div>
        <div class="media-body">
            <div><a class="unstyled articleLink" href="/critic/jonathan-romney/">Jonathan Romney</a></div><div class="subtle small">Independent on Sunday</div></div>
    </div>
</div>
<div class="quote_bubble hidden-xs pull-right cr">
    <div class="review_quote">
        <div class="media">
            <div class="pull-left">
                <span rel="tooltip" data-toggle="tooltip" data-placement="right" title="Original Score: 4/5" class="media-img icon small fresh"></span>
            </div>
            <div class="media-body">
                <p>
                    Nolan is so eager to make the movie work as an action blockbuster that he sacrifices storytelling to set pieces. Still, what set pieces.</p>
                <div class="pull-right smaller">
                    <a href="http://www.sevendaysvt.com/vermont/inception/Content?oid=2140878" target="_blank">Full Review&hellip;</a> | <span>July 20, 2015</span>
                </div>
            </div>
        </div>
    </div>
    <div class="review_source media">
        <div class="pull-left">
            <img src="https://staticv2-4.rottentomatoes.com/static/images/redesign/user.none.tmb.jpg" class="critic_thumb media-img"></div>
        <div class="media-body">
            <div><a class="unstyled articleLink" href="/critic/margot-harrison/">Margot Harrison</a></div><div class="subtle small">Seven Days</div></div>
    </div>
</div>
</div>
 	<div class="view-all">
                <a class="view_all_critic_reviews" href="/m/inception/reviews/">View All Critic Reviews (331) <span class="glyphicon glyphicon-menu-right"></span></a>
        </div>
        </div>
</section>
<section id="audience_reviews" class="panel panel-rt panel-box " >
    <h2 class="panel-heading">Audience Reviews for <em>Inception</em></h2>
    <div class="panel-body content_body">
        <div>
                    <div class="quote_bubble fl cl">
    <div id="quoteBubble44689" class="review_quote">
        <div class="media">
            <div class="media-body">
                <div class="starHeader">
                    <span class="glyphicon glyphicon-star"></span><span class="glyphicon glyphicon-star"></span><span class="glyphicon glyphicon-star"></span><span class="glyphicon glyphicon-star"></span></div>
                <p class="comment clamp clamp-6">
                   so great is the hype and praise from my fellow flixster cinephile elite that if this is anything less than a watershed film, I will be disappointed</p>
            </div>
        </div>
    </div>
    <div class="review_source media">
        <div class="pull-left">
            <img src="https://graph.facebook.com/v2.2/5300563/picture" class="critic_thumb" alt="_kelly .King" />
                </div>
        <div class="media-body">
            _kelly .King<p class="superreviewer small"><span class="glyphicon glyphicon-star"></span> Super Reviewer</p>
            </div>
    </div>
</div>
<div class="quote_bubble fr cr">
    <div id="quoteBubble44690" class="review_quote">
        <div class="media">
            <div class="media-body">
                <div class="starHeader">
                    <span class="glyphicon glyphicon-star"></span><span class="glyphicon glyphicon-star"></span><span class="glyphicon glyphicon-star"></span><span class="glyphicon glyphicon-star"></span>&frac12;</div>
                <p class="comment clamp clamp-6">
                   A mind-blowing, fantastic film concerning dreams and their dimensions, and how one man (DiCaprio) assembles a team together in order to plant an idea in an important businessman's mind (Cillian Murphy), so that he can be granted his wish to return to his home. This is a mostly astonishing picture, one that requires its audience to remain on the edge of their seats throughout its entirety. With so many thoughtless, hollow summer blockbusters coming out nowadays, it's a treat to finally see something of this complexity come out at this time of the year. Leo, as always, turns in a magnificent performance. The only fault this film has is its lack of character development amongst the supporting parts, which I originally dismissed but now that I think of it - what do we know about Joseph Gordon-Levitt in the film despite him walking all over walls and Tom Hardy's smart-aleckness? Although it's easy to get lost in this adventure, director Nolan doesn't expect you to understand every key aspect of this film. Instead, just accept the fact that this is a complicated movie, but one whose story is handled with meticulous care. Without question a very good film, and one that is deserving of the massive amount of attention and cash-flow it has received.</p>
            </div>
        </div>
    </div>
    <div class="review_source media">
        <div class="pull-left">
            <img src="https://graph.facebook.com/v2.2/619846742/picture" class="critic_thumb" alt="Dan Schultz" />
                </div>
        <div class="media-body">
            Dan Schultz<p class="superreviewer small"><span class="glyphicon glyphicon-star"></span> Super Reviewer</p>
            </div>
    </div>
</div>
<div class="quote_bubble fl cl">
    <div id="quoteBubble44691" class="review_quote">
        <div class="media">
            <div class="media-body">
                <div class="starHeader">
                    <span class="glyphicon glyphicon-star"></span><span class="glyphicon glyphicon-star"></span><span class="glyphicon glyphicon-star"></span></div>
                <p class="comment clamp clamp-6">
                   Paid more for IMAX.  Not terribly impressed.  I've been waiting for another "Memento"-esque movie from Nolan, but the more popular he gets, the more mainstream his movies become.  Huge blockbuster effects over subtle representations of deceit, action, and love.  

This movie about dreams doesn't really gel with me personally because I don't have dreams in which I can "do anything."  I can't make decisions in my dreams, so I was hoping this movie would address how different people dream, dream theory, common dreams, and perhaps dream interpretation, not just cool zero gravity fight scenes and "repression."  

There are also several plot holes/inconsistencies.  I don't buy that Ariadne would be the only one to try to crack Cobb's subconsciousness.  His team has worked with him for much longer, and they still don't realize what danger they're in?  How could the team not have realized Arthur's dream would coincide with the van crashing off the bridge and as such, prepare for zero gravity?  What is this call that Saito makes to absolve Cobb of his past?  How is Cobb even implicated in Mal's death when her point of impact from the hotel room is below a different hotel room than the one that holds signs of struggle?  Why is Mal's name so obviously evil?  And IF the top DOESN'T topple over at the end, then whose dream and what level are we in?  The emotional and psychological elements of the movie aren't as effortlessly beautiful as the easily malleable dream worlds, which as I mentioned before, isn't EVERYONE'S dream world.

Joseph Gordon-Levitt is just about the hottest guy ever.  Cillian Murphy is a close second.</p>
            </div>
        </div>
    </div>
    <div class="review_source media">
        <div class="pull-left">
            <img src="https://graph.facebook.com/v2.2/7801226/picture" class="critic_thumb" alt="Alice Shen" />
                </div>
        <div class="media-body">
            Alice Shen<p class="superreviewer small"><span class="glyphicon glyphicon-star"></span> Super Reviewer</p>
            </div>
    </div>
</div>
<div class="quote_bubble fr cr hidden-xs">
    <div id="quoteBubble44688" class="review_quote">
        <div class="media">
            <div class="media-body">
                <div class="starHeader">
                    <span class="glyphicon glyphicon-star"></span><span class="glyphicon glyphicon-star"></span><span class="glyphicon glyphicon-star"></span><span class="glyphicon glyphicon-star"></span>&frac12;</div>
                <p class="comment clamp clamp-6">
                   Easily one of the best scifi movies ive seen in a long time. Excellent acting, amazing script, great all around.</p>
            </div>
        </div>
    </div>
    <div class="review_source media">
        <div class="pull-left">
            <img src="https://graph.facebook.com/v2.2/523402618/picture" class="critic_thumb" alt="John Manard" />
                </div>
        <div class="media-body">
            John Manard<p class="superreviewer small"><span class="glyphicon glyphicon-star"></span> Super Reviewer</p>
            </div>
    </div>
</div>
</div>
            <div class="view-all">
                <a href="/m/inception/reviews/?type=user">
                    View All Audience Reviews <span class="glyphicon glyphicon-menu-right"></span>
                </a></div>
        </div>
</section>
<section id="quotesList" class="panel panel-rt panel-box " >
    <h2 class="panel-heading"><em>Inception</em> Quotes</h2>
    <div class="panel-body content_body">
        <div class="media">
            <div class="pull-right hidden-xs" style="width:310px;">
                <aside id="medrec_bottom_ad" class="medrec_ad " style="width:300px"></aside>
    <script>
                var mps=mps||{}; mps._queue=mps._queue||{}; mps._queue.gptloaded=mps._queue.gptloaded||[];
                mps._queue.gptloaded.push(function() {
                    if (mps.getResponsiveSet() !='0') { //DESKTOP or TABLET
                        mps.insertAd('#medrec_bottom_ad','boxadone');
                    } else if (mps.getResponsiveSet() == '0' && 'movie' == 'home') {
                        mps.insertAd('#medrec_bottom_ad','mboxadtwo');
                    }
                });
            </script>
        <br/>
            </div>
            <div class="media-body">
                <div class="quote_bubble fullWidth">
                        <div class="review_quote media">
                            <table class="table-dl-like">
                                <tr>
                                        <td class="bold quote_actor">Saito:</td>
                                        <td class="line">You musn&#039;t be afraid to dream a little bigger darling.</td>
                                    </tr>
                                <tr>
                                        <td class="bold quote_actor">Eames:</td>
                                        <td class="line">You musn&#039;t be afraid to dream a little bigger darling.</td>
                                    </tr>
                                </table>
                            <div class="quoteFooter">
                                </div>
                        </div>
                    </div>
                <div class="quote_bubble fullWidth">
                        <div class="review_quote media">
                            <table class="table-dl-like">
                                <tr>
                                        <td class="bold quote_actor">Arthur:</td>
                                        <td class="line">We need a big kick</td>
                                    </tr>
                                <tr>
                                        <td class="bold quote_actor">Mal:</td>
                                        <td class="line">What&#039;s a kick?</td>
                                    </tr>
                                <tr>
                                        <td class="bold quote_actor">Eames:</td>
                                        <td class="line">This, darling, is a kick [kicks Arthur]</td>
                                    </tr>
                                <tr>
                                        <td class="bold quote_actor">Eames:</td>
                                        <td class="line">This, darling, is a kick.</td>
                                    </tr>
                                </table>
                            <div class="quoteFooter">
                                </div>
                        </div>
                    </div>
                <div style="display:inline-block; width:100%" class="clickForMore">
                            <a href="/m/inception/quotes/" class="unstyled articleLink fr"><p>View All Quotes <span class="glyphicon glyphicon-menu-right"></span></p></a>
                        </div>
                    </div>
        </div>
    </div>
</section>
<section id="discussionForum" class="panel panel-rt panel-box " >
    <h2 class="panel-heading">Discussion Forum</h2>
    <div class="panel-body content_body">
        <div id="threadsPreview">
                        <div style="background:#EEEEEE; padding:15px; text-align:center;">
	<p>Discuss Inception on our Movie forum!</p>
	<form action="https://forum.rottentomatoes.com/forum/category/2/770805418" method="POST">
		<button type="submit" name="forum_name" value="Inception" class="btn btn-primary-rt">
			Go to Forum
		</button>
	</form>
</div>
</div>
                </div>
</section>
<section id="newsAndFeatures" class="panel panel-rt panel-box " >
    <h2 class="panel-heading">News &amp; Features</h2>
    <div class="panel-body content_body">
        <div class="media-body">
            <div class="panel-body">
                <div class="col-sm-15">
                    <div id="FeaturedSection">
                            <div class="newsItem col-xs-12">
                                    <a href="https://editorial.rottentomatoes.com/article/best-movies-off-the-radar-2016/" class="unstyled articleLink">
                                        <div class="bannerPicContainer">
                                            <div class="bannerPic" style="background-image:url('https://resizing.flixster.com/YcS2tvrlGObM2ZWQ2ZNLy-3D7EY=/206x156/v1.czsxMDI3NjQ4MDtqOzE3MjE4OzEyMDA7MjA2OzE1Ng')"></div>
                                        </div>
                                        <div class="bannerCaption">
                                            <p class="noSpacing title">Off The Radar Movies</p>
                                            <p class="byline noSpacing">Staff picks that might have missed the multiplex</p>
                                        </div>
                                    </a>
                                </div>
                            <div class="newsItem col-xs-12">
                                    <a href="https://editorial.rottentomatoes.com/gallery/24-best-movie-posters-of-2016/" class="unstyled articleLink">
                                        <div class="bannerPicContainer">
                                            <div class="bannerPic" style="background-image:url('https://resizing.flixster.com/SFBKi5PYF34bTYrJs3ZCD5tMXTk=/206x156/v1.czsxMDI3NjQ3ODtqOzE3MjE4OzEyMDA7MjA2OzE1Ng')"></div>
                                        </div>
                                        <div class="bannerCaption">
                                            <p class="noSpacing title">Best Posters</p>
                                            <p class="byline noSpacing">The 24 best movie posters of 2016</p>
                                        </div>
                                    </a>
                                </div>
                            <div class="newsItem col-xs-12">
                                    <a href="https://editorial.rottentomatoes.com/article/all-star-wars-movies-ranked-by-tomatometer/" class="unstyled articleLink">
                                        <div class="bannerPicContainer">
                                            <div class="bannerPic" style="background-image:url('https://resizing.flixster.com/H7TV7ydVJJUcC-dAixSdT5SnU0M=/206x156/v1.czsxMDI3NjQ3OTtqOzE3MjE4OzEyMDA7MjA2OzE1Ng')"></div>
                                        </div>
                                        <div class="bannerCaption">
                                            <p class="noSpacing title"><em>Star Wars</eM> Ranked</p>
                                            <p class="byline noSpacing">10 best movies of the <em>La La Land</em> star</p>
                                        </div>
                                    </a>
                                </div>
                            <div class="newsItem col-xs-12">
                                    <a href="https://editorial.rottentomatoes.com/article/tv-shows-we-love-to-hate-watch/" class="unstyled articleLink">
                                        <div class="bannerPicContainer">
                                            <div class="bannerPic" style="background-image:url('https://resizing.flixster.com/QOiNOV4CYQkJW7Y3PFkZJ42aueU=/206x156/v1.czsxMDI3NjQxODtqOzE3MjE4OzEyMDA7MjA2OzE1Ng')"></div>
                                        </div>
                                        <div class="bannerCaption">
                                            <p class="noSpacing title">Staff Picks</p>
                                            <p class="byline noSpacing">TV shows we love to hate-watch</p>
                                        </div>
                                    </a>
                                </div>
                            </div>
                        <div class="clickForMore">
                            <a class="articleLink unstyled" href="https://editorial.rottentomatoes.com/news/"><p>More News &amp; Interview <span class="glyphicon glyphicon-menu-right"></span></p></a>
                        </div>
                    </div>
                <div class="col-sm-9 newsList hidden-xs">
                    <h2>TOP HEADLINES</h2>
                        <ul id="latest-entertainment-headlines" class="redDot">
                            <li>
                                    <a target="_blank" href="http://variety.com/2016/tv/news/julia-roberts-tv-show-today-will-be-different-annapurna-1201943644/" class="articleLink unstyled">
                                        Julia Roberts to Star in <i>Today Will Be Different</i> TV Series</a>
                                    <br />
                                    <span class="subtle">&ndash; Variety</span>
                                    </li>
                            <li>
                                    <a target="_blank" href="http://screenrant.com/stephen-king-revival-movie-russell-crowe/" class="articleLink unstyled">
                                        Russell Crowe to Star in Stephen King&#8217;s <i>Revival</i></a>
                                    <br />
                                    <span class="subtle">&ndash; ScreenRant</span>
                                    </li>
                            <li>
                                    <a target="_blank" href="http://variety.com/2016/film/news/ronald-emmerich-dark-matter-adaptation-sci-fi-movie-1201943298/" class="articleLink unstyled">
                                        Roland Emmerich in Talks to Direct <i>Dark Matter</i></a>
                                    <br />
                                    <span class="subtle">&ndash; Variety</span>
                                    </li>
                            <li>
                                    <a target="_blank" href="http://variety.com/2016/tv/news/cbs-the-honeymooners-reboot-development-1201943215/" class="articleLink unstyled">
                                        CBS Is Planning a <i>Honeymooners</i> Reboot</a>
                                    <br />
                                    <span class="subtle">&ndash; Variety</span>
                                    </li>
                            <li>
                                    <a target="_blank" href="http://variety.com/2016/tv/news/molly-ringwald-riverdale-archie-the-cw-1201942184/" class="articleLink unstyled">
                                        Molly Ringwald Joins <i>Riverdale</i></a>
                                    <br />
                                    <span class="subtle">&ndash; Variety</span>
                                    </li>
                            <li>
                                    <a target="_blank" href="http://variety.com/2016/film/news/cruella-live-action-movie-director-1201929303/" class="articleLink unstyled">
                                        Alex Timbers in Talks to Direct Emma Stone in <i>Cruella</i></a>
                                    <br />
                                    <span class="subtle">&ndash; Variety</span>
                                    </li>
                            <li>
                                    <a target="_blank" href="http://www.latimes.com/local/obituaries/la-me-alan-thicke-20161213-story.html" class="articleLink unstyled">
                                        Alan Thicke: 1947-2016</a>
                                    <br />
                                    <span class="subtle">&ndash; Los Angeles Times</span>
                                    </li>
                            <li>
                                    <a target="_blank" href="http://variety.com/2016/film/news/ruby-rose-pitch-perfect-3-1201941319/" class="articleLink unstyled">
                                        Ruby Rose in Talks for <i>Pitch Perfect 3</i></a>
                                    <br />
                                    <span class="subtle">&ndash; Variety</span>
                                    </li>
                            </ul>
                        <div class="clickForMore">
                            <a class="articleLink unstyled" href="https://editorial.rottentomatoes.com/publications/"><p>More Headlines <span class="glyphicon glyphicon-menu-right"></span></p></a>
                        </div>
                    </div>
            </div>
        </div>
    </div>
</section>
<aside id="medrec_mobile_mob_bottom_ad" class="medrec_ad visible-xs center mobile-medrec" style="width:300px"></aside>
    <script>
                var mps=mps||{}; mps._queue=mps._queue||{}; mps._queue.gptloaded=mps._queue.gptloaded||[];
                mps._queue.gptloaded.push(function() {
                    if (mps.getResponsiveSet() =='0') { //MOBILE
                        mps.insertAd('#medrec_mobile_mob_bottom_ad','mboxadtwo');
                    }
                });
            </script>
        </div>
        <script type="text/template" class="RecommendationItemTemplate">
    <a href="/m/<@= vanity @>/" class="unstyled articleLink">
        <div class="imgContainer">
            <img src="<@= posterImg @>" />
        </div>
        <div class="movie_content_area">
            <span class="icon tiny <@= scoreClass @>"></span>
            <span class="tMeterScore"><@= score @>%</span>
        </div>
        <p class="title noSpacing"><@= title @></p>
    </a>
</script>
<script type="text/template" class="NoShowtimesTemplate">
    <div class="msg-not-near">The movie doesn't seem to be playing near you.</div>
</script>
<script type="text/template" class="ChangeShowtimesTemplate">
    <@ if (!noShowtimes) { @><a class="goBack">Go back</a><@ } @>
    <div class="msg-where">
        Enter your location to see where <em><@= movieTitle @></em> is playing near you
    </div>
    <div class="input-group col-xs-24 col-sm-12">
        <input class="typeahead form-control" type="text" value="" placeholder="Enter city & state or Zip Code"/>
        <span class="input-group-btn">
            <button id="location-button" type="button" class="btn btn-primary">
                Submit
            </button>
        </span>
    </div>
    <div class="results"></div>
</script>
<script type="text/template" class="NewsBox">
    <div id="contentNews" class="inlineBlock"></div>
</script>
<script type="text/template" class="NewsBoxItem">
    <a href="<@= link @>" class="unstyled articleLink">
        <div class="newsPhoto" style="background-image:url('<@= displayPhotoUrl @>')"></div>
        <div><@= title @></div>
    </a>
</script><script>
require(["https://staticv2-4.rottentomatoes.com/static/dist/jspjs/movie.jsp.min.js"], function(PageLoad) {
    PageLoad("inception", "770805418", "20161219", true, "Inception");
});
</script>

</div>
        <script>console.info("body content:" + window.performance.now());</script>
        <div class="sleaderboard_wrapper hidden-xs">
		<div id="leaderboard_bottom_ad" style="margin-left:auto;margin-right:auto;display:inline-block">
		</div>
		<script>
			var mps=mps||{}; mps._queue=mps._queue||{}; mps._queue.gptloaded=mps._queue.gptloaded||[];
			mps._queue.gptloaded.push(function() {
				if (mps.getResponsiveSet() !='0') { //DESKTOP or TABLET
					mps.insertAd('#leaderboard_bottom_ad','bottombanner');
				}
			});
		</script>
	</div>
<style>#skin_ad { height:0px !important; }</style>
<div id="skin_ad"> </div>

<footer id="foot" class="hidden-xs">
    <div class="row">
        <div class="col-xs-5 subnav">
            <ul class="unstyled">
                <li><a id="footer-help" class="unstyled trendingLink" href="/help_desk/">Help</a></li>
                <li><a id="footer-about" class="unstyled trendingLink" href="/about/">About Rotten Tomatoes</a></li>
                <li><a id="footer-tomatometer" style="cursor: pointer;" class="unstyled trendingLink" data-toggle="modal" data-target="#whatIsTomatometer">What's the Tomatometer?</a></li>
                <li><a id="footer-critics" class="unstyled trendingLink" href="/help_desk/critics/">Critic Submission</a></li>
            </ul>
        </div>
        <div class="col-xs-4 subnav">
            <ul>
                <li><a id="footer-licensing" class="unstyled trendingLink" href="/help_desk/licensing/">Licensing</a></li>
                <li><a id="footer-advertise" class="unstyled trendingLink" href="//www.fandango.com/Advertising.aspx">Advertise</a></li>
                <li><a id="footer-jobs" class="unstyled trendingLink" href="//www.fandango.com/careers">Careers</a></li>
            </ul>
        </div>
        <div class="col-xs-7 subnav">
            </div>
        <div class="col-xs-8 subnav">
            <h2>Follow Us</h2>
            <div>
                <a id="footer-follow-us-twitter" class="unstyled trendingLink fontelloIcon icon-twitter footerIcon" href="http://twitter.com/rottentomatoes"></a>&nbsp;&nbsp;&nbsp;
                <a id="footer-follow-us-facebook" class="unstyled trendingLink fontelloIcon icon-facebook-squared footerIcon" href="http://www.facebook.com/rottentomatoes"></a>&nbsp;&nbsp;&nbsp;
                <a id="footer-follow-us-google" class="unstyled trendingLink fontelloIcon icon-gplus footerIcon" href="https://plus.google.com/+RottenTomatoes"></a>&nbsp;&nbsp;&nbsp;
                <a id="footer-follow-us-youtube" class="unstyled trendingLink fontelloIcon icon-youtube-play footerIcon" href="http://www.youtube.com/user/rottentomatoes"></a>&nbsp;&nbsp;&nbsp;
                <a id="footer-follow-us-tumblr" class="unstyled trendingLink fontelloIcon icon-tumblr footerIcon" href="http://rottentomatoes.tumblr.com/"></a>&nbsp;&nbsp;&nbsp;
            </div>
        </div>
    </div>
    <div class="subtle" style="padding:10px">
        Copyright &copy; Fandango. All rights reserved. <span style="color:black">V2</span>
        <a id="footer-privacy" href="//www.fandango.com/PrivacyPolicy">Privacy Policy</a> |
        <a id="footer-tos" href="//www.fandango.com/terms-and-policies">Terms and Policies</a> |
        <a id="footer-ad-choices" href="//www.aboutads.info/choices" class="adchoices">Ad Choices</a>
    </div>
</footer>

<footer id="mobileFoot" class="visible-xs-block">
    <div class="white">Copyright &copy; Fandango. All rights reserved. V2</div>
    <div>
        <a class="footerLinks" href="//www.fandango.com/terms-and-policies">Terms and Policies</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <a class="footerLinks" href="//www.fandango.com/PrivacyPolicy">Privacy Policy</a>
    </div>
</footer></div>
    <script type="text/template" class="LoginModalTemplate">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">
                    <span aria-hidden="true">&times;</span><span class="sr-only">Close</span>
                </button>
                <h2 class="modal-title">Log In</h2>
            </div>
            <div class="modal-body loginForm">
                <div class="error"></div>
                <p>
                    <a id="fbLoginButton" class="btn btn-primary-fb btn-lg fullWidth">
                        <i class="fontelloIcon icon-facebook-squared"></i>
                        Log in with Facebook
                    </a>
                </p>
                <div style="border-bottom:1px solid gray;margin-bottom:10px;padding-bottom:10px;">
                    <div style="background-color:white;left:50%;margin-left:-10px;padding:0 10px;position:absolute">OR</div>
                </div>
                <div class="loginInfo">
                    <div class="form-group username">
                        <label class="control-label" for="login_username">Email address</label>
                        <input id="login_username" class="form-control" name="login_username" placeholder="Email Address" type="email">
                        <span class="help-block"></span>
                    </div>
                    <div class="form-group password">
                        <label class="control-label" for="login_password">Password</label>
                        <input id="login_password" type="password" class="form-control" name="login_password" placeholder="Password">
                        <span class="help-block"></span>
                    </div>
                    <div class="form-group">
                        <div class="text-center">
                            <button type="submit" class="btn btn-primary btn-login">Log In</button>
                        </div>
                    </div>
                    <input type="hidden" name="redirectUrl" value="" />
                </div>
            </div>
            <div class="modal-footer">
                <p>
                    <a class="passwordModal" data-dismiss="modal" data-toggle="modal" data-target="#forgot-password">Forgot your password?</a><br />
                    Don't have an account? <a class="signupModal" data-dismiss="modal" data-toggle="modal" data-target="#signup">Sign up here</a>
                </p>
            </div>
        </div>
    </div>
</script>
<script type="text/template" class="SignupModalTemplate">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">
                    <span aria-hidden="true">&times;</span><span class="sr-only">Close</span>
                </button>
                <h2 class="modal-title">Sign up for Rotten Tomatoes</h2>
            </div>
            <div class="modal-body">
                <a href="javascript:FB.login();" class="btn btn-primary-fb btn-lg fullWidth">
                    <i class="fontelloIcon icon-facebook-squared"></i>
                    Sign up with Facebook
                </a>
                <p class="text-center">
                    OR
                </p>
                <div class="form-group col-xs-12 first_name">
                    <label class="control-label fullWidth" for="register_first_name">
                        First Name
                    </label>
                    <div class="fullWidth">
                        <input id="register_first_name" class="form-control" name="register_first_name" />
                    </div>
                    <span class="help-block"></span>
                </div>
                <div class="form-group col-xs-12 last_name">
                    <label class="control-label fullWidth" for="register_first_name">
                        Last Name
                    </label>
                    <div class="fullWidth">
                        <input id="register_last_name" class="form-control" name="register_last_name" />
                    </div>
                    <span class="help-block"></span>
                </div>
                <div class="form-group col-xs-24 email">
                    <label class="control-label fullWidth" for="register_email">
                        Email
                    </label>
                    <div class="fullWidth">
                        <input id="register_email" class="form-control" name="register_email" />
                    </div>
                    <span class="help-block"></span>
                </div>
                <div class="form-group col-xs-24 password">
                    <label class="control-label fullWidth" for="register_password">
                        Password
                    </label>
                    <div class="fullWidth">
                        <input id="register_password" class="form-control" name="register_password" type="password" />
                    </div>
                    <span class="help-block"></span>
                </div>
                <div class="form-group col-xs-24 recaptcha">
                    <div id="recaptchaSignupBlock" class="recaptchaBlock"></div>
                </div>
                <div class="form-group">
                    <div class="text-center">
                        <p><small>
                            By clicking "Sign up", I agree to the
                            <a href="http://www.fandango.com/policies/terms-and-policies" target="_blank">Terms of Service</a>
                            and <a href="http://www.fandango.com/policies/privacy-policy" target="_blank">Privacy Policy</a>.
                        </small></p>
                        <button type="submit" class="btn btn-primary btn-signup disabled">Sign Up</button>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <p class="text-center">
                    <small>Already have an account? <a class="loginModal" data-dismiss="modal" data-toggle="modal" data-target="#login">Log in here</a></small>
                </p>
            </div>
        </div>
    </div>
</script>
<script type="text/template" class="PasswordModalTemplate">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">
                    <span aria-hidden="true">&times;</span><span class="sr-only">Close</span>
                </button>
                <@ if (initialState) { @>
                <h2 class="modal-title">Forgot your password</h2>
                <@ } else { @>
                <h2 class="modal-title">Password sent</h2>
                <@ } @>
            </div>
            <div class="modal-body">
                <@ if (initialState) { @>
                    <@ if (errorMessage) { @>
                        <div class="alert alert-danger alert-dismissible" role="alert">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                            <@= errorMessage @>
                        </div>
                    <@ } @>
                    <p>
                        Please enter your email address and we will email you a new password.
                    </p>
                    <div class="form-group col-xs-24">
                        <label class="control-label fullWidth" for="forgot_email_address">
                            Email Address
                        </label>
                        <div class="fullWidth">
                            <input id="forgot_email_address" class="form-control" name="forgot_email_address" />
                        </div>
                    </div>
                    <button class="btn btn-primary btn-submit">Submit</button>
                <@ } else { @>
                    <div>
                        Check your email for a link to reset your password. <br/> <br/>
                        NOTE: If you do not get the new password email in your inbox,
                        check your Bulk Mail or Spam folder.
                    </div>
                    <a class="loginModal btn btn-primary" data-dismiss="modal" data-toggle="modal" data-target="#login">
                        Log in
                    </a>
                <@ } @>
            </div>
        </div>
    </div>
</script>
<script type="text/template" class="PageHeaderLoginTemplate">
    <@ if (loggedIn) { @>
        <div class="userDropdown dropdown">
            <a href="/user/id/<@= flixsterId @>">
                <img class="userThumb" src="<@= thumbnailUrl @>" />
                <span class="userName"><@= firstName @></span>
                <span class="fontelloIcon icon-down-dir"></span>
            </a>
            <ul class="dropdown-menu roundMenu">
                <li class="media userStats">
                    <a class="pull-left" href="/user/id/<@= flixsterId @>/">
                        <img src="<@= thumbnailUrl @>" width="40" alt="<@= firstName @>">
                    </a>
                    <div class="media-body">
                        <div class="name">
                            <a href="/user/id/<@= flixsterId @>/" class="unstyled articleLink name"><@= firstName @>&nbsp;<@= lastName @></a>
                        </div>
                        <div class="wts">
                            <a href="/user/id/<@= flixsterId @>/wts" class="unstyled articleLink stat">
                                <span class="glyphicon glyphicon-plus" style="color:#0C89C8"></span>
                                <span class="count"><@= wtsCount @></span>
                                &nbsp;Wants to See
                            </a>
                        </div>
                        <div class="ratings">
                            <a href="/user/id/<@= flixsterId @>/ratings" class="unstyled articleLink stat">
                                <span class="glyphicon glyphicon-star" style="color:#F18714"></span>
                                <span class="count"><@= ratingCount @></span>
                                &nbsp;Ratings
                            </a>
                        </div>
                        <div class="friends">
                            <a href="/user/id/<@= flixsterId @>/friends" class="unstyled articleLink stat">
                                <span class="icon friends"></span>
                                <span class="count"><@= friendCount @></span>
                                &nbsp;friends
                            </a>
                        </div>
                    </div>
                </li>
                <li class="header-top-bar-item">
                    <a id="header-top-bar-profile" class="articleLink" href="/user/id/<@= flixsterId @>/" style="margin-bottom:-4px">Profile</a>
                </li>
                <li class="header-top-bar-item">
                    <a id="header-top-bar-account" class="articleLink" href="/user/account/" style="margin-bottom:-4px">Account</a>
                </li>
                <li class="header-top-bar-item">
                    <a id="header-top-bar-logout" class="logout articleLink">Log Out</a>
                </li>
            </ul>
        </div>
    <@ } else { @>
        <a id="header-top-bar-signup" data-toggle="modal" data-target="#signup" class="signupLink login">SIGN UP</a>
        <a id="header-top-bar-login" data-toggle="modal" data-target="#login" class="loginLink login">LOG IN</a>
    <@ } @>
</script>
<script type="text/template" class="PageHeaderLoginMobileTemplate">
    <@ if (loggedIn) { @>
        <div class="userProfile">
            <a class="userProfileLink" href="/user/id/<@= flixsterId @>">
                <div class="media">
                    <div class="pull-left">
                        <img class="media-object" src="<@= thumbnailUrl @>" alt="<@= firstName @>" />
                    </div>
                    <div class="pull-right">
                        <span class="glyphicon glyphicon-cog"/>
                    </div>
                    <div class="media-body">
                        <span class="name"><@= firstName @>&nbsp;<@= lastName @></span>
                    </div>
                </div>
            </a>
        </div>
        <div class="logoutRow">
            <a class="logout">
                Logout
            </a>
        </div>
    <@ } else { @>
        <a data-toggle="modal" data-target="#signup" class="signupLink login">SIGN UP</a>
        <a data-toggle="modal" data-target="#login" class="loginLink login">LOG IN</a>
    <@ } @>
</script>
<script type="text/template" class="SocialToolsTemplate">
    <a class="social-tools-facebook-like" title="Facebook Like"></a>
    <a class="social-tools-facebook-share" title="Facebook Share"></a>
    <a class="social-tools-twitter" title="Twitter"></a>
    <a class="social-tools-pinterest" title="Pinterest"></a>
    <a class="social-tools-googleplus" title="Google+"></a>
    <a class="social-tools-stumbleupon" title="StumbleUpon"></a>
    <@ if (forumLink) { @>
        <a href="<@= forumLink @>" class="social-tools-comments" title="Forums"></a>
    <@ } @>
</script>
<script>
require(["https://staticv2-4.rottentomatoes.com/static/dist/jspjs/bodyScript.tag.min.js"], function(PageLoad) {
    PageLoad(770805418);
});
</script>
<script src="https://www.google.com/recaptcha/api.js?onload=onRecaptchaCallback&render=explicit" async defer></script>
<script>mps.writeFooter && mps.writeFooter();</script>
    <script type="text/javascript">_satellite.pageBottom();</script>
    
    <script>console.info("body-bottom" + window.performance.now());</script>
</body>
</html>

","rawHeaders":["Content-Type","text/html;charset=UTF-8","Transfer-Encoding","chunked","Connection","close","Cache-Control","max-age=900, public","Content-Language","en-US","Date","Mon, 19 Dec 2016 01:15:32 GMT","Server","Apache-Coyote/1.1","Content-Encoding","gzip","Age","47","Vary","Accept-Encoding","X-Cache","Hit from cloudfront","Via","1.1 c4032d302400e72942a63d2c4ac1acc5.cloudfront.net (CloudFront)","X-Amz-Cf-Id","bqSfN_xp9obbtWQA-q0MyTvEBXhkGNCtM2qbtKPP_FJha_MF9ejEJA=="],"url":"https://www.rottentomatoes.com/m/inception/","status":200,"statusText":"OK","varyHeaders":[["Accept-Encoding",null]]},"ttl":null,"stored":1482112402687}